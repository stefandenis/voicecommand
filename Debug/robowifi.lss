
robowifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00802800  00008bcc  00008c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008b06  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c6  0000cb06  00008b06  00008bba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000219  00802860  00802860  00008ce0  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00008ce0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008d3c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000db8  00000000  00000000  00008d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000dda6  00000000  00000000  00009b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004938  00000000  00000000  000178de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000081ba  00000000  00000000  0001c216  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003878  00000000  00000000  000243d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005f4b  00000000  00000000  00027c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000078cf  00000000  00000000  0002db93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cc8  00000000  00000000  00035462  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__ctors_end>
       4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       c:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__vector_3>
      10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      14:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      40:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      4c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      50:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      54:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      58:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      5c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      60:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__vector_24>
      64:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      68:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      6c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      70:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      74:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      78:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      7c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      80:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      84:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      88:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      8c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      90:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      94:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      98:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      9c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      a0:	12 02       	muls	r17, r18
      a2:	12 02       	muls	r17, r18
      a4:	14 02       	muls	r17, r20
      a6:	16 02       	muls	r17, r22
      a8:	18 02       	muls	r17, r24
      aa:	18 02       	muls	r17, r24
      ac:	1e 02       	muls	r17, r30
      ae:	1a 02       	muls	r17, r26
      b0:	44 21       	and	r20, r4
      b2:	3d 21       	and	r19, r13
      b4:	52 21       	and	r21, r2
      b6:	4b 21       	and	r20, r11
      b8:	67 21       	and	r22, r7
      ba:	59 21       	and	r21, r9
      bc:	60 21       	and	r22, r0
      be:	07 30       	cpi	r16, 0x07	; 7
      c0:	07 30       	cpi	r16, 0x07	; 7
      c2:	51 30       	cpi	r21, 0x01	; 1
      c4:	dd 2f       	mov	r29, r29
      c6:	f2 2f       	mov	r31, r18
      c8:	f8 2f       	mov	r31, r24
      ca:	28 30       	cpi	r18, 0x08	; 8
      cc:	28 30       	cpi	r18, 0x08	; 8
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	c7 2f       	mov	r28, r23
      d2:	b3 30       	cpi	r27, 0x03	; 3
      d4:	b3 30       	cpi	r27, 0x03	; 3
      d6:	b3 30       	cpi	r27, 0x03	; 3
      d8:	b3 30       	cpi	r27, 0x03	; 3
      da:	fe 2f       	mov	r31, r30

000000dc <__trampolines_end>:
      dc:	00 09       	sbc	r16, r0
      de:	12 1b       	sub	r17, r18
      e0:	24 2d       	mov	r18, r4
      e2:	36 3f       	cpi	r19, 0xF6	; 246
      e4:	48 41       	sbci	r20, 0x18	; 24
      e6:	5a 53       	subi	r21, 0x3A	; 58
      e8:	6c 65       	ori	r22, 0x5C	; 92
      ea:	7e 77       	andi	r23, 0x7E	; 126
      ec:	19 10       	cpse	r1, r9
      ee:	0b 02       	muls	r16, r27
      f0:	3d 34       	cpi	r19, 0x4D	; 77
      f2:	2f 26       	eor	r2, r31
      f4:	51 58       	subi	r21, 0x81	; 129
      f6:	43 4a       	sbci	r20, 0xA3	; 163
      f8:	75 7c       	andi	r23, 0xC5	; 197
      fa:	67 6e       	ori	r22, 0xE7	; 231
      fc:	32 3b       	cpi	r19, 0xB2	; 178
      fe:	20 29       	or	r18, r0
     100:	16 1f       	adc	r17, r22
     102:	04 0d       	add	r16, r4
     104:	7a 73       	andi	r23, 0x3A	; 58
     106:	68 61       	ori	r22, 0x18	; 24
     108:	5e 57       	subi	r21, 0x7E	; 126
     10a:	4c 45       	sbci	r20, 0x5C	; 92
     10c:	2b 22       	and	r2, r27
     10e:	39 30       	cpi	r19, 0x09	; 9
     110:	0f 06       	cpc	r0, r31
     112:	1d 14       	cp	r1, r13
     114:	63 6a       	ori	r22, 0xA3	; 163
     116:	71 78       	andi	r23, 0x81	; 129
     118:	47 4e       	sbci	r20, 0xE7	; 231
     11a:	55 5c       	subi	r21, 0xC5	; 197
     11c:	64 6d       	ori	r22, 0xD4	; 212
     11e:	76 7f       	andi	r23, 0xF6	; 246
     120:	40 49       	sbci	r20, 0x90	; 144
     122:	52 5b       	subi	r21, 0xB2	; 178
     124:	2c 25       	eor	r18, r12
     126:	3e 37       	cpi	r19, 0x7E	; 126
     128:	08 01       	movw	r0, r16
     12a:	1a 13       	cpse	r17, r26
     12c:	7d 74       	andi	r23, 0x4D	; 77
     12e:	6f 66       	ori	r22, 0x6F	; 111
     130:	59 50       	subi	r21, 0x09	; 9
     132:	4b 42       	sbci	r20, 0x2B	; 43
     134:	35 3c       	cpi	r19, 0xC5	; 197
     136:	27 2e       	mov	r2, r23
     138:	11 18       	sub	r1, r1
     13a:	03 0a       	sbc	r0, r19
     13c:	56 5f       	subi	r21, 0xF6	; 246
     13e:	44 4d       	sbci	r20, 0xD4	; 212
     140:	72 7b       	andi	r23, 0xB2	; 178
     142:	60 69       	ori	r22, 0x90	; 144
     144:	1e 17       	cp	r17, r30
     146:	0c 05       	cpc	r16, r12
     148:	3a 33       	cpi	r19, 0x3A	; 58
     14a:	28 21       	and	r18, r8
     14c:	4f 46       	sbci	r20, 0x6F	; 111
     14e:	5d 54       	subi	r21, 0x4D	; 77
     150:	6b 62       	ori	r22, 0x2B	; 43
     152:	79 70       	andi	r23, 0x09	; 9
     154:	07 0e       	add	r0, r23
     156:	15 1c       	adc	r1, r5
     158:	23 2a       	or	r2, r19
     15a:	31 38       	cpi	r19, 0x81	; 129
     15c:	41 48       	sbci	r20, 0x81	; 129
     15e:	53 5a       	subi	r21, 0xA3	; 163
     160:	65 6c       	ori	r22, 0xC5	; 197
     162:	77 7e       	andi	r23, 0xE7	; 231
     164:	09 00       	.word	0x0009	; ????
     166:	1b 12       	cpse	r1, r27
     168:	2d 24       	eor	r2, r13
     16a:	3f 36       	cpi	r19, 0x6F	; 111
     16c:	58 51       	subi	r21, 0x18	; 24
     16e:	4a 43       	sbci	r20, 0x3A	; 58
     170:	7c 75       	andi	r23, 0x5C	; 92
     172:	6e 67       	ori	r22, 0x7E	; 126
     174:	10 19       	sub	r17, r0
     176:	02 0b       	sbc	r16, r18
     178:	34 3d       	cpi	r19, 0xD4	; 212
     17a:	26 2f       	mov	r18, r22
     17c:	73 7a       	andi	r23, 0xA3	; 163
     17e:	61 68       	ori	r22, 0x81	; 129
     180:	57 5e       	subi	r21, 0xE7	; 231
     182:	45 4c       	sbci	r20, 0xC5	; 197
     184:	3b 32       	cpi	r19, 0x2B	; 43
     186:	29 20       	and	r2, r9
     188:	1f 16       	cp	r1, r31
     18a:	0d 04       	cpc	r0, r13
     18c:	6a 63       	ori	r22, 0x3A	; 58
     18e:	78 71       	andi	r23, 0x18	; 24
     190:	4e 47       	sbci	r20, 0x7E	; 126
     192:	5c 55       	subi	r21, 0x5C	; 92
     194:	22 2b       	or	r18, r18
     196:	30 39       	cpi	r19, 0x90	; 144
     198:	06 0f       	add	r16, r22
     19a:	14 1d       	adc	r17, r4
     19c:	25 2c       	mov	r2, r5
     19e:	37 3e       	cpi	r19, 0xE7	; 231
     1a0:	01 08       	sbc	r0, r1
     1a2:	13 1a       	sub	r1, r19
     1a4:	6d 64       	ori	r22, 0x4D	; 77
     1a6:	7f 76       	andi	r23, 0x6F	; 111
     1a8:	49 40       	sbci	r20, 0x09	; 9
     1aa:	5b 52       	subi	r21, 0x2B	; 43
     1ac:	3c 35       	cpi	r19, 0x5C	; 92
     1ae:	2e 27       	eor	r18, r30
     1b0:	18 11       	cpse	r17, r8
     1b2:	0a 03       	fmul	r16, r18
     1b4:	74 7d       	andi	r23, 0xD4	; 212
     1b6:	66 6f       	ori	r22, 0xF6	; 246
     1b8:	50 59       	subi	r21, 0x90	; 144
     1ba:	42 4b       	sbci	r20, 0xB2	; 178
     1bc:	17 1e       	adc	r1, r23
     1be:	05 0c       	add	r0, r5
     1c0:	33 3a       	cpi	r19, 0xA3	; 163
     1c2:	21 28       	or	r2, r1
     1c4:	5f 56       	subi	r21, 0x6F	; 111
     1c6:	4d 44       	sbci	r20, 0x4D	; 77
     1c8:	7b 72       	andi	r23, 0x2B	; 43
     1ca:	69 60       	ori	r22, 0x09	; 9
     1cc:	0e 07       	cpc	r16, r30
     1ce:	1c 15       	cp	r17, r12
     1d0:	2a 23       	and	r18, r26
     1d2:	38 31       	cpi	r19, 0x18	; 24
     1d4:	46 4f       	sbci	r20, 0xF6	; 246
     1d6:	54 5d       	subi	r21, 0xD4	; 212
     1d8:	62 6b       	ori	r22, 0xB2	; 178
     1da:	70 79       	andi	r23, 0x90	; 144

000001dc <__ctors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	df e3       	ldi	r29, 0x3F	; 63
     1e6:	de bf       	out	0x3e, r29	; 62

000001e8 <__do_copy_data>:
     1e8:	18 e2       	ldi	r17, 0x28	; 40
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b8 e2       	ldi	r27, 0x28	; 40
     1ee:	ec ec       	ldi	r30, 0xCC	; 204
     1f0:	fb e8       	ldi	r31, 0x8B	; 139
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a0 36       	cpi	r26, 0x60	; 96
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	2a e2       	ldi	r18, 0x2A	; 42
     200:	a0 e6       	ldi	r26, 0x60	; 96
     202:	b8 e2       	ldi	r27, 0x28	; 40
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a9 37       	cpi	r26, 0x79	; 121
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <main>
     212:	0c 94 81 45 	jmp	0x8b02	; 0x8b02 <_exit>

00000216 <__bad_interrupt>:
     216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
	system_init();
     222:	0e 94 f6 10 	call	0x21ec	; 0x21ec <system_init>
}
     226:	00 00       	nop
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <CLOUD_startApp>:

void intToHex(char *destination, uint8_t source)
{
    destination[0] = "0123456789abcdef"[source >> 4];
    destination[1] = "0123456789abcdef"[source & 0x0F];
}
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <wifiInit>
     23a:	88 23       	and	r24, r24
     23c:	21 f0       	breq	.+8      	; 0x246 <CLOUD_startApp+0x18>
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     244:	0d c0       	rjmp	.+26     	; 0x260 <CLOUD_startApp+0x32>
     246:	0e 94 94 02 	call	0x528	; 0x528 <mqttTopicInit>
     24a:	0e 94 07 03 	call	0x60e	; 0x60e <tlsInit>
     24e:	88 23       	and	r24, r24
     250:	21 f0       	breq	.+8      	; 0x25a <CLOUD_startApp+0x2c>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     258:	03 c0       	rjmp	.+6      	; 0x260 <CLOUD_startApp+0x32>
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <wifiConnect>:
     266:	0f 93       	push	r16
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	1f 92       	push	r1
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	0e 94 92 3b 	call	0x7724	; 0x7724 <socketInit>
     278:	0f ef       	ldi	r16, 0xFF	; 255
     27a:	10 e0       	ldi	r17, 0x00	; 0
     27c:	26 e0       	ldi	r18, 0x06	; 6
     27e:	3b ec       	ldi	r19, 0xCB	; 203
     280:	42 e0       	ldi	r20, 0x02	; 2
     282:	69 e0       	ldi	r22, 0x09	; 9
     284:	80 e1       	ldi	r24, 0x10	; 16
     286:	9b ec       	ldi	r25, 0xCB	; 203
     288:	0e 94 6f 24 	call	0x48de	; 0x48de <m2m_wifi_connect>
     28c:	89 83       	std	Y+1, r24	; 0x01
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	88 23       	and	r24, r24
     292:	19 f0       	breq	.+6      	; 0x29a <wifiConnect+0x34>
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0f 90       	pop	r0
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <waitForInternet>:
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	1f 92       	push	r1
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	21 ee       	ldi	r18, 0xE1	; 225
     2b4:	33 e0       	ldi	r19, 0x03	; 3
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	68 e0       	ldi	r22, 0x08	; 8
     2ba:	78 e0       	ldi	r23, 0x08	; 8
     2bc:	cb 01       	movw	r24, r22
     2be:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <m2m_ping_req>
     2c2:	89 83       	std	Y+1, r24	; 0x01
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <requestDns>:
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	1f 92       	push	r1
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <endpoint_ip>
     2dc:	10 92 62 28 	sts	0x2862, r1	; 0x802862 <endpoint_ip+0x1>
     2e0:	10 92 63 28 	sts	0x2863, r1	; 0x802863 <endpoint_ip+0x2>
     2e4:	10 92 64 28 	sts	0x2864, r1	; 0x802864 <endpoint_ip+0x3>
     2e8:	89 e1       	ldi	r24, 0x19	; 25
     2ea:	9b ec       	ldi	r25, 0xCB	; 203
     2ec:	0e 94 88 3f 	call	0x7f10	; 0x7f10 <gethostbyname>
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	88 23       	and	r24, r24
     2f6:	19 f0       	breq	.+6      	; 0x2fe <requestDns+0x30>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <tlsConnect>:
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	1f 92       	push	r1
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <socket>
     31e:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcpClientSocket>
     322:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcpClientSocket>
     326:	88 23       	and	r24, r24
     328:	1c f4       	brge	.+6      	; 0x330 <tlsConnect+0x28>
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	80 93 64 29 	sts	0x2964, r24	; 0x802964 <addr>
     338:	90 93 65 29 	sts	0x2965, r25	; 0x802965 <addr+0x1>
     33c:	87 e0       	ldi	r24, 0x07	; 7
     33e:	9b e5       	ldi	r25, 0x5B	; 91
     340:	80 93 66 29 	sts	0x2966, r24	; 0x802966 <addr+0x2>
     344:	90 93 67 29 	sts	0x2967, r25	; 0x802967 <addr+0x3>
     348:	80 91 61 28 	lds	r24, 0x2861	; 0x802861 <endpoint_ip>
     34c:	90 91 62 28 	lds	r25, 0x2862	; 0x802862 <endpoint_ip+0x1>
     350:	a0 91 63 28 	lds	r26, 0x2863	; 0x802863 <endpoint_ip+0x2>
     354:	b0 91 64 28 	lds	r27, 0x2864	; 0x802864 <endpoint_ip+0x3>
     358:	80 93 68 29 	sts	0x2968, r24	; 0x802968 <addr+0x4>
     35c:	90 93 69 29 	sts	0x2969, r25	; 0x802969 <addr+0x5>
     360:	a0 93 6a 29 	sts	0x296A, r26	; 0x80296a <addr+0x6>
     364:	b0 93 6b 29 	sts	0x296B, r27	; 0x80296b <addr+0x7>
     368:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcpClientSocket>
     36c:	40 e1       	ldi	r20, 0x10	; 16
     36e:	64 e6       	ldi	r22, 0x64	; 100
     370:	79 e2       	ldi	r23, 0x29	; 41
     372:	0e 94 b2 3c 	call	0x7964	; 0x7964 <connect>
     376:	89 83       	std	Y+1, r24	; 0x01
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	88 23       	and	r24, r24
     37c:	19 f0       	breq	.+6      	; 0x384 <tlsConnect+0x7c>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <mqttConnect>:
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	8f e0       	ldi	r24, 0x0F	; 15
     39a:	98 e2       	ldi	r25, 0x28	; 40
     39c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <initUmqtt>
     3a0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <MQTT_CLIENT_connect>
     3a4:	0e 94 b2 05 	call	0xb64	; 0xb64 <MQTT_CLIENT_isConnected>
     3a8:	89 83       	std	Y+1, r24	; 0x01
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <startSending>:
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	1f 92       	push	r1
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	88 e0       	ldi	r24, 0x08	; 8
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <CLOUD_publish>
     3cc:	87 e0       	ldi	r24, 0x07	; 7
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <startSubscribe>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	0e 94 73 02 	call	0x4e6	; 0x4e6 <CLOUD_subscribe>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
     3e8:	86 e0       	ldi	r24, 0x06	; 6
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <errorHandler>:
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	80 91 60 28 	lds	r24, 0x2860	; 0x802860 <__data_end>
     3fc:	88 2f       	mov	r24, r24
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	09 2e       	mov	r0, r25
     402:	00 0c       	add	r0, r0
     404:	aa 0b       	sbc	r26, r26
     406:	bb 0b       	sbc	r27, r27
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	27 e0       	ldi	r18, 0x07	; 7
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	84 1b       	sub	r24, r20
     412:	95 0b       	sbc	r25, r21
     414:	28 17       	cp	r18, r24
     416:	39 07       	cpc	r19, r25
     418:	88 f0       	brcs	.+34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     41a:	80 5b       	subi	r24, 0xB0	; 176
     41c:	9f 4f       	sbci	r25, 0xFF	; 255
     41e:	fc 01       	movw	r30, r24
     420:	0c 94 71 42 	jmp	0x84e2	; 0x84e2 <__tablejump2__>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0b c0       	rjmp	.+22     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	07 c0       	rjmp	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     434:	8a e5       	ldi	r24, 0x5A	; 90
     436:	99 e2       	ldi	r25, 0x29	; 41
     438:	0e 94 36 14 	call	0x286c	; 0x286c <scheduler_timeout_delete>
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <CLOUD_setSendFunction>:
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	00 d0       	rcall	.+0      	; 0x44a <CLOUD_setSendFunction+0x6>
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	80 93 5a 29 	sts	0x295A, r24	; 0x80295a <send_task>
     45a:	90 93 5b 29 	sts	0x295B, r25	; 0x80295b <send_task+0x1>
     45e:	00 00       	nop
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <CLOUD_runTask>:
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	1f 92       	push	r1
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 61 24 	call	0x48c2	; 0x48c2 <m2m_wifi_handle_events>
     47c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <scheduler_timeout_call_next_callback>
     480:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	e1 f0       	breq	.+56     	; 0x4c0 <CLOUD_runTask+0x56>
     488:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     48c:	89 83       	std	Y+1, r24	; 0x01
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	21 f4       	brne	.+8      	; 0x4a2 <CLOUD_runTask+0x38>
     49a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <errorHandler>
     49e:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <__data_end>
     4a2:	80 91 60 28 	lds	r24, 0x2860	; 0x802860 <__data_end>
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	8f 5f       	subi	r24, 0xFF	; 255
     4b0:	97 4d       	sbci	r25, 0xD7	; 215
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	fc 01       	movw	r30, r24
     4ba:	09 95       	icall
     4bc:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <__data_end>
     4c0:	00 00       	nop
     4c2:	0f 90       	pop	r0
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <CLOUD_receiveEvent>:
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	1f 92       	push	r1
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	89 83       	std	Y+1, r24	; 0x01
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
     4dc:	00 00       	nop
     4de:	0f 90       	pop	r0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <CLOUD_subscribe>:
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	0e 94 49 05 	call	0xa92	; 0xa92 <MQTT_CLIENT_subscribe>
     4f2:	00 00       	nop
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <CLOUD_publish>:
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	00 d0       	rcall	.+0      	; 0x500 <CLOUD_publish+0x6>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	9a 83       	std	Y+2, r25	; 0x02
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	0e 94 94 42 	call	0x8528	; 0x8528 <strlen>
     510:	28 2f       	mov	r18, r24
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	9a 81       	ldd	r25, Y+2	; 0x02
     516:	62 2f       	mov	r22, r18
     518:	0e 94 57 05 	call	0xaae	; 0xaae <MQTT_CLIENT_publish>
     51c:	00 00       	nop
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <mqttTopicInit>:

static void mqttTopicInit(void)
{
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
    sprintf(mqtt_client_id, "%s\0", AWS_THING_ID);
     530:	85 e2       	ldi	r24, 0x25	; 37
     532:	ea e3       	ldi	r30, 0x3A	; 58
     534:	fb ec       	ldi	r31, 0xCB	; 203
     536:	ae ee       	ldi	r26, 0xEE	; 238
     538:	b8 e2       	ldi	r27, 0x28	; 40
     53a:	01 90       	ld	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	8a 95       	dec	r24
     540:	e1 f7       	brne	.-8      	; 0x53a <mqttTopicInit+0x12>
    sprintf(mqtt_topic, "aphosura4ever/feeds/robowifi", mqtt_client_id);
     542:	8e ee       	ldi	r24, 0xEE	; 238
     544:	98 e2       	ldi	r25, 0x28	; 40
     546:	89 2f       	mov	r24, r25
     548:	8f 93       	push	r24
     54a:	8e ee       	ldi	r24, 0xEE	; 238
     54c:	98 e2       	ldi	r25, 0x28	; 40
     54e:	8f 93       	push	r24
     550:	8f e5       	ldi	r24, 0x5F	; 95
     552:	9b ec       	ldi	r25, 0xCB	; 203
     554:	89 2f       	mov	r24, r25
     556:	8f 93       	push	r24
     558:	8f e5       	ldi	r24, 0x5F	; 95
     55a:	9b ec       	ldi	r25, 0xCB	; 203
     55c:	8f 93       	push	r24
     55e:	84 e7       	ldi	r24, 0x74	; 116
     560:	99 e2       	ldi	r25, 0x29	; 41
     562:	89 2f       	mov	r24, r25
     564:	8f 93       	push	r24
     566:	84 e7       	ldi	r24, 0x74	; 116
     568:	99 e2       	ldi	r25, 0x29	; 41
     56a:	8f 93       	push	r24
     56c:	0e 94 9d 42 	call	0x853a	; 0x853a <sprintf>
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
	sprintf(username, "%s\0", ADAFRUIT_USERNAME);
     57c:	8e e0       	ldi	r24, 0x0E	; 14
     57e:	ec e7       	ldi	r30, 0x7C	; 124
     580:	fb ec       	ldi	r31, 0xCB	; 203
     582:	a7 e1       	ldi	r26, 0x17	; 23
     584:	b9 e2       	ldi	r27, 0x29	; 41
     586:	01 90       	ld	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	8a 95       	dec	r24
     58c:	e1 f7       	brne	.-8      	; 0x586 <mqttTopicInit+0x5e>
	sprintf(IO_KEY, "%s\0", ADAFRUIT_IO_KEY);
     58e:	81 e2       	ldi	r24, 0x21	; 33
     590:	ea e8       	ldi	r30, 0x8A	; 138
     592:	fb ec       	ldi	r31, 0xCB	; 203
     594:	a6 e2       	ldi	r26, 0x26	; 38
     596:	b9 e2       	ldi	r27, 0x29	; 41
     598:	01 90       	ld	r0, Z+
     59a:	0d 92       	st	X+, r0
     59c:	8a 95       	dec	r24
     59e:	e1 f7       	brne	.-8      	; 0x598 <mqttTopicInit+0x70>
}
     5a0:	00 00       	nop
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <wifiInit>:

static cloudEvent_t wifiInit(void)
{
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	2f 97       	sbiw	r28, 0x0f	; 15
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	de bf       	out	0x3e, r29	; 62
    sint8 rc;

    tstrWifiInitParam wifi_paramaters;
    m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
     5b6:	ce 01       	movw	r24, r28
     5b8:	02 96       	adiw	r24, 0x02	; 2
     5ba:	2e e0       	ldi	r18, 0x0E	; 14
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <m2m_memset>
    wifi_paramaters.pfAppWifiCb = NETWORK_wifiCallback;
     5c8:	82 e8       	ldi	r24, 0x82	; 130
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	8a 83       	std	Y+2, r24	; 0x02
     5ce:	9b 83       	std	Y+3, r25	; 0x03

    rc = nm_bsp_init();
     5d0:	0e 94 72 18 	call	0x30e4	; 0x30e4 <nm_bsp_init>
     5d4:	89 83       	std	Y+1, r24	; 0x01
    if(rc != M2M_SUCCESS)
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	88 23       	and	r24, r24
     5da:	29 f0       	breq	.+10     	; 0x5e6 <wifiInit+0x3e>
    {
        CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
        return CLOUD_EVENT_FAIL;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e c0       	rjmp	.+28     	; 0x602 <wifiInit+0x5a>
    }
    
    rc = m2m_wifi_init(&wifi_paramaters);
     5e6:	ce 01       	movw	r24, r28
     5e8:	02 96       	adiw	r24, 0x02	; 2
     5ea:	0e 94 1a 24 	call	0x4834	; 0x4834 <m2m_wifi_init>
     5ee:	89 83       	std	Y+1, r24	; 0x01
    if(rc != M2M_SUCCESS)
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	88 23       	and	r24, r24
     5f4:	29 f0       	breq	.+10     	; 0x600 <wifiInit+0x58>
    {
        CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
        return CLOUD_EVENT_FAIL;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <wifiInit+0x5a>
    }
    
    return CLOUD_EVENT_SUCCESS;
     600:	80 e0       	ldi	r24, 0x00	; 0
}
     602:	2f 96       	adiw	r28, 0x0f	; 15
     604:	cd bf       	out	0x3d, r28	; 61
     606:	de bf       	out	0x3e, r29	; 62
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <tlsInit>:

static cloudEvent_t tlsInit(void)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
    sint8 rc;
    
    registerSocketCallback(NETWORK_wifiSocketHandler, NETWORK_dnsCallback);
     616:	62 eb       	ldi	r22, 0xB2	; 178
     618:	73 e0       	ldi	r23, 0x03	; 3
     61a:	85 e1       	ldi	r24, 0x15	; 21
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 b3 3b 	call	0x7766	; 0x7766 <registerSocketCallback>
//     {
//         CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
//         return CLOUD_EVENT_FAIL;
//     }

    return CLOUD_EVENT_SUCCESS;
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <NETWORK_wifiSocketHandler>:
uint8_t gau8SocketBuffer[MAIN_WIFI_M2M_BUFFER_SIZE];
SOCKET tcpClientSocket = -1;
uint32_t endpoint_ip = 0;

void NETWORK_wifiSocketHandler(SOCKET sock, uint8 u8Msg, void *pMsg)
{
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	28 97       	sbiw	r28, 0x08	; 8
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	8d 83       	std	Y+5, r24	; 0x05
     63e:	6e 83       	std	Y+6, r22	; 0x06
     640:	4f 83       	std	Y+7, r20	; 0x07
     642:	58 87       	std	Y+8, r21	; 0x08
    tstrSocketRecvMsg        *pstrRecv;
    tstrSocketConnectMsg    *pstrConnect;
        
    switch (u8Msg)
     644:	8e 81       	ldd	r24, Y+6	; 0x06
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	86 30       	cpi	r24, 0x06	; 6
     64c:	91 05       	cpc	r25, r1
     64e:	59 f1       	breq	.+86     	; 0x6a6 <NETWORK_wifiSocketHandler+0x7c>
     650:	87 30       	cpi	r24, 0x07	; 7
     652:	91 05       	cpc	r25, r1
     654:	e1 f0       	breq	.+56     	; 0x68e <NETWORK_wifiSocketHandler+0x64>
     656:	05 97       	sbiw	r24, 0x05	; 5
     658:	09 f0       	breq	.+2      	; 0x65c <NETWORK_wifiSocketHandler+0x32>
            }
            
            break;
        }
    }
}
     65a:	4b c0       	rjmp	.+150    	; 0x6f2 <NETWORK_wifiSocketHandler+0xc8>
        
    switch (u8Msg)
    {
        case SOCKET_MSG_CONNECT:
        {
            pstrConnect = (tstrSocketConnectMsg *)pMsg;
     65c:	8f 81       	ldd	r24, Y+7	; 0x07
     65e:	98 85       	ldd	r25, Y+8	; 0x08
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	9a 83       	std	Y+2, r25	; 0x02
            if (pstrConnect && pstrConnect->s8Error >= 0)
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	89 2b       	or	r24, r25
     66a:	51 f0       	breq	.+20     	; 0x680 <NETWORK_wifiSocketHandler+0x56>
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	fc 01       	movw	r30, r24
     672:	81 81       	ldd	r24, Z+1	; 0x01
     674:	88 23       	and	r24, r24
     676:	24 f0       	brlt	.+8      	; 0x680 <NETWORK_wifiSocketHandler+0x56>
            {
                CLOUD_receiveEvent(CLOUD_EVENT_SUCCESS);
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            {
                close(sock);
                CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
            }
            
            break;
     67e:	39 c0       	rjmp	.+114    	; 0x6f2 <NETWORK_wifiSocketHandler+0xc8>
            {
                CLOUD_receiveEvent(CLOUD_EVENT_SUCCESS);
            }
            else
            {
                close(sock);
     680:	8d 81       	ldd	r24, Y+5	; 0x05
     682:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <close>
                CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            }
            
            break;
     68c:	32 c0       	rjmp	.+100    	; 0x6f2 <NETWORK_wifiSocketHandler+0xc8>
        }
        
        case SOCKET_MSG_SEND:
        {
            recv(tcpClientSocket, gau8SocketBuffer, sizeof(gau8SocketBuffer), 0);
     68e:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcpClientSocket>
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	98 01       	movw	r18, r16
     698:	40 e3       	ldi	r20, 0x30	; 48
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	66 ea       	ldi	r22, 0xA6	; 166
     69e:	79 e2       	ldi	r23, 0x29	; 41
     6a0:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <recv>
            
            break;
     6a4:	26 c0       	rjmp	.+76     	; 0x6f2 <NETWORK_wifiSocketHandler+0xc8>
        }
        
        case SOCKET_MSG_RECV:
        {
            tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pMsg;
     6a6:	8f 81       	ldd	r24, Y+7	; 0x07
     6a8:	98 85       	ldd	r25, Y+8	; 0x08
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	9c 83       	std	Y+4, r25	; 0x04
            if (pstrRecv && pstrRecv->s16BufferSize > 0)
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	89 2b       	or	r24, r25
     6b4:	b9 f0       	breq	.+46     	; 0x6e4 <NETWORK_wifiSocketHandler+0xba>
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	fc 01       	movw	r30, r24
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	18 16       	cp	r1, r24
     6c2:	19 06       	cpc	r1, r25
     6c4:	7c f4       	brge	.+30     	; 0x6e4 <NETWORK_wifiSocketHandler+0xba>
            {
                MQTT_CLIENT_receive(pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	fc 01       	movw	r30, r24
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	93 81       	ldd	r25, Z+3	; 0x03
     6d0:	28 2f       	mov	r18, r24
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	9c 81       	ldd	r25, Y+4	; 0x04
     6d6:	fc 01       	movw	r30, r24
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	62 2f       	mov	r22, r18
     6de:	0e 94 7f 05 	call	0xafe	; 0xafe <MQTT_CLIENT_receive>
            {
                close(sock);
                CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
            }
            
            break;
     6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <NETWORK_wifiSocketHandler+0xc6>
            {
                MQTT_CLIENT_receive(pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
            }
            else
            {
                close(sock);
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <close>
                CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            }
            
            break;
     6f0:	00 00       	nop
        }
    }
}
     6f2:	00 00       	nop
     6f4:	28 96       	adiw	r28, 0x08	; 8
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	08 95       	ret

00000704 <NETWORK_wifiCallback>:

void NETWORK_wifiCallback(uint8 u8MsgType, void *pvMsg)
{
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	25 97       	sbiw	r28, 0x05	; 5
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62
     712:	8b 83       	std	Y+3, r24	; 0x03
     714:	6c 83       	std	Y+4, r22	; 0x04
     716:	7d 83       	std	Y+5, r23	; 0x05
    switch (u8MsgType)
     718:	8b 81       	ldd	r24, Y+3	; 0x03
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	8c 32       	cpi	r24, 0x2C	; 44
     720:	91 05       	cpc	r25, r1
     722:	39 f0       	breq	.+14     	; 0x732 <NETWORK_wifiCallback+0x2e>
     724:	c2 97       	sbiw	r24, 0x32	; 50
     726:	09 f0       	breq	.+2      	; 0x72a <NETWORK_wifiCallback+0x26>
                CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
            }
            break;
        }
    }
}
     728:	16 c0       	rjmp	.+44     	; 0x756 <NETWORK_wifiCallback+0x52>
{
    switch (u8MsgType)
    {
        case M2M_WIFI_REQ_DHCP_CONF:
        {
            CLOUD_receiveEvent(CLOUD_EVENT_SUCCESS);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            break;
     730:	12 c0       	rjmp	.+36     	; 0x756 <NETWORK_wifiCallback+0x52>
        }
        
        case M2M_WIFI_RESP_CON_STATE_CHANGED:
        {
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
     732:	8c 81       	ldd	r24, Y+4	; 0x04
     734:	9d 81       	ldd	r25, Y+5	; 0x05
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	9a 83       	std	Y+2, r25	; 0x02
            if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED)
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	fc 01       	movw	r30, r24
     740:	80 81       	ld	r24, Z
     742:	88 23       	and	r24, r24
     744:	39 f4       	brne	.+14     	; 0x754 <NETWORK_wifiCallback+0x50>
            {
                close(tcpClientSocket);
     746:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcpClientSocket>
     74a:	0e 94 e6 3e 	call	0x7dcc	; 0x7dcc <close>
                CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            }
            break;
     754:	00 00       	nop
        }
    }
}
     756:	00 00       	nop
     758:	25 96       	adiw	r28, 0x05	; 5
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <NETWORK_dnsCallback>:
//             break;
//     }
// }

void NETWORK_dnsCallback(uint8* domainName, uint32 serverIP)
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	26 97       	sbiw	r28, 0x06	; 6
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	de bf       	out	0x3e, r29	; 62
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	4b 83       	std	Y+3, r20	; 0x03
     778:	5c 83       	std	Y+4, r21	; 0x04
     77a:	6d 83       	std	Y+5, r22	; 0x05
     77c:	7e 83       	std	Y+6, r23	; 0x06
    if(serverIP != 0)
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	ad 81       	ldd	r26, Y+5	; 0x05
     784:	be 81       	ldd	r27, Y+6	; 0x06
     786:	89 2b       	or	r24, r25
     788:	8a 2b       	or	r24, r26
     78a:	8b 2b       	or	r24, r27
     78c:	81 f0       	breq	.+32     	; 0x7ae <NETWORK_dnsCallback+0x4a>
    {
        endpoint_ip = serverIP;
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	9c 81       	ldd	r25, Y+4	; 0x04
     792:	ad 81       	ldd	r26, Y+5	; 0x05
     794:	be 81       	ldd	r27, Y+6	; 0x06
     796:	80 93 61 28 	sts	0x2861, r24	; 0x802861 <endpoint_ip>
     79a:	90 93 62 28 	sts	0x2862, r25	; 0x802862 <endpoint_ip+0x1>
     79e:	a0 93 63 28 	sts	0x2863, r26	; 0x802863 <endpoint_ip+0x2>
     7a2:	b0 93 64 28 	sts	0x2864, r27	; 0x802864 <endpoint_ip+0x3>
        CLOUD_receiveEvent(CLOUD_EVENT_SUCCESS);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
    }
    else
    {
        CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
    }
}
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <NETWORK_dnsCallback+0x50>
        endpoint_ip = serverIP;
        CLOUD_receiveEvent(CLOUD_EVENT_SUCCESS);
    }
    else
    {
        CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
    }
}
     7b4:	00 00       	nop
     7b6:	26 96       	adiw	r28, 0x06	; 6
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <NETWORK_pingCallback>:

void NETWORK_pingCallback(uint32 u32IPAddr, uint32 u32RTT, uint8 u8ErrorCode)
{
     7c2:	0f 93       	push	r16
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	29 97       	sbiw	r28, 0x09	; 9
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	69 83       	std	Y+1, r22	; 0x01
     7d4:	7a 83       	std	Y+2, r23	; 0x02
     7d6:	8b 83       	std	Y+3, r24	; 0x03
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	4f 83       	std	Y+7, r20	; 0x07
     7e0:	58 87       	std	Y+8, r21	; 0x08
     7e2:	09 87       	std	Y+9, r16	; 0x09
    switch (u8ErrorCode)
     7e4:	89 85       	ldd	r24, Y+9	; 0x09
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	91 05       	cpc	r25, r1
     7ee:	51 f0       	breq	.+20     	; 0x804 <NETWORK_pingCallback+0x42>
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	91 05       	cpc	r25, r1
     7f4:	59 f0       	breq	.+22     	; 0x80c <NETWORK_pingCallback+0x4a>
     7f6:	89 2b       	or	r24, r25
     7f8:	09 f0       	breq	.+2      	; 0x7fc <NETWORK_pingCallback+0x3a>
            CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
            break;
        }
        
        default:
        break;
     7fa:	0c c0       	rjmp	.+24     	; 0x814 <NETWORK_pingCallback+0x52>
{
    switch (u8ErrorCode)
    {
        case PING_ERR_SUCCESS:
        {
            CLOUD_receiveEvent(CLOUD_EVENT_SUCCESS);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            break;
     802:	08 c0       	rjmp	.+16     	; 0x814 <NETWORK_pingCallback+0x52>
        }
        
        case PING_ERR_DEST_UNREACH:
        {
            CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            break;
     80a:	04 c0       	rjmp	.+8      	; 0x814 <NETWORK_pingCallback+0x52>
        }
        
        case PING_ERR_TIMEOUT:
        {
            CLOUD_receiveEvent(CLOUD_EVENT_FAIL);
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
            break;
     812:	00 00       	nop
        }
        
        default:
        break;
    }
     814:	00 00       	nop
     816:	29 96       	adiw	r28, 0x09	; 9
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <motor_dir_port_init>:
#define LEFT_WHEEL_DUTY 0xC8
#define RIGHT_WHEEL_DUTY 0xC8



void motor_dir_port_init(){
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
	
	/* left wheel */
	PORTE.DIR |= PIN3_bm;
     82c:	80 e8       	ldi	r24, 0x80	; 128
     82e:	94 e0       	ldi	r25, 0x04	; 4
     830:	20 e8       	ldi	r18, 0x80	; 128
     832:	34 e0       	ldi	r19, 0x04	; 4
     834:	f9 01       	movw	r30, r18
     836:	20 81       	ld	r18, Z
     838:	28 60       	ori	r18, 0x08	; 8
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18
	PORTE.DIR |= PIN2_bm;
     83e:	80 e8       	ldi	r24, 0x80	; 128
     840:	94 e0       	ldi	r25, 0x04	; 4
     842:	20 e8       	ldi	r18, 0x80	; 128
     844:	34 e0       	ldi	r19, 0x04	; 4
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	24 60       	ori	r18, 0x04	; 4
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
	
	PORTE.OUT &= ~PIN2_bm;
     850:	80 e8       	ldi	r24, 0x80	; 128
     852:	94 e0       	ldi	r25, 0x04	; 4
     854:	20 e8       	ldi	r18, 0x80	; 128
     856:	34 e0       	ldi	r19, 0x04	; 4
     858:	f9 01       	movw	r30, r18
     85a:	24 81       	ldd	r18, Z+4	; 0x04
     85c:	2b 7f       	andi	r18, 0xFB	; 251
     85e:	fc 01       	movw	r30, r24
     860:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= PIN3_bm;
     862:	80 e8       	ldi	r24, 0x80	; 128
     864:	94 e0       	ldi	r25, 0x04	; 4
     866:	20 e8       	ldi	r18, 0x80	; 128
     868:	34 e0       	ldi	r19, 0x04	; 4
     86a:	f9 01       	movw	r30, r18
     86c:	24 81       	ldd	r18, Z+4	; 0x04
     86e:	28 60       	ori	r18, 0x08	; 8
     870:	fc 01       	movw	r30, r24
     872:	24 83       	std	Z+4, r18	; 0x04
	
	/* right wheel */
	PORTF.DIR |= PIN6_bm;
     874:	80 ea       	ldi	r24, 0xA0	; 160
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	20 ea       	ldi	r18, 0xA0	; 160
     87a:	34 e0       	ldi	r19, 0x04	; 4
     87c:	f9 01       	movw	r30, r18
     87e:	20 81       	ld	r18, Z
     880:	20 64       	ori	r18, 0x40	; 64
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18
	PORTF.DIR |= PIN4_bm;
     886:	80 ea       	ldi	r24, 0xA0	; 160
     888:	94 e0       	ldi	r25, 0x04	; 4
     88a:	20 ea       	ldi	r18, 0xA0	; 160
     88c:	34 e0       	ldi	r19, 0x04	; 4
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	20 61       	ori	r18, 0x10	; 16
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
	
	PORTF.OUT &= ~PIN6_bm;
     898:	80 ea       	ldi	r24, 0xA0	; 160
     89a:	94 e0       	ldi	r25, 0x04	; 4
     89c:	20 ea       	ldi	r18, 0xA0	; 160
     89e:	34 e0       	ldi	r19, 0x04	; 4
     8a0:	f9 01       	movw	r30, r18
     8a2:	24 81       	ldd	r18, Z+4	; 0x04
     8a4:	2f 7b       	andi	r18, 0xBF	; 191
     8a6:	fc 01       	movw	r30, r24
     8a8:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT |= PIN4_bm;
     8aa:	80 ea       	ldi	r24, 0xA0	; 160
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	20 ea       	ldi	r18, 0xA0	; 160
     8b0:	34 e0       	ldi	r19, 0x04	; 4
     8b2:	f9 01       	movw	r30, r18
     8b4:	24 81       	ldd	r18, Z+4	; 0x04
     8b6:	20 61       	ori	r18, 0x10	; 16
     8b8:	fc 01       	movw	r30, r24
     8ba:	24 83       	std	Z+4, r18	; 0x04
}
     8bc:	00 00       	nop
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <LEFT_WHEEL_TCB3_PWM_init>:

void LEFT_WHEEL_TCB3_PWM_init (void)
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
	PORTB_DIR |= PIN5_bm;
     8cc:	80 e2       	ldi	r24, 0x20	; 32
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	20 e2       	ldi	r18, 0x20	; 32
     8d2:	34 e0       	ldi	r19, 0x04	; 4
     8d4:	f9 01       	movw	r30, r18
     8d6:	20 81       	ld	r18, Z
     8d8:	20 62       	ori	r18, 0x20	; 32
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
	PORTB_OUT |= PIN5_bm;
     8de:	84 e2       	ldi	r24, 0x24	; 36
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	24 e2       	ldi	r18, 0x24	; 36
     8e4:	34 e0       	ldi	r19, 0x04	; 4
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	20 62       	ori	r18, 0x20	; 32
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
	/* Load CCMP register with the period and duty cycle of the PWM */
	//TCB3.CCMP = TCB_CMP_EXAMPLE_VALUE;
	TCB3.CCMPL = WHEEL_PWM_PERIOD; // period of pwm
     8f0:	80 eb       	ldi	r24, 0xB0	; 176
     8f2:	9a e0       	ldi	r25, 0x0A	; 10
     8f4:	2a ef       	ldi	r18, 0xFA	; 250
     8f6:	fc 01       	movw	r30, r24
     8f8:	24 87       	std	Z+12, r18	; 0x0c
	TCB3.CCMPH = LEFT_WHEEL_DUTY; // duty cycle
     8fa:	80 eb       	ldi	r24, 0xB0	; 176
     8fc:	9a e0       	ldi	r25, 0x0A	; 10
     8fe:	28 ec       	ldi	r18, 0xC8	; 200
     900:	fc 01       	movw	r30, r24
     902:	25 87       	std	Z+13, r18	; 0x0d
	/* Enable TCB3 and Divide CLK_PER by 2 */
	TCB3.CTRLA |= TCB_ENABLE_bm;
     904:	80 eb       	ldi	r24, 0xB0	; 176
     906:	9a e0       	ldi	r25, 0x0A	; 10
     908:	20 eb       	ldi	r18, 0xB0	; 176
     90a:	3a e0       	ldi	r19, 0x0A	; 10
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	21 60       	ori	r18, 0x01	; 1
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
	

	/* Enable Pin Output and configure TCB in 8-bit PWM mode */
	TCB3.CTRLB |= TCB_CCMPEN_bm;
     916:	80 eb       	ldi	r24, 0xB0	; 176
     918:	9a e0       	ldi	r25, 0x0A	; 10
     91a:	20 eb       	ldi	r18, 0xB0	; 176
     91c:	3a e0       	ldi	r19, 0x0A	; 10
     91e:	f9 01       	movw	r30, r18
     920:	21 81       	ldd	r18, Z+1	; 0x01
     922:	20 61       	ori	r18, 0x10	; 16
     924:	fc 01       	movw	r30, r24
     926:	21 83       	std	Z+1, r18	; 0x01
	TCB3.CTRLB |= TCB_CNTMODE_PWM8_gc;
     928:	80 eb       	ldi	r24, 0xB0	; 176
     92a:	9a e0       	ldi	r25, 0x0A	; 10
     92c:	20 eb       	ldi	r18, 0xB0	; 176
     92e:	3a e0       	ldi	r19, 0x0A	; 10
     930:	f9 01       	movw	r30, r18
     932:	21 81       	ldd	r18, Z+1	; 0x01
     934:	27 60       	ori	r18, 0x07	; 7
     936:	fc 01       	movw	r30, r24
     938:	21 83       	std	Z+1, r18	; 0x01
}
     93a:	00 00       	nop
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <RIGHT_WHEEL_TCB1_PWM_init>:

void RIGHT_WHEEL_TCB1_PWM_init(void){
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
		PORTF.DIR |= PIN5_bm;
     94a:	80 ea       	ldi	r24, 0xA0	; 160
     94c:	94 e0       	ldi	r25, 0x04	; 4
     94e:	20 ea       	ldi	r18, 0xA0	; 160
     950:	34 e0       	ldi	r19, 0x04	; 4
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	20 62       	ori	r18, 0x20	; 32
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
		PORTF.OUT |= PIN5_bm;
     95c:	80 ea       	ldi	r24, 0xA0	; 160
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	20 ea       	ldi	r18, 0xA0	; 160
     962:	34 e0       	ldi	r19, 0x04	; 4
     964:	f9 01       	movw	r30, r18
     966:	24 81       	ldd	r18, Z+4	; 0x04
     968:	20 62       	ori	r18, 0x20	; 32
     96a:	fc 01       	movw	r30, r24
     96c:	24 83       	std	Z+4, r18	; 0x04
		/* Load CCMP register with the period and duty cycle of the PWM */

		TCB1.CCMPL = WHEEL_PWM_PERIOD; // period of pwm
     96e:	80 e9       	ldi	r24, 0x90	; 144
     970:	9a e0       	ldi	r25, 0x0A	; 10
     972:	2a ef       	ldi	r18, 0xFA	; 250
     974:	fc 01       	movw	r30, r24
     976:	24 87       	std	Z+12, r18	; 0x0c
		TCB1.CCMPH = RIGHT_WHEEL_DUTY; // duty cycle
     978:	80 e9       	ldi	r24, 0x90	; 144
     97a:	9a e0       	ldi	r25, 0x0A	; 10
     97c:	28 ec       	ldi	r18, 0xC8	; 200
     97e:	fc 01       	movw	r30, r24
     980:	25 87       	std	Z+13, r18	; 0x0d
		/* Enable TCB3 and Divide CLK_PER by 2 */
		TCB1.CTRLA |= TCB_ENABLE_bm;
     982:	80 e9       	ldi	r24, 0x90	; 144
     984:	9a e0       	ldi	r25, 0x0A	; 10
     986:	20 e9       	ldi	r18, 0x90	; 144
     988:	3a e0       	ldi	r19, 0x0A	; 10
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	21 60       	ori	r18, 0x01	; 1
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
		
		/* Enable Pin Output and configure TCB in 8-bit PWM mode */
		TCB1.CTRLB |= TCB_CCMPEN_bm;
     994:	80 e9       	ldi	r24, 0x90	; 144
     996:	9a e0       	ldi	r25, 0x0A	; 10
     998:	20 e9       	ldi	r18, 0x90	; 144
     99a:	3a e0       	ldi	r19, 0x0A	; 10
     99c:	f9 01       	movw	r30, r18
     99e:	21 81       	ldd	r18, Z+1	; 0x01
     9a0:	20 61       	ori	r18, 0x10	; 16
     9a2:	fc 01       	movw	r30, r24
     9a4:	21 83       	std	Z+1, r18	; 0x01
		TCB1.CTRLB |= TCB_CNTMODE_PWM8_gc;
     9a6:	80 e9       	ldi	r24, 0x90	; 144
     9a8:	9a e0       	ldi	r25, 0x0A	; 10
     9aa:	20 e9       	ldi	r18, 0x90	; 144
     9ac:	3a e0       	ldi	r19, 0x0A	; 10
     9ae:	f9 01       	movw	r30, r18
     9b0:	21 81       	ldd	r18, Z+1	; 0x01
     9b2:	27 60       	ori	r18, 0x07	; 7
     9b4:	fc 01       	movw	r30, r24
     9b6:	21 83       	std	Z+1, r18	; 0x01
		PORTMUX.TCBROUTEA |= PIN1_bm;
     9b8:	80 ee       	ldi	r24, 0xE0	; 224
     9ba:	95 e0       	ldi	r25, 0x05	; 5
     9bc:	20 ee       	ldi	r18, 0xE0	; 224
     9be:	35 e0       	ldi	r19, 0x05	; 5
     9c0:	f9 01       	movw	r30, r18
     9c2:	25 81       	ldd	r18, Z+5	; 0x05
     9c4:	22 60       	ori	r18, 0x02	; 2
     9c6:	fc 01       	movw	r30, r24
     9c8:	25 83       	std	Z+5, r18	; 0x05
	
}
     9ca:	00 00       	nop
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <initUmqtt>:




void initUmqtt(SOCKET *sock) 
{
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <initUmqtt+0x6>
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	9a 83       	std	Y+2, r25	; 0x02
    tcp_client_socket = sock;
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	80 93 ce 28 	sts	0x28CE, r24	; 0x8028ce <tcp_client_socket>
     9e8:	90 93 cf 28 	sts	0x28CF, r25	; 0x8028cf <tcp_client_socket+0x1>
}
     9ec:	00 00       	nop
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <umqtt_message_cb>:

static void umqtt_message_cb(struct umqtt_connection * conn,
			char *topic, uint8_t *data, int len){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	28 97       	sbiw	r28, 0x08	; 8
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	9a 83       	std	Y+2, r25	; 0x02
     a0a:	6b 83       	std	Y+3, r22	; 0x03
     a0c:	7c 83       	std	Y+4, r23	; 0x04
     a0e:	4d 83       	std	Y+5, r20	; 0x05
     a10:	5e 83       	std	Y+6, r21	; 0x06
     a12:	2f 83       	std	Y+7, r18	; 0x07
     a14:	38 87       	std	Y+8, r19	; 0x08
				
		asm("nop");		
     a16:	00 00       	nop
				
			}
     a18:	00 00       	nop
     a1a:	28 96       	adiw	r28, 0x08	; 8
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <umqtt_connected_cb>:

static void umqtt_connected_cb (struct umqtt_connection * conn)
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <umqtt_connected_cb+0x6>
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	9a 83       	std	Y+2, r25	; 0x02
    CLOUD_receiveEvent(CLOUD_EVENT_SUCCESS);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 65 02 	call	0x4ca	; 0x4ca <CLOUD_receiveEvent>
}
     a3a:	00 00       	nop
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <umqtt_send_packet>:

static void umqtt_send_packet (struct umqtt_connection *conn)
{
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <umqtt_send_packet+0x6>
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	9a 83       	std	Y+2, r25	; 0x02
    send(*tcp_client_socket, conn->txbuff.start, conn->txbuff.datalen, 0);
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	fc 01       	movw	r30, r24
     a5a:	86 81       	ldd	r24, Z+6	; 0x06
     a5c:	97 81       	ldd	r25, Z+7	; 0x07
     a5e:	ac 01       	movw	r20, r24
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	fc 01       	movw	r30, r24
     a66:	60 81       	ld	r22, Z
     a68:	71 81       	ldd	r23, Z+1	; 0x01
     a6a:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <tcp_client_socket>
     a6e:	90 91 cf 28 	lds	r25, 0x28CF	; 0x8028cf <tcp_client_socket+0x1>
     a72:	fc 01       	movw	r30, r24
     a74:	80 81       	ld	r24, Z
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	0e 94 49 3d 	call	0x7a92	; 0x7a92 <send>
    umqtt_circ_init(&conn->txbuff);
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	9a 81       	ldd	r25, Y+2	; 0x02
     a82:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <umqtt_circ_init>
}
     a86:	00 00       	nop
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <MQTT_CLIENT_subscribe>:
    .new_packet_callback = umqtt_send_packet
	
};


void MQTT_CLIENT_subscribe(){
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
	umqtt_subscribe(&umqtt_conn,mqtt_topic);
     a9a:	64 e7       	ldi	r22, 0x74	; 116
     a9c:	79 e2       	ldi	r23, 0x29	; 41
     a9e:	80 e1       	ldi	r24, 0x10	; 16
     aa0:	98 e2       	ldi	r25, 0x28	; 40
     aa2:	0e 94 ce 08 	call	0x119c	; 0x119c <umqtt_subscribe>
}
     aa6:	00 00       	nop
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <MQTT_CLIENT_publish>:

void MQTT_CLIENT_publish(uint8_t *data, uint8_t datalen) {
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	a4 97       	sbiw	r28, 0x24	; 36
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	8a a3       	std	Y+34, r24	; 0x22
     abe:	9b a3       	std	Y+35, r25	; 0x23
     ac0:	6c a3       	std	Y+36, r22	; 0x24
    char mqtt_get_topic[] = "aphosura4ever/feeds/robowifi/get";
     ac2:	21 e2       	ldi	r18, 0x21	; 33
     ac4:	eb ea       	ldi	r30, 0xAB	; 171
     ac6:	fb ec       	ldi	r31, 0xCB	; 203
     ac8:	ce 01       	movw	r24, r28
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	dc 01       	movw	r26, r24
     ace:	01 90       	ld	r0, Z+
     ad0:	0d 92       	st	X+, r0
     ad2:	2a 95       	dec	r18
     ad4:	e1 f7       	brne	.-8      	; 0xace <MQTT_CLIENT_publish+0x20>
	umqtt_publish(&umqtt_conn ,mqtt_get_topic , data, datalen);
     ad6:	8c a1       	ldd	r24, Y+36	; 0x24
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	8a a1       	ldd	r24, Y+34	; 0x22
     ade:	9b a1       	ldd	r25, Y+35	; 0x23
     ae0:	ac 01       	movw	r20, r24
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	bc 01       	movw	r22, r24
     ae8:	80 e1       	ldi	r24, 0x10	; 16
     aea:	98 e2       	ldi	r25, 0x28	; 40
     aec:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <umqtt_publish>
}
     af0:	00 00       	nop
     af2:	a4 96       	adiw	r28, 0x24	; 36
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <MQTT_CLIENT_receive>:

void MQTT_CLIENT_receive(uint8_t *data, uint8_t len) {
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	00 d0       	rcall	.+0      	; 0xb04 <MQTT_CLIENT_receive+0x6>
     b04:	1f 92       	push	r1
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	9a 83       	std	Y+2, r25	; 0x02
     b0e:	6b 83       	std	Y+3, r22	; 0x03
    umqtt_circ_push(&umqtt_conn.rxbuff, data, len);
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	28 2f       	mov	r18, r24
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	a9 01       	movw	r20, r18
     b1c:	bc 01       	movw	r22, r24
     b1e:	88 e1       	ldi	r24, 0x18	; 24
     b20:	98 e2       	ldi	r25, 0x28	; 40
     b22:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    umqtt_process(&umqtt_conn);
     b26:	80 e1       	ldi	r24, 0x10	; 16
     b28:	98 e2       	ldi	r25, 0x28	; 40
     b2a:	0e 94 36 0b 	call	0x166c	; 0x166c <umqtt_process>
}
     b2e:	00 00       	nop
     b30:	23 96       	adiw	r28, 0x03	; 3
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <MQTT_CLIENT_connect>:

void MQTT_CLIENT_connect(void) {
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
    umqtt_circ_init(&umqtt_conn.txbuff);
     b44:	80 e1       	ldi	r24, 0x10	; 16
     b46:	98 e2       	ldi	r25, 0x28	; 40
     b48:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <umqtt_circ_init>
    umqtt_circ_init(&umqtt_conn.rxbuff);
     b4c:	88 e1       	ldi	r24, 0x18	; 24
     b4e:	98 e2       	ldi	r25, 0x28	; 40
     b50:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <umqtt_circ_init>
    umqtt_connect(&umqtt_conn);
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	98 e2       	ldi	r25, 0x28	; 40
     b58:	0e 94 98 07 	call	0xf30	; 0xf30 <umqtt_connect>
	
}
     b5c:	00 00       	nop
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <MQTT_CLIENT_isConnected>:

uint8_t MQTT_CLIENT_isConnected(void) {
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
    return umqtt_conn.state == UMQTT_STATE_CONNECTED;
     b6c:	90 91 45 28 	lds	r25, 0x2845	; 0x802845 <umqtt_conn+0x35>
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	92 30       	cpi	r25, 0x02	; 2
     b74:	09 f0       	breq	.+2      	; 0xb78 <MQTT_CLIENT_isConnected+0x14>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <htons>:

	umqtt_circ_push(&conn->txbuff, packet, sizeof(packet));
	conn->nack_ping++;
	if (conn->new_packet_callback)
		conn->new_packet_callback(conn);
}
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <htons+0x6>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	98 27       	eor	r25, r24
     b92:	89 27       	eor	r24, r25
     b94:	98 27       	eor	r25, r24
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <umqtt_decode_length>:
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	28 97       	sbiw	r28, 0x08	; 8
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	8f 83       	std	Y+7, r24	; 0x07
     bb0:	98 87       	std	Y+8, r25	; 0x08
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	89 83       	std	Y+1, r24	; 0x01
     bb8:	9a 83       	std	Y+2, r25	; 0x02
     bba:	1b 82       	std	Y+3, r1	; 0x03
     bbc:	1c 82       	std	Y+4, r1	; 0x04
     bbe:	1d 82       	std	Y+5, r1	; 0x05
     bc0:	1e 82       	std	Y+6, r1	; 0x06
     bc2:	2a c0       	rjmp	.+84     	; 0xc18 <umqtt_decode_length+0x78>
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	9e 81       	ldd	r25, Y+6	; 0x06
     bc8:	2f 81       	ldd	r18, Y+7	; 0x07
     bca:	38 85       	ldd	r19, Y+8	; 0x08
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	ac 01       	movw	r20, r24
     bda:	4f 77       	andi	r20, 0x7F	; 127
     bdc:	55 27       	eor	r21, r21
     bde:	29 81       	ldd	r18, Y+1	; 0x01
     be0:	3a 81       	ldd	r19, Y+2	; 0x02
     be2:	42 9f       	mul	r20, r18
     be4:	c0 01       	movw	r24, r0
     be6:	43 9f       	mul	r20, r19
     be8:	90 0d       	add	r25, r0
     bea:	52 9f       	mul	r21, r18
     bec:	90 0d       	add	r25, r0
     bee:	11 24       	eor	r1, r1
     bf0:	2b 81       	ldd	r18, Y+3	; 0x03
     bf2:	3c 81       	ldd	r19, Y+4	; 0x04
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	9c 83       	std	Y+4, r25	; 0x04
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	96 95       	lsr	r25
     c02:	98 2f       	mov	r25, r24
     c04:	88 27       	eor	r24, r24
     c06:	97 95       	ror	r25
     c08:	87 95       	ror	r24
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	9e 81       	ldd	r25, Y+6	; 0x06
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	8d 83       	std	Y+5, r24	; 0x05
     c16:	9e 83       	std	Y+6, r25	; 0x06
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	9e 81       	ldd	r25, Y+6	; 0x06
     c1c:	89 2b       	or	r24, r25
     c1e:	91 f2       	breq	.-92     	; 0xbc4 <umqtt_decode_length+0x24>
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	2f 81       	ldd	r18, Y+7	; 0x07
     c28:	38 85       	ldd	r19, Y+8	; 0x08
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	88 23       	and	r24, r24
     c34:	3c f2       	brlt	.-114    	; 0xbc4 <umqtt_decode_length+0x24>
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	28 96       	adiw	r28, 0x08	; 8
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <umqtt_encode_length>:
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	28 97       	sbiw	r28, 0x08	; 8
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	9e 83       	std	Y+6, r25	; 0x06
     c58:	6f 83       	std	Y+7, r22	; 0x07
     c5a:	78 87       	std	Y+8, r23	; 0x08
     c5c:	1b 82       	std	Y+3, r1	; 0x03
     c5e:	1c 82       	std	Y+4, r1	; 0x04
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	8f 77       	andi	r24, 0x7F	; 127
     c66:	90 78       	andi	r25, 0x80	; 128
     c68:	99 23       	and	r25, r25
     c6a:	24 f4       	brge	.+8      	; 0xc74 <umqtt_encode_length+0x2e>
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	9f 6f       	ori	r25, 0xFF	; 255
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
     c7a:	9e 81       	ldd	r25, Y+6	; 0x06
     c7c:	99 23       	and	r25, r25
     c7e:	14 f4       	brge	.+4      	; 0xc84 <umqtt_encode_length+0x3e>
     c80:	81 58       	subi	r24, 0x81	; 129
     c82:	9f 4f       	sbci	r25, 0xFF	; 255
     c84:	88 0f       	add	r24, r24
     c86:	89 2f       	mov	r24, r25
     c88:	88 1f       	adc	r24, r24
     c8a:	99 0b       	sbc	r25, r25
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	9e 83       	std	Y+6, r25	; 0x06
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	18 16       	cp	r1, r24
     c96:	19 06       	cpc	r1, r25
     c98:	2c f4       	brge	.+10     	; 0xca4 <umqtt_encode_length+0x5e>
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	9a 83       	std	Y+2, r25	; 0x02
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	2f 81       	ldd	r18, Y+7	; 0x07
     caa:	38 85       	ldd	r19, Y+8	; 0x08
     cac:	82 0f       	add	r24, r18
     cae:	93 1f       	adc	r25, r19
     cb0:	29 81       	ldd	r18, Y+1	; 0x01
     cb2:	fc 01       	movw	r30, r24
     cb4:	20 83       	st	Z, r18
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	8b 83       	std	Y+3, r24	; 0x03
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	89 2b       	or	r24, r25
     cc6:	61 f6       	brne	.-104    	; 0xc60 <umqtt_encode_length+0x1a>
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	28 96       	adiw	r28, 0x08	; 8
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <umqtt_circ_init>:
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	00 d0       	rcall	.+0      	; 0xcde <umqtt_circ_init+0x6>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	fc 01       	movw	r30, r24
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	fc 01       	movw	r30, r24
     cf6:	24 83       	std	Z+4, r18	; 0x04
     cf8:	35 83       	std	Z+5, r19	; 0x05
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	fc 01       	movw	r30, r24
     d00:	16 82       	std	Z+6, r1	; 0x06
     d02:	17 82       	std	Z+7, r1	; 0x07
     d04:	00 00       	nop
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <umqtt_circ_push>:
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	2a 97       	sbiw	r28, 0x0a	; 10
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	8d 83       	std	Y+5, r24	; 0x05
     d20:	9e 83       	std	Y+6, r25	; 0x06
     d22:	6f 83       	std	Y+7, r22	; 0x07
     d24:	78 87       	std	Y+8, r23	; 0x08
     d26:	49 87       	std	Y+9, r20	; 0x09
     d28:	5a 87       	std	Y+10, r21	; 0x0a
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	9e 81       	ldd	r25, Y+6	; 0x06
     d2e:	fc 01       	movw	r30, r24
     d30:	20 81       	ld	r18, Z
     d32:	31 81       	ldd	r19, Z+1	; 0x01
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	fc 01       	movw	r30, r24
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	8b 83       	std	Y+3, r24	; 0x03
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	fc 01       	movw	r30, r24
     d4e:	20 81       	ld	r18, Z
     d50:	31 81       	ldd	r19, Z+1	; 0x01
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	fc 01       	movw	r30, r24
     d58:	84 81       	ldd	r24, Z+4	; 0x04
     d5a:	95 81       	ldd	r25, Z+5	; 0x05
     d5c:	ac 01       	movw	r20, r24
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	fc 01       	movw	r30, r24
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	48 1b       	sub	r20, r24
     d6a:	59 0b       	sbc	r21, r25
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	fc 01       	movw	r30, r24
     d72:	86 81       	ldd	r24, Z+6	; 0x06
     d74:	97 81       	ldd	r25, Z+7	; 0x07
     d76:	ba 01       	movw	r22, r20
     d78:	68 0f       	add	r22, r24
     d7a:	79 1f       	adc	r23, r25
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	9e 81       	ldd	r25, Y+6	; 0x06
     d80:	fc 01       	movw	r30, r24
     d82:	42 81       	ldd	r20, Z+2	; 0x02
     d84:	53 81       	ldd	r21, Z+3	; 0x03
     d86:	cb 01       	movw	r24, r22
     d88:	ba 01       	movw	r22, r20
     d8a:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__divmodhi4>
     d8e:	82 0f       	add	r24, r18
     d90:	93 1f       	adc	r25, r19
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	43 c0       	rjmp	.+134    	; 0xe1e <umqtt_circ_push+0x10e>
     d98:	29 81       	ldd	r18, Y+1	; 0x01
     d9a:	3a 81       	ldd	r19, Y+2	; 0x02
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	82 17       	cp	r24, r18
     da2:	93 07       	cpc	r25, r19
     da4:	38 f4       	brcc	.+14     	; 0xdb4 <umqtt_circ_push+0xa4>
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	fc 01       	movw	r30, r24
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	fc 01       	movw	r30, r24
     dba:	86 81       	ldd	r24, Z+6	; 0x06
     dbc:	97 81       	ldd	r25, Z+7	; 0x07
     dbe:	89 2b       	or	r24, r25
     dc0:	51 f0       	breq	.+20     	; 0xdd6 <umqtt_circ_push+0xc6>
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	fc 01       	movw	r30, r24
     dc8:	24 81       	ldd	r18, Z+4	; 0x04
     dca:	35 81       	ldd	r19, Z+5	; 0x05
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	59 f1       	breq	.+86     	; 0xe2c <umqtt_circ_push+0x11c>
     dd6:	8f 81       	ldd	r24, Y+7	; 0x07
     dd8:	98 85       	ldd	r25, Y+8	; 0x08
     dda:	fc 01       	movw	r30, r24
     ddc:	20 81       	ld	r18, Z
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	fc 01       	movw	r30, r24
     de4:	20 83       	st	Z, r18
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	8f 81       	ldd	r24, Y+7	; 0x07
     df2:	98 85       	ldd	r25, Y+8	; 0x08
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	8f 83       	std	Y+7, r24	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	fc 01       	movw	r30, r24
     e00:	86 81       	ldd	r24, Z+6	; 0x06
     e02:	97 81       	ldd	r25, Z+7	; 0x07
     e04:	9c 01       	movw	r18, r24
     e06:	2f 5f       	subi	r18, 0xFF	; 255
     e08:	3f 4f       	sbci	r19, 0xFF	; 255
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	fc 01       	movw	r30, r24
     e10:	26 83       	std	Z+6, r18	; 0x06
     e12:	37 83       	std	Z+7, r19	; 0x07
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	89 87       	std	Y+9, r24	; 0x09
     e1c:	9a 87       	std	Y+10, r25	; 0x0a
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	18 16       	cp	r1, r24
     e24:	19 06       	cpc	r1, r25
     e26:	0c f4       	brge	.+2      	; 0xe2a <umqtt_circ_push+0x11a>
     e28:	b7 cf       	rjmp	.-146    	; 0xd98 <umqtt_circ_push+0x88>
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <umqtt_circ_push+0x11e>
     e2c:	00 00       	nop
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	2a 96       	adiw	r28, 0x0a	; 10
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <umqtt_circ_pop>:
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2a 97       	sbiw	r28, 0x0a	; 10
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	6f 83       	std	Y+7, r22	; 0x07
     e52:	78 87       	std	Y+8, r23	; 0x08
     e54:	49 87       	std	Y+9, r20	; 0x09
     e56:	5a 87       	std	Y+10, r21	; 0x0a
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	9e 81       	ldd	r25, Y+6	; 0x06
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 81       	ld	r18, Z
     e60:	31 81       	ldd	r19, Z+1	; 0x01
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	fc 01       	movw	r30, r24
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	8b 83       	std	Y+3, r24	; 0x03
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	1a 82       	std	Y+2, r1	; 0x02
     e7a:	42 c0       	rjmp	.+132    	; 0xf00 <umqtt_circ_pop+0xc2>
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	2f 81       	ldd	r18, Y+7	; 0x07
     e82:	38 85       	ldd	r19, Y+8	; 0x08
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	2d 81       	ldd	r18, Y+5	; 0x05
     e8a:	3e 81       	ldd	r19, Y+6	; 0x06
     e8c:	f9 01       	movw	r30, r18
     e8e:	24 81       	ldd	r18, Z+4	; 0x04
     e90:	35 81       	ldd	r19, Z+5	; 0x05
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	fc 01       	movw	r30, r24
     ea0:	84 81       	ldd	r24, Z+4	; 0x04
     ea2:	95 81       	ldd	r25, Z+5	; 0x05
     ea4:	9c 01       	movw	r18, r24
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	fc 01       	movw	r30, r24
     eb0:	24 83       	std	Z+4, r18	; 0x04
     eb2:	35 83       	std	Z+5, r19	; 0x05
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	fc 01       	movw	r30, r24
     eba:	86 81       	ldd	r24, Z+6	; 0x06
     ebc:	97 81       	ldd	r25, Z+7	; 0x07
     ebe:	9c 01       	movw	r18, r24
     ec0:	21 50       	subi	r18, 0x01	; 1
     ec2:	31 09       	sbc	r19, r1
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	fc 01       	movw	r30, r24
     eca:	26 83       	std	Z+6, r18	; 0x06
     ecc:	37 83       	std	Z+7, r19	; 0x07
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	fc 01       	movw	r30, r24
     ed4:	24 81       	ldd	r18, Z+4	; 0x04
     ed6:	35 81       	ldd	r19, Z+5	; 0x05
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	82 17       	cp	r24, r18
     ede:	93 07       	cpc	r25, r19
     ee0:	50 f4       	brcc	.+20     	; 0xef6 <umqtt_circ_pop+0xb8>
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 81       	ld	r18, Z
     eea:	31 81       	ldd	r19, Z+1	; 0x01
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	9e 81       	ldd	r25, Y+6	; 0x06
     ef0:	fc 01       	movw	r30, r24
     ef2:	24 83       	std	Z+4, r18	; 0x04
     ef4:	35 83       	std	Z+5, r19	; 0x05
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	29 81       	ldd	r18, Y+1	; 0x01
     f02:	3a 81       	ldd	r19, Y+2	; 0x02
     f04:	89 85       	ldd	r24, Y+9	; 0x09
     f06:	9a 85       	ldd	r25, Y+10	; 0x0a
     f08:	28 17       	cp	r18, r24
     f0a:	39 07       	cpc	r19, r25
     f0c:	4c f4       	brge	.+18     	; 0xf20 <umqtt_circ_pop+0xe2>
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	fc 01       	movw	r30, r24
     f14:	86 81       	ldd	r24, Z+6	; 0x06
     f16:	97 81       	ldd	r25, Z+7	; 0x07
     f18:	18 16       	cp	r1, r24
     f1a:	19 06       	cpc	r1, r25
     f1c:	0c f4       	brge	.+2      	; 0xf20 <umqtt_circ_pop+0xe2>
     f1e:	ae cf       	rjmp	.-164    	; 0xe7c <umqtt_circ_pop+0x3e>
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	2a 96       	adiw	r28, 0x0a	; 10
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <umqtt_connect>:
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	69 97       	sbiw	r28, 0x19	; 25
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	88 8f       	std	Y+24, r24	; 0x18
     f40:	99 8f       	std	Y+25, r25	; 0x19
     f42:	88 8d       	ldd	r24, Y+24	; 0x18
     f44:	99 8d       	ldd	r25, Y+25	; 0x19
     f46:	fc 01       	movw	r30, r24
     f48:	82 89       	ldd	r24, Z+18	; 0x12
     f4a:	93 89       	ldd	r25, Z+19	; 0x13
     f4c:	0e 94 94 42 	call	0x8528	; 0x8528 <strlen>
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	88 8d       	ldd	r24, Y+24	; 0x18
     f56:	99 8d       	ldd	r25, Y+25	; 0x19
     f58:	08 96       	adiw	r24, 0x08	; 8
     f5a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <umqtt_circ_init>
     f5e:	88 8d       	ldd	r24, Y+24	; 0x18
     f60:	99 8d       	ldd	r25, Y+25	; 0x19
     f62:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <umqtt_circ_init>
     f66:	88 8d       	ldd	r24, Y+24	; 0x18
     f68:	99 8d       	ldd	r25, Y+25	; 0x19
     f6a:	fc 01       	movw	r30, r24
     f6c:	15 aa       	std	Z+53, r1	; 0x35
     f6e:	88 8d       	ldd	r24, Y+24	; 0x18
     f70:	99 8d       	ldd	r25, Y+25	; 0x19
     f72:	fc 01       	movw	r30, r24
     f74:	12 a6       	std	Z+42, r1	; 0x2a
     f76:	13 a6       	std	Z+43, r1	; 0x2b
     f78:	88 8d       	ldd	r24, Y+24	; 0x18
     f7a:	99 8d       	ldd	r25, Y+25	; 0x19
     f7c:	fc 01       	movw	r30, r24
     f7e:	16 a2       	std	Z+38, r1	; 0x26
     f80:	17 a2       	std	Z+39, r1	; 0x27
     f82:	88 8d       	ldd	r24, Y+24	; 0x18
     f84:	99 8d       	ldd	r25, Y+25	; 0x19
     f86:	fc 01       	movw	r30, r24
     f88:	10 a6       	std	Z+40, r1	; 0x28
     f8a:	11 a6       	std	Z+41, r1	; 0x29
     f8c:	88 8d       	ldd	r24, Y+24	; 0x18
     f8e:	99 8d       	ldd	r25, Y+25	; 0x19
     f90:	21 e0       	ldi	r18, 0x01	; 1
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	fc 01       	movw	r30, r24
     f96:	24 a7       	std	Z+44, r18	; 0x2c
     f98:	35 a7       	std	Z+45, r19	; 0x2d
     f9a:	80 e1       	ldi	r24, 0x10	; 16
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	1a 86       	std	Y+10, r1	; 0x0a
     fa0:	84 e0       	ldi	r24, 0x04	; 4
     fa2:	8b 87       	std	Y+11, r24	; 0x0b
     fa4:	8d e4       	ldi	r24, 0x4D	; 77
     fa6:	8c 87       	std	Y+12, r24	; 0x0c
     fa8:	81 e5       	ldi	r24, 0x51	; 81
     faa:	8d 87       	std	Y+13, r24	; 0x0d
     fac:	84 e5       	ldi	r24, 0x54	; 84
     fae:	8e 87       	std	Y+14, r24	; 0x0e
     fb0:	84 e5       	ldi	r24, 0x54	; 84
     fb2:	8f 87       	std	Y+15, r24	; 0x0f
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	88 8b       	std	Y+16, r24	; 0x10
     fb8:	88 8d       	ldd	r24, Y+24	; 0x18
     fba:	99 8d       	ldd	r25, Y+25	; 0x19
     fbc:	fc 01       	movw	r30, r24
     fbe:	86 8d       	ldd	r24, Z+30	; 0x1e
     fc0:	97 8d       	ldd	r25, Z+31	; 0x1f
     fc2:	89 2b       	or	r24, r25
     fc4:	39 f4       	brne	.+14     	; 0xfd4 <umqtt_connect+0xa4>
     fc6:	88 8d       	ldd	r24, Y+24	; 0x18
     fc8:	99 8d       	ldd	r25, Y+25	; 0x19
     fca:	fc 01       	movw	r30, r24
     fcc:	82 a1       	ldd	r24, Z+34	; 0x22
     fce:	93 a1       	ldd	r25, Z+35	; 0x23
     fd0:	89 2b       	or	r24, r25
     fd2:	b1 f0       	breq	.+44     	; 0x1000 <umqtt_connect+0xd0>
     fd4:	82 ec       	ldi	r24, 0xC2	; 194
     fd6:	89 8b       	std	Y+17, r24	; 0x11
     fd8:	88 8d       	ldd	r24, Y+24	; 0x18
     fda:	99 8d       	ldd	r25, Y+25	; 0x19
     fdc:	fc 01       	movw	r30, r24
     fde:	82 a1       	ldd	r24, Z+34	; 0x22
     fe0:	93 a1       	ldd	r25, Z+35	; 0x23
     fe2:	2b 81       	ldd	r18, Y+3	; 0x03
     fe4:	3c 81       	ldd	r19, Y+4	; 0x04
     fe6:	28 0f       	add	r18, r24
     fe8:	39 1f       	adc	r19, r25
     fea:	88 8d       	ldd	r24, Y+24	; 0x18
     fec:	99 8d       	ldd	r25, Y+25	; 0x19
     fee:	fc 01       	movw	r30, r24
     ff0:	86 8d       	ldd	r24, Z+30	; 0x1e
     ff2:	97 8d       	ldd	r25, Z+31	; 0x1f
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	04 96       	adiw	r24, 0x04	; 4
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <umqtt_connect+0xdc>
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	89 8b       	std	Y+17, r24	; 0x11
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	88 8d       	ldd	r24, Y+24	; 0x18
    100e:	99 8d       	ldd	r25, Y+25	; 0x19
    1010:	fc 01       	movw	r30, r24
    1012:	80 89       	ldd	r24, Z+16	; 0x10
    1014:	91 89       	ldd	r25, Z+17	; 0x11
    1016:	89 2f       	mov	r24, r25
    1018:	99 27       	eor	r25, r25
    101a:	8a 8b       	std	Y+18, r24	; 0x12
    101c:	88 8d       	ldd	r24, Y+24	; 0x18
    101e:	99 8d       	ldd	r25, Y+25	; 0x19
    1020:	fc 01       	movw	r30, r24
    1022:	80 89       	ldd	r24, Z+16	; 0x10
    1024:	91 89       	ldd	r25, Z+17	; 0x11
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	88 8d       	ldd	r24, Y+24	; 0x18
    102a:	99 8d       	ldd	r25, Y+25	; 0x19
    102c:	9e 01       	movw	r18, r28
    102e:	2b 5f       	subi	r18, 0xFB	; 251
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	0c 96       	adiw	r24, 0x0c	; 12
    1042:	9c 01       	movw	r18, r24
    1044:	ce 01       	movw	r24, r28
    1046:	06 96       	adiw	r24, 0x06	; 6
    1048:	bc 01       	movw	r22, r24
    104a:	c9 01       	movw	r24, r18
    104c:	0e 94 23 06 	call	0xc46	; 0xc46 <umqtt_encode_length>
    1050:	ac 01       	movw	r20, r24
    1052:	88 8d       	ldd	r24, Y+24	; 0x18
    1054:	99 8d       	ldd	r25, Y+25	; 0x19
    1056:	9e 01       	movw	r18, r28
    1058:	2a 5f       	subi	r18, 0xFA	; 250
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	b9 01       	movw	r22, r18
    105e:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1062:	88 8d       	ldd	r24, Y+24	; 0x18
    1064:	99 8d       	ldd	r25, Y+25	; 0x19
    1066:	9e 01       	movw	r18, r28
    1068:	26 5f       	subi	r18, 0xF6	; 246
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	4a e0       	ldi	r20, 0x0A	; 10
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	b9 01       	movw	r22, r18
    1072:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <htons>
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	88 8d       	ldd	r24, Y+24	; 0x18
    1084:	99 8d       	ldd	r25, Y+25	; 0x19
    1086:	9e 01       	movw	r18, r28
    1088:	2d 5f       	subi	r18, 0xFD	; 253
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	42 e0       	ldi	r20, 0x02	; 2
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1096:	88 8d       	ldd	r24, Y+24	; 0x18
    1098:	99 8d       	ldd	r25, Y+25	; 0x19
    109a:	fc 01       	movw	r30, r24
    109c:	82 89       	ldd	r24, Z+18	; 0x12
    109e:	93 89       	ldd	r25, Z+19	; 0x13
    10a0:	0e 94 94 42 	call	0x8528	; 0x8528 <strlen>
    10a4:	ac 01       	movw	r20, r24
    10a6:	88 8d       	ldd	r24, Y+24	; 0x18
    10a8:	99 8d       	ldd	r25, Y+25	; 0x19
    10aa:	fc 01       	movw	r30, r24
    10ac:	22 89       	ldd	r18, Z+18	; 0x12
    10ae:	33 89       	ldd	r19, Z+19	; 0x13
    10b0:	88 8d       	ldd	r24, Y+24	; 0x18
    10b2:	99 8d       	ldd	r25, Y+25	; 0x19
    10b4:	b9 01       	movw	r22, r18
    10b6:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    10ba:	88 8d       	ldd	r24, Y+24	; 0x18
    10bc:	99 8d       	ldd	r25, Y+25	; 0x19
    10be:	fc 01       	movw	r30, r24
    10c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    10c2:	97 8d       	ldd	r25, Z+31	; 0x1f
    10c4:	89 2b       	or	r24, r25
    10c6:	41 f4       	brne	.+16     	; 0x10d8 <umqtt_connect+0x1a8>
    10c8:	88 8d       	ldd	r24, Y+24	; 0x18
    10ca:	99 8d       	ldd	r25, Y+25	; 0x19
    10cc:	fc 01       	movw	r30, r24
    10ce:	82 a1       	ldd	r24, Z+34	; 0x22
    10d0:	93 a1       	ldd	r25, Z+35	; 0x23
    10d2:	89 2b       	or	r24, r25
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <umqtt_connect+0x1a8>
    10d6:	46 c0       	rjmp	.+140    	; 0x1164 <umqtt_connect+0x234>
    10d8:	88 8d       	ldd	r24, Y+24	; 0x18
    10da:	99 8d       	ldd	r25, Y+25	; 0x19
    10dc:	fc 01       	movw	r30, r24
    10de:	86 8d       	ldd	r24, Z+30	; 0x1e
    10e0:	97 8d       	ldd	r25, Z+31	; 0x1f
    10e2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <htons>
    10e6:	8c 8b       	std	Y+20, r24	; 0x14
    10e8:	9d 8b       	std	Y+21, r25	; 0x15
    10ea:	88 8d       	ldd	r24, Y+24	; 0x18
    10ec:	99 8d       	ldd	r25, Y+25	; 0x19
    10ee:	9e 01       	movw	r18, r28
    10f0:	2c 5e       	subi	r18, 0xEC	; 236
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	42 e0       	ldi	r20, 0x02	; 2
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	b9 01       	movw	r22, r18
    10fa:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    10fe:	88 8d       	ldd	r24, Y+24	; 0x18
    1100:	99 8d       	ldd	r25, Y+25	; 0x19
    1102:	fc 01       	movw	r30, r24
    1104:	86 8d       	ldd	r24, Z+30	; 0x1e
    1106:	97 8d       	ldd	r25, Z+31	; 0x1f
    1108:	ac 01       	movw	r20, r24
    110a:	88 8d       	ldd	r24, Y+24	; 0x18
    110c:	99 8d       	ldd	r25, Y+25	; 0x19
    110e:	fc 01       	movw	r30, r24
    1110:	24 8d       	ldd	r18, Z+28	; 0x1c
    1112:	35 8d       	ldd	r19, Z+29	; 0x1d
    1114:	88 8d       	ldd	r24, Y+24	; 0x18
    1116:	99 8d       	ldd	r25, Y+25	; 0x19
    1118:	b9 01       	movw	r22, r18
    111a:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    111e:	88 8d       	ldd	r24, Y+24	; 0x18
    1120:	99 8d       	ldd	r25, Y+25	; 0x19
    1122:	fc 01       	movw	r30, r24
    1124:	82 a1       	ldd	r24, Z+34	; 0x22
    1126:	93 a1       	ldd	r25, Z+35	; 0x23
    1128:	0e 94 bf 05 	call	0xb7e	; 0xb7e <htons>
    112c:	8e 8b       	std	Y+22, r24	; 0x16
    112e:	9f 8b       	std	Y+23, r25	; 0x17
    1130:	88 8d       	ldd	r24, Y+24	; 0x18
    1132:	99 8d       	ldd	r25, Y+25	; 0x19
    1134:	9e 01       	movw	r18, r28
    1136:	2a 5e       	subi	r18, 0xEA	; 234
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	42 e0       	ldi	r20, 0x02	; 2
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	b9 01       	movw	r22, r18
    1140:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1144:	88 8d       	ldd	r24, Y+24	; 0x18
    1146:	99 8d       	ldd	r25, Y+25	; 0x19
    1148:	fc 01       	movw	r30, r24
    114a:	82 a1       	ldd	r24, Z+34	; 0x22
    114c:	93 a1       	ldd	r25, Z+35	; 0x23
    114e:	ac 01       	movw	r20, r24
    1150:	88 8d       	ldd	r24, Y+24	; 0x18
    1152:	99 8d       	ldd	r25, Y+25	; 0x19
    1154:	fc 01       	movw	r30, r24
    1156:	20 a1       	ldd	r18, Z+32	; 0x20
    1158:	31 a1       	ldd	r19, Z+33	; 0x21
    115a:	88 8d       	ldd	r24, Y+24	; 0x18
    115c:	99 8d       	ldd	r25, Y+25	; 0x19
    115e:	b9 01       	movw	r22, r18
    1160:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1164:	88 8d       	ldd	r24, Y+24	; 0x18
    1166:	99 8d       	ldd	r25, Y+25	; 0x19
    1168:	21 e0       	ldi	r18, 0x01	; 1
    116a:	fc 01       	movw	r30, r24
    116c:	25 ab       	std	Z+53, r18	; 0x35
    116e:	88 8d       	ldd	r24, Y+24	; 0x18
    1170:	99 8d       	ldd	r25, Y+25	; 0x19
    1172:	fc 01       	movw	r30, r24
    1174:	82 8d       	ldd	r24, Z+26	; 0x1a
    1176:	93 8d       	ldd	r25, Z+27	; 0x1b
    1178:	89 2b       	or	r24, r25
    117a:	49 f0       	breq	.+18     	; 0x118e <umqtt_connect+0x25e>
    117c:	88 8d       	ldd	r24, Y+24	; 0x18
    117e:	99 8d       	ldd	r25, Y+25	; 0x19
    1180:	fc 01       	movw	r30, r24
    1182:	22 8d       	ldd	r18, Z+26	; 0x1a
    1184:	33 8d       	ldd	r19, Z+27	; 0x1b
    1186:	88 8d       	ldd	r24, Y+24	; 0x18
    1188:	99 8d       	ldd	r25, Y+25	; 0x19
    118a:	f9 01       	movw	r30, r18
    118c:	09 95       	icall
    118e:	00 00       	nop
    1190:	69 96       	adiw	r28, 0x19	; 25
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <umqtt_subscribe>:
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	60 97       	sbiw	r28, 0x10	; 16
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	8d 87       	std	Y+13, r24	; 0x0d
    11ac:	9e 87       	std	Y+14, r25	; 0x0e
    11ae:	6f 87       	std	Y+15, r22	; 0x0f
    11b0:	78 8b       	std	Y+16, r23	; 0x10
    11b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b4:	98 89       	ldd	r25, Y+16	; 0x10
    11b6:	0e 94 94 42 	call	0x8528	; 0x8528 <strlen>
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	1c 86       	std	Y+12, r1	; 0x0c
    11c0:	82 e8       	ldi	r24, 0x82	; 130
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c8:	fc 01       	movw	r30, r24
    11ca:	84 a5       	ldd	r24, Z+44	; 0x2c
    11cc:	95 a5       	ldd	r25, Z+45	; 0x2d
    11ce:	89 2f       	mov	r24, r25
    11d0:	99 0f       	add	r25, r25
    11d2:	99 0b       	sbc	r25, r25
    11d4:	88 87       	std	Y+8, r24	; 0x08
    11d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11da:	fc 01       	movw	r30, r24
    11dc:	84 a5       	ldd	r24, Z+44	; 0x2c
    11de:	95 a5       	ldd	r25, Z+45	; 0x2d
    11e0:	89 87       	std	Y+9, r24	; 0x09
    11e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e6:	fc 01       	movw	r30, r24
    11e8:	84 a5       	ldd	r24, Z+44	; 0x2c
    11ea:	95 a5       	ldd	r25, Z+45	; 0x2d
    11ec:	9c 01       	movw	r18, r24
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	fc 01       	movw	r30, r24
    11f8:	24 a7       	std	Z+44, r18	; 0x2c
    11fa:	35 a7       	std	Z+45, r19	; 0x2d
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	0e 94 bf 05 	call	0xb7e	; 0xb7e <htons>
    1204:	8a 87       	std	Y+10, r24	; 0x0a
    1206:	9b 87       	std	Y+11, r25	; 0x0b
    1208:	8d 85       	ldd	r24, Y+13	; 0x0d
    120a:	9e 85       	ldd	r25, Y+14	; 0x0e
    120c:	9e 01       	movw	r18, r28
    120e:	2d 5f       	subi	r18, 0xFD	; 253
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	b9 01       	movw	r22, r18
    1218:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	05 96       	adiw	r24, 0x05	; 5
    1222:	9c 01       	movw	r18, r24
    1224:	ce 01       	movw	r24, r28
    1226:	04 96       	adiw	r24, 0x04	; 4
    1228:	bc 01       	movw	r22, r24
    122a:	c9 01       	movw	r24, r18
    122c:	0e 94 23 06 	call	0xc46	; 0xc46 <umqtt_encode_length>
    1230:	ac 01       	movw	r20, r24
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	9e 01       	movw	r18, r28
    1238:	2c 5f       	subi	r18, 0xFC	; 252
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	b9 01       	movw	r22, r18
    123e:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1242:	8d 85       	ldd	r24, Y+13	; 0x0d
    1244:	9e 85       	ldd	r25, Y+14	; 0x0e
    1246:	9e 01       	movw	r18, r28
    1248:	28 5f       	subi	r18, 0xF8	; 248
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	42 e0       	ldi	r20, 0x02	; 2
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	b9 01       	movw	r22, r18
    1252:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1256:	8d 85       	ldd	r24, Y+13	; 0x0d
    1258:	9e 85       	ldd	r25, Y+14	; 0x0e
    125a:	9e 01       	movw	r18, r28
    125c:	26 5f       	subi	r18, 0xF6	; 246
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	42 e0       	ldi	r20, 0x02	; 2
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	b9 01       	movw	r22, r18
    1266:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    126a:	49 81       	ldd	r20, Y+1	; 0x01
    126c:	5a 81       	ldd	r21, Y+2	; 0x02
    126e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1270:	9e 85       	ldd	r25, Y+14	; 0x0e
    1272:	2f 85       	ldd	r18, Y+15	; 0x0f
    1274:	38 89       	ldd	r19, Y+16	; 0x10
    1276:	b9 01       	movw	r22, r18
    1278:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    127c:	8d 85       	ldd	r24, Y+13	; 0x0d
    127e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1280:	9e 01       	movw	r18, r28
    1282:	24 5f       	subi	r18, 0xF4	; 244
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	b9 01       	movw	r22, r18
    128c:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1290:	8d 85       	ldd	r24, Y+13	; 0x0d
    1292:	9e 85       	ldd	r25, Y+14	; 0x0e
    1294:	fc 01       	movw	r30, r24
    1296:	80 a5       	ldd	r24, Z+40	; 0x28
    1298:	91 a5       	ldd	r25, Z+41	; 0x29
    129a:	9c 01       	movw	r18, r24
    129c:	2f 5f       	subi	r18, 0xFF	; 255
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 a7       	std	Z+40, r18	; 0x28
    12a8:	31 a7       	std	Z+41, r19	; 0x29
    12aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ae:	fc 01       	movw	r30, r24
    12b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    12b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    12b4:	89 2b       	or	r24, r25
    12b6:	49 f0       	breq	.+18     	; 0x12ca <umqtt_subscribe+0x12e>
    12b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    12bc:	fc 01       	movw	r30, r24
    12be:	22 8d       	ldd	r18, Z+26	; 0x1a
    12c0:	33 8d       	ldd	r19, Z+27	; 0x1b
    12c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c6:	f9 01       	movw	r30, r18
    12c8:	09 95       	icall
    12ca:	00 00       	nop
    12cc:	60 96       	adiw	r28, 0x10	; 16
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <umqtt_publish>:
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	61 97       	sbiw	r28, 0x11	; 17
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	8a 87       	std	Y+10, r24	; 0x0a
    12e8:	9b 87       	std	Y+11, r25	; 0x0b
    12ea:	6c 87       	std	Y+12, r22	; 0x0c
    12ec:	7d 87       	std	Y+13, r23	; 0x0d
    12ee:	4e 87       	std	Y+14, r20	; 0x0e
    12f0:	5f 87       	std	Y+15, r21	; 0x0f
    12f2:	28 8b       	std	Y+16, r18	; 0x10
    12f4:	39 8b       	std	Y+17, r19	; 0x11
    12f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    12fa:	0e 94 94 42 	call	0x8528	; 0x8528 <strlen>
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	80 e3       	ldi	r24, 0x30	; 48
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	8a 85       	ldd	r24, Y+10	; 0x0a
    1308:	9b 85       	ldd	r25, Y+11	; 0x0b
    130a:	9e 01       	movw	r18, r28
    130c:	2d 5f       	subi	r18, 0xFD	; 253
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	b9 01       	movw	r22, r18
    1316:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	9c 01       	movw	r18, r24
    1320:	2e 5f       	subi	r18, 0xFE	; 254
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	88 89       	ldd	r24, Y+16	; 0x10
    1326:	99 89       	ldd	r25, Y+17	; 0x11
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	9e 01       	movw	r18, r28
    132e:	2c 5f       	subi	r18, 0xFC	; 252
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	b9 01       	movw	r22, r18
    1334:	0e 94 23 06 	call	0xc46	; 0xc46 <umqtt_encode_length>
    1338:	ac 01       	movw	r20, r24
    133a:	8a 85       	ldd	r24, Y+10	; 0x0a
    133c:	9b 85       	ldd	r25, Y+11	; 0x0b
    133e:	9e 01       	movw	r18, r28
    1340:	2c 5f       	subi	r18, 0xFC	; 252
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	b9 01       	movw	r22, r18
    1346:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	89 2f       	mov	r24, r25
    1350:	99 0f       	add	r25, r25
    1352:	99 0b       	sbc	r25, r25
    1354:	88 87       	std	Y+8, r24	; 0x08
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	89 87       	std	Y+9, r24	; 0x09
    135a:	8a 85       	ldd	r24, Y+10	; 0x0a
    135c:	9b 85       	ldd	r25, Y+11	; 0x0b
    135e:	9e 01       	movw	r18, r28
    1360:	28 5f       	subi	r18, 0xF8	; 248
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	42 e0       	ldi	r20, 0x02	; 2
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	b9 01       	movw	r22, r18
    136a:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    136e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1370:	9b 85       	ldd	r25, Y+11	; 0x0b
    1372:	49 81       	ldd	r20, Y+1	; 0x01
    1374:	5a 81       	ldd	r21, Y+2	; 0x02
    1376:	2c 85       	ldd	r18, Y+12	; 0x0c
    1378:	3d 85       	ldd	r19, Y+13	; 0x0d
    137a:	b9 01       	movw	r22, r18
    137c:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1380:	8a 85       	ldd	r24, Y+10	; 0x0a
    1382:	9b 85       	ldd	r25, Y+11	; 0x0b
    1384:	48 89       	ldd	r20, Y+16	; 0x10
    1386:	59 89       	ldd	r21, Y+17	; 0x11
    1388:	2e 85       	ldd	r18, Y+14	; 0x0e
    138a:	3f 85       	ldd	r19, Y+15	; 0x0f
    138c:	b9 01       	movw	r22, r18
    138e:	0e 94 88 06 	call	0xd10	; 0xd10 <umqtt_circ_push>
    1392:	8a 85       	ldd	r24, Y+10	; 0x0a
    1394:	9b 85       	ldd	r25, Y+11	; 0x0b
    1396:	fc 01       	movw	r30, r24
    1398:	82 8d       	ldd	r24, Z+26	; 0x1a
    139a:	93 8d       	ldd	r25, Z+27	; 0x1b
    139c:	89 2b       	or	r24, r25
    139e:	49 f0       	breq	.+18     	; 0x13b2 <umqtt_publish+0xda>
    13a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a4:	fc 01       	movw	r30, r24
    13a6:	22 8d       	ldd	r18, Z+26	; 0x1a
    13a8:	33 8d       	ldd	r19, Z+27	; 0x1b
    13aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ae:	f9 01       	movw	r30, r18
    13b0:	09 95       	icall
    13b2:	00 00       	nop
    13b4:	61 96       	adiw	r28, 0x11	; 17
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <umqtt_handle_publish>:

static void umqtt_handle_publish(struct umqtt_connection *conn,
		uint8_t *data, int len)
{
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	60 97       	sbiw	r28, 0x10	; 16
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	8b 87       	std	Y+11, r24	; 0x0b
    13e0:	9c 87       	std	Y+12, r25	; 0x0c
    13e2:	6d 87       	std	Y+13, r22	; 0x0d
    13e4:	7e 87       	std	Y+14, r23	; 0x0e
    13e6:	4f 87       	std	Y+15, r20	; 0x0f
    13e8:	58 8b       	std	Y+16, r21	; 0x10
	topic[sizeof(topic) - 1] = 0;
	memcpy(payload, data + 2 + toplen, sizeof(payload));
	payload[sizeof(payload) - 1] = 0;

	conn->message_callback(conn, topic, payload, sizeof(payload));
}
    13ea:	cd b6       	in	r12, 0x3d	; 61
    13ec:	de b6       	in	r13, 0x3e	; 62
		conn->new_packet_callback(conn);
}

static void umqtt_handle_publish(struct umqtt_connection *conn,
		uint8_t *data, int len)
{
    13ee:	8d b7       	in	r24, 0x3d	; 61
    13f0:	9e b7       	in	r25, 0x3e	; 62
    13f2:	5c 01       	movw	r10, r24
	uint16_t toplen = (data[0] << 8) | data[1];
    13f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f8:	dc 01       	movw	r26, r24
    13fa:	8c 91       	ld	r24, X
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	38 2f       	mov	r19, r24
    1402:	22 27       	eor	r18, r18
    1404:	8d 85       	ldd	r24, Y+13	; 0x0d
    1406:	9e 85       	ldd	r25, Y+14	; 0x0e
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	82 2b       	or	r24, r18
    1414:	93 2b       	or	r25, r19
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	9a 83       	std	Y+2, r25	; 0x02
	char topic[toplen + 1];
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	7c 01       	movw	r14, r24
    1420:	ff ef       	ldi	r31, 0xFF	; 255
    1422:	ef 1a       	sub	r14, r31
    1424:	ff 0a       	sbc	r15, r31
    1426:	c7 01       	movw	r24, r14
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	4d b7       	in	r20, 0x3d	; 61
    1430:	5e b7       	in	r21, 0x3e	; 62
    1432:	4e 19       	sub	r20, r14
    1434:	5f 09       	sbc	r21, r15
    1436:	4d bf       	out	0x3d, r20	; 61
    1438:	5e bf       	out	0x3e, r21	; 62
    143a:	8d b7       	in	r24, 0x3d	; 61
    143c:	9e b7       	in	r25, 0x3e	; 62
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	9e 83       	std	Y+6, r25	; 0x06
	uint8_t payload[len - 2 - toplen + 1];
    1444:	2f 85       	ldd	r18, Y+15	; 0x0f
    1446:	38 89       	ldd	r19, Y+16	; 0x10
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	d9 01       	movw	r26, r18
    144e:	a8 1b       	sub	r26, r24
    1450:	b9 0b       	sbc	r27, r25
    1452:	cd 01       	movw	r24, r26
    1454:	8c 01       	movw	r16, r24
    1456:	01 50       	subi	r16, 0x01	; 1
    1458:	11 09       	sbc	r17, r1
    145a:	c8 01       	movw	r24, r16
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	8f 83       	std	Y+7, r24	; 0x07
    1460:	98 87       	std	Y+8, r25	; 0x08
    1462:	ed b7       	in	r30, 0x3d	; 61
    1464:	fe b7       	in	r31, 0x3e	; 62
    1466:	e0 1b       	sub	r30, r16
    1468:	f1 0b       	sbc	r31, r17
    146a:	ed bf       	out	0x3d, r30	; 61
    146c:	fe bf       	out	0x3e, r31	; 62
    146e:	8d b7       	in	r24, 0x3d	; 61
    1470:	9e b7       	in	r25, 0x3e	; 62
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	89 87       	std	Y+9, r24	; 0x09
    1476:	9a 87       	std	Y+10, r25	; 0x0a

	memcpy(topic, data + 2, sizeof(topic));
    1478:	8d 85       	ldd	r24, Y+13	; 0x0d
    147a:	9e 85       	ldd	r25, Y+14	; 0x0e
    147c:	9c 01       	movw	r18, r24
    147e:	2e 5f       	subi	r18, 0xFE	; 254
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	a7 01       	movw	r20, r14
    1488:	b9 01       	movw	r22, r18
    148a:	0e 94 8b 42 	call	0x8516	; 0x8516 <memcpy>
	topic[sizeof(topic) - 1] = 0;
    148e:	c7 01       	movw	r24, r14
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	2d 81       	ldd	r18, Y+5	; 0x05
    1494:	3e 81       	ldd	r19, Y+6	; 0x06
    1496:	82 0f       	add	r24, r18
    1498:	93 1f       	adc	r25, r19
    149a:	dc 01       	movw	r26, r24
    149c:	1c 92       	st	X, r1
	memcpy(payload, data + 2 + toplen, sizeof(payload));
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	02 96       	adiw	r24, 0x02	; 2
    14a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14a8:	28 0f       	add	r18, r24
    14aa:	39 1f       	adc	r19, r25
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	a8 01       	movw	r20, r16
    14b2:	b9 01       	movw	r22, r18
    14b4:	0e 94 8b 42 	call	0x8516	; 0x8516 <memcpy>
	payload[sizeof(payload) - 1] = 0;
    14b8:	c8 01       	movw	r24, r16
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	29 85       	ldd	r18, Y+9	; 0x09
    14be:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	fc 01       	movw	r30, r24
    14c6:	10 82       	st	Z, r1

	conn->message_callback(conn, topic, payload, sizeof(payload));
    14c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    14cc:	dc 01       	movw	r26, r24
    14ce:	58 96       	adiw	r26, 0x18	; 24
    14d0:	ed 91       	ld	r30, X+
    14d2:	fc 91       	ld	r31, X
    14d4:	59 97       	sbiw	r26, 0x19	; 25
    14d6:	98 01       	movw	r18, r16
    14d8:	49 85       	ldd	r20, Y+9	; 0x09
    14da:	5a 85       	ldd	r21, Y+10	; 0x0a
    14dc:	6d 81       	ldd	r22, Y+5	; 0x05
    14de:	7e 81       	ldd	r23, Y+6	; 0x06
    14e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e4:	09 95       	icall
    14e6:	ad be       	out	0x3d, r10	; 61
    14e8:	be be       	out	0x3e, r11	; 62
}
    14ea:	00 00       	nop
    14ec:	cd be       	out	0x3d, r12	; 61
    14ee:	de be       	out	0x3e, r13	; 62
    14f0:	60 96       	adiw	r28, 0x10	; 16
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	08 95       	ret

0000150c <umqtt_packet_arrived>:

static void umqtt_packet_arrived(struct umqtt_connection *conn,
		uint8_t header, int len)
{
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	29 97       	sbiw	r28, 0x09	; 9
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	6f 83       	std	Y+7, r22	; 0x07
    1528:	48 87       	std	Y+8, r20	; 0x08
    152a:	59 87       	std	Y+9, r21	; 0x09
	case UMQTT_PUBLISH:
		umqtt_handle_publish(conn, data, len);
		break;

	}
}
    152c:	0d b7       	in	r16, 0x3d	; 61
    152e:	1e b7       	in	r17, 0x3e	; 62
	conn->message_callback(conn, topic, payload, sizeof(payload));
}

static void umqtt_packet_arrived(struct umqtt_connection *conn,
		uint8_t header, int len)
{
    1530:	8d b7       	in	r24, 0x3d	; 61
    1532:	9e b7       	in	r25, 0x3e	; 62
    1534:	7c 01       	movw	r14, r24
	uint8_t data[len];
    1536:	88 85       	ldd	r24, Y+8	; 0x08
    1538:	99 85       	ldd	r25, Y+9	; 0x09
    153a:	9c 01       	movw	r18, r24
    153c:	21 50       	subi	r18, 0x01	; 1
    153e:	31 09       	sbc	r19, r1
    1540:	29 83       	std	Y+1, r18	; 0x01
    1542:	3a 83       	std	Y+2, r19	; 0x02
    1544:	2d b7       	in	r18, 0x3d	; 61
    1546:	3e b7       	in	r19, 0x3e	; 62
    1548:	28 1b       	sub	r18, r24
    154a:	39 0b       	sbc	r19, r25
    154c:	2d bf       	out	0x3d, r18	; 61
    154e:	3e bf       	out	0x3e, r19	; 62
    1550:	8d b7       	in	r24, 0x3d	; 61
    1552:	9e b7       	in	r25, 0x3e	; 62
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	8b 83       	std	Y+3, r24	; 0x03
    1558:	9c 83       	std	Y+4, r25	; 0x04

	umqtt_circ_pop(&conn->rxbuff, data, len);
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	08 96       	adiw	r24, 0x08	; 8
    1564:	48 85       	ldd	r20, Y+8	; 0x08
    1566:	59 85       	ldd	r21, Y+9	; 0x09
    1568:	b9 01       	movw	r22, r18
    156a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <umqtt_circ_pop>

	switch (umqtt_header_type(header)) {
    156e:	8f 81       	ldd	r24, Y+7	; 0x07
    1570:	82 95       	swap	r24
    1572:	8f 70       	andi	r24, 0x0F	; 15
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	91 05       	cpc	r25, r1
    157c:	09 f4       	brne	.+2      	; 0x1580 <umqtt_packet_arrived+0x74>
    157e:	5c c0       	rjmp	.+184    	; 0x1638 <umqtt_packet_arrived+0x12c>
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	91 05       	cpc	r25, r1
    1584:	1c f4       	brge	.+6      	; 0x158c <umqtt_packet_arrived+0x80>
    1586:	02 97       	sbiw	r24, 0x02	; 2
    1588:	41 f0       	breq	.+16     	; 0x159a <umqtt_packet_arrived+0x8e>
    158a:	61 c0       	rjmp	.+194    	; 0x164e <umqtt_packet_arrived+0x142>
    158c:	89 30       	cpi	r24, 0x09	; 9
    158e:	91 05       	cpc	r25, r1
    1590:	b9 f1       	breq	.+110    	; 0x1600 <umqtt_packet_arrived+0xf4>
    1592:	0d 97       	sbiw	r24, 0x0d	; 13
    1594:	09 f4       	brne	.+2      	; 0x1598 <umqtt_packet_arrived+0x8c>
    1596:	42 c0       	rjmp	.+132    	; 0x161c <umqtt_packet_arrived+0x110>
    1598:	5a c0       	rjmp	.+180    	; 0x164e <umqtt_packet_arrived+0x142>
	case UMQTT_CONNACK:
		if (data[1] == 0x00) {
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	fc 01       	movw	r30, r24
    15a0:	81 81       	ldd	r24, Z+1	; 0x01
    15a2:	88 23       	and	r24, r24
    15a4:	b9 f4       	brne	.+46     	; 0x15d4 <umqtt_packet_arrived+0xc8>
			conn->state = UMQTT_STATE_CONNECTED;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	22 e0       	ldi	r18, 0x02	; 2
    15ac:	fc 01       	movw	r30, r24
    15ae:	25 ab       	std	Z+53, r18	; 0x35
			if (conn->connected_callback)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	fc 01       	movw	r30, r24
    15b6:	84 89       	ldd	r24, Z+20	; 0x14
    15b8:	95 89       	ldd	r25, Z+21	; 0x15
    15ba:	89 2b       	or	r24, r25
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <umqtt_packet_arrived+0xb4>
    15be:	46 c0       	rjmp	.+140    	; 0x164c <umqtt_packet_arrived+0x140>
				conn->connected_callback(conn);
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	fc 01       	movw	r30, r24
    15c6:	24 89       	ldd	r18, Z+20	; 0x14
    15c8:	35 89       	ldd	r19, Z+21	; 0x15
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	f9 01       	movw	r30, r18
    15d0:	09 95       	icall
		else {
			conn->state = UMQTT_STATE_FAILED;
			if (conn->failed_connect_callback)
				conn->failed_connect_callback(conn);
		}
		break;
    15d2:	3c c0       	rjmp	.+120    	; 0x164c <umqtt_packet_arrived+0x140>
			conn->state = UMQTT_STATE_CONNECTED;
			if (conn->connected_callback)
				conn->connected_callback(conn);
		}
		else {
			conn->state = UMQTT_STATE_FAILED;
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	23 e0       	ldi	r18, 0x03	; 3
    15da:	fc 01       	movw	r30, r24
    15dc:	25 ab       	std	Z+53, r18	; 0x35
			if (conn->failed_connect_callback)
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	fc 01       	movw	r30, r24
    15e4:	86 89       	ldd	r24, Z+22	; 0x16
    15e6:	97 89       	ldd	r25, Z+23	; 0x17
    15e8:	89 2b       	or	r24, r25
    15ea:	81 f1       	breq	.+96     	; 0x164c <umqtt_packet_arrived+0x140>
				conn->failed_connect_callback(conn);
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	fc 01       	movw	r30, r24
    15f2:	26 89       	ldd	r18, Z+22	; 0x16
    15f4:	37 89       	ldd	r19, Z+23	; 0x17
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	f9 01       	movw	r30, r18
    15fc:	09 95       	icall
		}
		break;
    15fe:	26 c0       	rjmp	.+76     	; 0x164c <umqtt_packet_arrived+0x140>
	case UMQTT_SUBACK:
		conn->nack_subscribe--;
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	fc 01       	movw	r30, r24
    1606:	80 a5       	ldd	r24, Z+40	; 0x28
    1608:	91 a5       	ldd	r25, Z+41	; 0x29
    160a:	9c 01       	movw	r18, r24
    160c:	21 50       	subi	r18, 0x01	; 1
    160e:	31 09       	sbc	r19, r1
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	fc 01       	movw	r30, r24
    1616:	20 a7       	std	Z+40, r18	; 0x28
    1618:	31 a7       	std	Z+41, r19	; 0x29
		break;
    161a:	19 c0       	rjmp	.+50     	; 0x164e <umqtt_packet_arrived+0x142>
	case UMQTT_PINGRESP:
		conn->nack_ping--;
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	fc 01       	movw	r30, r24
    1622:	82 a5       	ldd	r24, Z+42	; 0x2a
    1624:	93 a5       	ldd	r25, Z+43	; 0x2b
    1626:	9c 01       	movw	r18, r24
    1628:	21 50       	subi	r18, 0x01	; 1
    162a:	31 09       	sbc	r19, r1
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	fc 01       	movw	r30, r24
    1632:	22 a7       	std	Z+42, r18	; 0x2a
    1634:	33 a7       	std	Z+43, r19	; 0x2b
		break;
    1636:	0b c0       	rjmp	.+22     	; 0x164e <umqtt_packet_arrived+0x142>
	case UMQTT_PUBLISH:
		umqtt_handle_publish(conn, data, len);
    1638:	2b 81       	ldd	r18, Y+3	; 0x03
    163a:	3c 81       	ldd	r19, Y+4	; 0x04
    163c:	48 85       	ldd	r20, Y+8	; 0x08
    163e:	59 85       	ldd	r21, Y+9	; 0x09
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	b9 01       	movw	r22, r18
    1646:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <umqtt_handle_publish>
		break;
    164a:	01 c0       	rjmp	.+2      	; 0x164e <umqtt_packet_arrived+0x142>
		else {
			conn->state = UMQTT_STATE_FAILED;
			if (conn->failed_connect_callback)
				conn->failed_connect_callback(conn);
		}
		break;
    164c:	00 00       	nop
    164e:	ed be       	out	0x3d, r14	; 61
    1650:	fe be       	out	0x3e, r15	; 62
	case UMQTT_PUBLISH:
		umqtt_handle_publish(conn, data, len);
		break;

	}
}
    1652:	00 00       	nop
    1654:	0d bf       	out	0x3d, r16	; 61
    1656:	1e bf       	out	0x3e, r17	; 62
    1658:	29 96       	adiw	r28, 0x09	; 9
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	08 95       	ret

0000166c <umqtt_process>:

void umqtt_process(struct umqtt_connection *conn)
{
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	29 97       	sbiw	r28, 0x09	; 9
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	88 87       	std	Y+8, r24	; 0x08
    167c:	99 87       	std	Y+9, r25	; 0x09
	uint8_t buf[5];
	unsigned int i = 2;
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	9a 83       	std	Y+2, r25	; 0x02

	while (conn->rxbuff.datalen >= 2) { /* We do have the fixed header */
    1686:	40 c0       	rjmp	.+128    	; 0x1708 <umqtt_process+0x9c>
		umqtt_circ_pop(&conn->rxbuff, buf, 2);
    1688:	88 85       	ldd	r24, Y+8	; 0x08
    168a:	99 85       	ldd	r25, Y+9	; 0x09
    168c:	08 96       	adiw	r24, 0x08	; 8
    168e:	9e 01       	movw	r18, r28
    1690:	2d 5f       	subi	r18, 0xFD	; 253
    1692:	3f 4f       	sbci	r19, 0xFF	; 255
    1694:	42 e0       	ldi	r20, 0x02	; 2
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	b9 01       	movw	r22, r18
    169a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <umqtt_circ_pop>
		for (i = 2; buf[i - 1] & 0x80 && i < sizeof(buf); i++)
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <umqtt_process+0x64>
			umqtt_circ_pop(&conn->rxbuff, &buf[i], 1);
    16a8:	9e 01       	movw	r18, r28
    16aa:	2d 5f       	subi	r18, 0xFD	; 253
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	28 0f       	add	r18, r24
    16b4:	39 1f       	adc	r19, r25
    16b6:	88 85       	ldd	r24, Y+8	; 0x08
    16b8:	99 85       	ldd	r25, Y+9	; 0x09
    16ba:	08 96       	adiw	r24, 0x08	; 8
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	b9 01       	movw	r22, r18
    16c2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <umqtt_circ_pop>
	uint8_t buf[5];
	unsigned int i = 2;

	while (conn->rxbuff.datalen >= 2) { /* We do have the fixed header */
		umqtt_circ_pop(&conn->rxbuff, buf, 2);
		for (i = 2; buf[i - 1] & 0x80 && i < sizeof(buf); i++)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9e 01       	movw	r18, r28
    16d8:	2d 5f       	subi	r18, 0xFD	; 253
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	82 0f       	add	r24, r18
    16de:	93 1f       	adc	r25, r19
    16e0:	fc 01       	movw	r30, r24
    16e2:	80 81       	ld	r24, Z
    16e4:	88 23       	and	r24, r24
    16e6:	24 f4       	brge	.+8      	; 0x16f0 <umqtt_process+0x84>
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	05 97       	sbiw	r24, 0x05	; 5
    16ee:	e0 f2       	brcs	.-72     	; 0x16a8 <umqtt_process+0x3c>
			umqtt_circ_pop(&conn->rxbuff, &buf[i], 1);

		umqtt_packet_arrived(conn, buf[0],
    16f0:	ce 01       	movw	r24, r28
    16f2:	03 96       	adiw	r24, 0x03	; 3
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	0e 94 d0 05 	call	0xba0	; 0xba0 <umqtt_decode_length>
    16fa:	9c 01       	movw	r18, r24
    16fc:	6b 81       	ldd	r22, Y+3	; 0x03
    16fe:	88 85       	ldd	r24, Y+8	; 0x08
    1700:	99 85       	ldd	r25, Y+9	; 0x09
    1702:	a9 01       	movw	r20, r18
    1704:	0e 94 86 0a 	call	0x150c	; 0x150c <umqtt_packet_arrived>
void umqtt_process(struct umqtt_connection *conn)
{
	uint8_t buf[5];
	unsigned int i = 2;

	while (conn->rxbuff.datalen >= 2) { /* We do have the fixed header */
    1708:	88 85       	ldd	r24, Y+8	; 0x08
    170a:	99 85       	ldd	r25, Y+9	; 0x09
    170c:	fc 01       	movw	r30, r24
    170e:	86 85       	ldd	r24, Z+14	; 0x0e
    1710:	97 85       	ldd	r25, Z+15	; 0x0f
    1712:	02 97       	sbiw	r24, 0x02	; 2
    1714:	0c f0       	brlt	.+2      	; 0x1718 <umqtt_process+0xac>
    1716:	b8 cf       	rjmp	.-144    	; 0x1688 <umqtt_process+0x1c>
			umqtt_circ_pop(&conn->rxbuff, &buf[i], 1);

		umqtt_packet_arrived(conn, buf[0],
				umqtt_decode_length(&buf[1]));
	}
}
    1718:	00 00       	nop
    171a:	29 96       	adiw	r28, 0x09	; 9
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <usart_putchar_printf>:
 int usart_putchar_printf(char var, FILE *stream);
 
 static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int usart_putchar_printf(char var, FILE *stream){
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	00 d0       	rcall	.+0      	; 0x172c <usart_putchar_printf+0x6>
    172c:	1f 92       	push	r1
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	6a 83       	std	Y+2, r22	; 0x02
    1736:	7b 83       	std	Y+3, r23	; 0x03
	
	USART_1_write(var);
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <USART_1_write>
}
    1742:	00 00       	nop
    1744:	23 96       	adiw	r28, 0x03	; 3
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <publishChar>:




absolutetime_t publishChar(void *payload)
{
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	00 d0       	rcall	.+0      	; 0x1756 <publishChar+0x6>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	9a 83       	std	Y+2, r25	; 0x02



	return PUBLISH_INTERVAL;
    175e:	88 ee       	ldi	r24, 0xE8	; 232
    1760:	93 e0       	ldi	r25, 0x03	; 3
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
}
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <main>:



int main(void){
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	
	
	// Redirect stream to Tera Term
	stdout = &mystdout;
    177c:	86 e4       	ldi	r24, 0x46	; 70
    177e:	98 e2       	ldi	r25, 0x28	; 40
    1780:	80 93 75 2a 	sts	0x2A75, r24	; 0x802a75 <__iob+0x2>
    1784:	90 93 76 2a 	sts	0x2A76, r25	; 0x802a76 <__iob+0x3>
// 	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
    1788:	0e 94 0d 01 	call	0x21a	; 0x21a <atmel_start_init>
 	motor_dir_port_init();
    178c:	0e 94 12 04 	call	0x824	; 0x824 <motor_dir_port_init>
 	LEFT_WHEEL_TCB3_PWM_init();
    1790:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LEFT_WHEEL_TCB3_PWM_init>
	RIGHT_WHEEL_TCB1_PWM_init();
    1794:	0e 94 a1 04 	call	0x942	; 0x942 <RIGHT_WHEEL_TCB1_PWM_init>
	ENABLE_INTERRUPTS();
    1798:	78 94       	sei
		 
	CLOUD_setSendFunction(publishChar);
    179a:	88 ea       	ldi	r24, 0xA8	; 168
    179c:	9b e0       	ldi	r25, 0x0B	; 11
    179e:	0e 94 22 02 	call	0x444	; 0x444 <CLOUD_setSendFunction>
	
	CLOUD_startApp();
    17a2:	0e 94 17 01 	call	0x22e	; 0x22e <CLOUD_startApp>

	
	
while (1) {
	
	CLOUD_runTask();
    17a6:	0e 94 35 02 	call	0x46a	; 0x46a <CLOUD_runTask>
		
}
    17aa:	fd cf       	rjmp	.-6      	; 0x17a6 <main+0x32>

000017ac <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
    17b4:	80 e0       	ldi	r24, 0x00	; 0
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <ccp_write_io+0x6>
    17c2:	1f 92       	push	r1
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	4b 81       	ldd	r20, Y+3	; 0x03
    17d4:	68 ed       	ldi	r22, 0xD8	; 216
    17d6:	0e 94 45 11 	call	0x228a	; 0x228a <protected_write_io>
}
    17da:	00 00       	nop
    17dc:	23 96       	adiw	r28, 0x03	; 3
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	81 e6       	ldi	r24, 0x61	; 97
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
    180a:	80 e0       	ldi	r24, 0x00	; 0
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <PORTA_set_pin_pull_mode>:
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
}
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	00 d0       	rcall	.+0      	; 0x1818 <PORTA_set_pin_pull_mode+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <PORTA_set_pin_pull_mode+0x8>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	8b 83       	std	Y+3, r24	; 0x03
    1820:	6c 83       	std	Y+4, r22	; 0x04
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	80 5f       	subi	r24, 0xF0	; 240
    182a:	9b 4f       	sbci	r25, 0xFB	; 251
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	59 f4       	brne	.+22     	; 0x184c <PORTA_set_pin_pull_mode+0x3a>
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	fc 01       	movw	r30, r24
    183c:	80 81       	ld	r24, Z
    183e:	28 2f       	mov	r18, r24
    1840:	28 60       	ori	r18, 0x08	; 8
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	fc 01       	movw	r30, r24
    1848:	20 83       	st	Z, r18
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <PORTA_set_pin_pull_mode+0x54>
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	88 23       	and	r24, r24
    1850:	51 f4       	brne	.+20     	; 0x1866 <PORTA_set_pin_pull_mode+0x54>
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	fc 01       	movw	r30, r24
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	27 7f       	andi	r18, 0xF7	; 247
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	fc 01       	movw	r30, r24
    1864:	20 83       	st	Z, r18
    1866:	00 00       	nop
    1868:	24 96       	adiw	r28, 0x04	; 4
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <PORTA_set_pin_dir>:
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	00 d0       	rcall	.+0      	; 0x187a <PORTA_set_pin_dir+0x6>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	6a 83       	std	Y+2, r22	; 0x02
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	91 05       	cpc	r25, r1
    188c:	e1 f0       	breq	.+56     	; 0x18c6 <PORTA_set_pin_dir+0x52>
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	91 05       	cpc	r25, r1
    1892:	71 f1       	breq	.+92     	; 0x18f0 <PORTA_set_pin_dir+0x7c>
    1894:	89 2b       	or	r24, r25
    1896:	09 f0       	breq	.+2      	; 0x189a <PORTA_set_pin_dir+0x26>
    1898:	3b c0       	rjmp	.+118    	; 0x1910 <PORTA_set_pin_dir+0x9c>
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	fc 01       	movw	r30, r24
    18a4:	80 81       	ld	r24, Z
    18a6:	68 2f       	mov	r22, r24
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	48 2f       	mov	r20, r24
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <PORTA_set_pin_dir+0x44>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	4a 95       	dec	r20
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <PORTA_set_pin_dir+0x40>
    18bc:	80 95       	com	r24
    18be:	86 23       	and	r24, r22
    18c0:	f9 01       	movw	r30, r18
    18c2:	80 83       	st	Z, r24
    18c4:	25 c0       	rjmp	.+74     	; 0x1910 <PORTA_set_pin_dir+0x9c>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	68 2f       	mov	r22, r24
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	48 2f       	mov	r20, r24
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <PORTA_set_pin_dir+0x70>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	4a 95       	dec	r20
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <PORTA_set_pin_dir+0x6c>
    18e8:	86 2b       	or	r24, r22
    18ea:	f9 01       	movw	r30, r18
    18ec:	80 83       	st	Z, r24
    18ee:	10 c0       	rjmp	.+32     	; 0x1910 <PORTA_set_pin_dir+0x9c>
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	80 5f       	subi	r24, 0xF0	; 240
    18f8:	9b 4f       	sbci	r25, 0xFB	; 251
    18fa:	29 81       	ldd	r18, Y+1	; 0x01
    18fc:	22 2f       	mov	r18, r18
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	20 5f       	subi	r18, 0xF0	; 240
    1902:	3b 4f       	sbci	r19, 0xFB	; 251
    1904:	f9 01       	movw	r30, r18
    1906:	20 81       	ld	r18, Z
    1908:	28 60       	ori	r18, 0x08	; 8
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
    190e:	00 00       	nop
    1910:	00 00       	nop
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret

0000191c <PORTA_set_pin_level>:
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	00 d0       	rcall	.+0      	; 0x1922 <PORTA_set_pin_level+0x6>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	6a 83       	std	Y+2, r22	; 0x02
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	88 23       	and	r24, r24
    192e:	a9 f0       	breq	.+42     	; 0x195a <PORTA_set_pin_level+0x3e>
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	fc 01       	movw	r30, r24
    193a:	81 81       	ldd	r24, Z+1	; 0x01
    193c:	68 2f       	mov	r22, r24
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	48 2f       	mov	r20, r24
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 c0       	rjmp	.+4      	; 0x194e <PORTA_set_pin_level+0x32>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	4a 95       	dec	r20
    1950:	e2 f7       	brpl	.-8      	; 0x194a <PORTA_set_pin_level+0x2e>
    1952:	86 2b       	or	r24, r22
    1954:	f9 01       	movw	r30, r18
    1956:	81 83       	std	Z+1, r24	; 0x01
    1958:	15 c0       	rjmp	.+42     	; 0x1984 <PORTA_set_pin_level+0x68>
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	fc 01       	movw	r30, r24
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	68 2f       	mov	r22, r24
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	48 2f       	mov	r20, r24
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <PORTA_set_pin_level+0x5c>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	4a 95       	dec	r20
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <PORTA_set_pin_level+0x58>
    197c:	80 95       	com	r24
    197e:	86 23       	and	r24, r22
    1980:	f9 01       	movw	r30, r18
    1982:	81 83       	std	Z+1, r24	; 0x01
    1984:	00 00       	nop
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <PORTB_set_pin_pull_mode>:
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	00 d0       	rcall	.+0      	; 0x1996 <PORTB_set_pin_pull_mode+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <PORTB_set_pin_pull_mode+0x8>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	8b 83       	std	Y+3, r24	; 0x03
    199e:	6c 83       	std	Y+4, r22	; 0x04
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	80 5d       	subi	r24, 0xD0	; 208
    19a8:	9b 4f       	sbci	r25, 0xFB	; 251
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	59 f4       	brne	.+22     	; 0x19ca <PORTB_set_pin_pull_mode+0x3a>
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	28 60       	ori	r18, 0x08	; 8
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
    19c8:	0d c0       	rjmp	.+26     	; 0x19e4 <PORTB_set_pin_pull_mode+0x54>
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	88 23       	and	r24, r24
    19ce:	51 f4       	brne	.+20     	; 0x19e4 <PORTB_set_pin_pull_mode+0x54>
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	fc 01       	movw	r30, r24
    19d6:	80 81       	ld	r24, Z
    19d8:	28 2f       	mov	r18, r24
    19da:	27 7f       	andi	r18, 0xF7	; 247
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	fc 01       	movw	r30, r24
    19e2:	20 83       	st	Z, r18
    19e4:	00 00       	nop
    19e6:	24 96       	adiw	r28, 0x04	; 4
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <PORTB_set_pin_dir>:
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <PORTB_set_pin_dir+0x6>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	6a 83       	std	Y+2, r22	; 0x02
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	e1 f0       	breq	.+56     	; 0x1a44 <PORTB_set_pin_dir+0x52>
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	91 05       	cpc	r25, r1
    1a10:	71 f1       	breq	.+92     	; 0x1a6e <PORTB_set_pin_dir+0x7c>
    1a12:	89 2b       	or	r24, r25
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <PORTB_set_pin_dir+0x26>
    1a16:	3b c0       	rjmp	.+118    	; 0x1a8e <PORTB_set_pin_dir+0x9c>
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	24 e0       	ldi	r18, 0x04	; 4
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	f9 01       	movw	r30, r18
    1a22:	20 81       	ld	r18, Z
    1a24:	62 2f       	mov	r22, r18
    1a26:	29 81       	ldd	r18, Y+1	; 0x01
    1a28:	42 2f       	mov	r20, r18
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	21 e0       	ldi	r18, 0x01	; 1
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <PORTB_set_pin_dir+0x44>
    1a32:	22 0f       	add	r18, r18
    1a34:	33 1f       	adc	r19, r19
    1a36:	4a 95       	dec	r20
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <PORTB_set_pin_dir+0x40>
    1a3a:	20 95       	com	r18
    1a3c:	26 23       	and	r18, r22
    1a3e:	fc 01       	movw	r30, r24
    1a40:	20 83       	st	Z, r18
    1a42:	25 c0       	rjmp	.+74     	; 0x1a8e <PORTB_set_pin_dir+0x9c>
    1a44:	84 e0       	ldi	r24, 0x04	; 4
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	24 e0       	ldi	r18, 0x04	; 4
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	20 81       	ld	r18, Z
    1a50:	62 2f       	mov	r22, r18
    1a52:	29 81       	ldd	r18, Y+1	; 0x01
    1a54:	42 2f       	mov	r20, r18
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	21 e0       	ldi	r18, 0x01	; 1
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <PORTB_set_pin_dir+0x70>
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	4a 95       	dec	r20
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <PORTB_set_pin_dir+0x6c>
    1a66:	26 2b       	or	r18, r22
    1a68:	fc 01       	movw	r30, r24
    1a6a:	20 83       	st	Z, r18
    1a6c:	10 c0       	rjmp	.+32     	; 0x1a8e <PORTB_set_pin_dir+0x9c>
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	80 5d       	subi	r24, 0xD0	; 208
    1a76:	9b 4f       	sbci	r25, 0xFB	; 251
    1a78:	29 81       	ldd	r18, Y+1	; 0x01
    1a7a:	22 2f       	mov	r18, r18
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	20 5d       	subi	r18, 0xD0	; 208
    1a80:	3b 4f       	sbci	r19, 0xFB	; 251
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	28 60       	ori	r18, 0x08	; 8
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
    1a8c:	00 00       	nop
    1a8e:	00 00       	nop
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	08 95       	ret

00001a9a <PORTB_set_pin_level>:
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <PORTB_set_pin_level+0x6>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	6a 83       	std	Y+2, r22	; 0x02
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	88 23       	and	r24, r24
    1aac:	a9 f0       	breq	.+42     	; 0x1ad8 <PORTB_set_pin_level+0x3e>
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	24 e0       	ldi	r18, 0x04	; 4
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	21 81       	ldd	r18, Z+1	; 0x01
    1aba:	62 2f       	mov	r22, r18
    1abc:	29 81       	ldd	r18, Y+1	; 0x01
    1abe:	42 2f       	mov	r20, r18
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <PORTB_set_pin_level+0x32>
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	4a 95       	dec	r20
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <PORTB_set_pin_level+0x2e>
    1ad0:	26 2b       	or	r18, r22
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	21 83       	std	Z+1, r18	; 0x01
    1ad6:	15 c0       	rjmp	.+42     	; 0x1b02 <PORTB_set_pin_level+0x68>
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	24 e0       	ldi	r18, 0x04	; 4
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	21 81       	ldd	r18, Z+1	; 0x01
    1ae4:	62 2f       	mov	r22, r18
    1ae6:	29 81       	ldd	r18, Y+1	; 0x01
    1ae8:	42 2f       	mov	r20, r18
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	21 e0       	ldi	r18, 0x01	; 1
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <PORTB_set_pin_level+0x5c>
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	4a 95       	dec	r20
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <PORTB_set_pin_level+0x58>
    1afa:	20 95       	com	r18
    1afc:	26 23       	and	r18, r22
    1afe:	fc 01       	movw	r30, r24
    1b00:	21 83       	std	Z+1, r18	; 0x01
    1b02:	00 00       	nop
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <PORTC_set_pin_pull_mode>:
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <PORTC_set_pin_pull_mode+0x6>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <PORTC_set_pin_pull_mode+0x8>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	6c 83       	std	Y+4, r22	; 0x04
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	80 5b       	subi	r24, 0xB0	; 176
    1b26:	9b 4f       	sbci	r25, 0xFB	; 251
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	59 f4       	brne	.+22     	; 0x1b48 <PORTC_set_pin_pull_mode+0x3a>
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	28 60       	ori	r18, 0x08	; 8
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	fc 01       	movw	r30, r24
    1b44:	20 83       	st	Z, r18
    1b46:	0d c0       	rjmp	.+26     	; 0x1b62 <PORTC_set_pin_pull_mode+0x54>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	88 23       	and	r24, r24
    1b4c:	51 f4       	brne	.+20     	; 0x1b62 <PORTC_set_pin_pull_mode+0x54>
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	fc 01       	movw	r30, r24
    1b54:	80 81       	ld	r24, Z
    1b56:	28 2f       	mov	r18, r24
    1b58:	27 7f       	andi	r18, 0xF7	; 247
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	fc 01       	movw	r30, r24
    1b60:	20 83       	st	Z, r18
    1b62:	00 00       	nop
    1b64:	24 96       	adiw	r28, 0x04	; 4
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	08 95       	ret

00001b70 <PORTC_pin_set_inverted>:
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <PORTC_pin_set_inverted+0x6>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <PORTC_pin_set_inverted+0x8>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	6c 83       	std	Y+4, r22	; 0x04
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	80 5b       	subi	r24, 0xB0	; 176
    1b88:	9b 4f       	sbci	r25, 0xFB	; 251
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	88 23       	and	r24, r24
    1b92:	59 f0       	breq	.+22     	; 0x1baa <PORTC_pin_set_inverted+0x3a>
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	20 68       	ori	r18, 0x80	; 128
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <PORTC_pin_set_inverted+0x4e>
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	fc 01       	movw	r30, r24
    1bb0:	80 81       	ld	r24, Z
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	2f 77       	andi	r18, 0x7F	; 127
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	fc 01       	movw	r30, r24
    1bbc:	20 83       	st	Z, r18
    1bbe:	00 00       	nop
    1bc0:	24 96       	adiw	r28, 0x04	; 4
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	08 95       	ret

00001bcc <PORTC_pin_set_isc>:
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <PORTC_pin_set_isc+0x6>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <PORTC_pin_set_isc+0x8>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	6c 83       	std	Y+4, r22	; 0x04
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	80 5b       	subi	r24, 0xB0	; 176
    1be4:	9b 4f       	sbci	r25, 0xFB	; 251
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	98 2f       	mov	r25, r24
    1bf4:	98 7f       	andi	r25, 0xF8	; 248
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	89 2b       	or	r24, r25
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 83       	st	Z, r18
    1c04:	00 00       	nop
    1c06:	24 96       	adiw	r28, 0x04	; 4
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <PORTC_set_pin_dir>:
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <PORTC_set_pin_dir+0x6>
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6a 83       	std	Y+2, r22	; 0x02
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	e1 f0       	breq	.+56     	; 0x1c64 <PORTC_set_pin_dir+0x52>
    1c2c:	82 30       	cpi	r24, 0x02	; 2
    1c2e:	91 05       	cpc	r25, r1
    1c30:	71 f1       	breq	.+92     	; 0x1c8e <PORTC_set_pin_dir+0x7c>
    1c32:	89 2b       	or	r24, r25
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <PORTC_set_pin_dir+0x26>
    1c36:	3b c0       	rjmp	.+118    	; 0x1cae <PORTC_set_pin_dir+0x9c>
    1c38:	88 e0       	ldi	r24, 0x08	; 8
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	28 e0       	ldi	r18, 0x08	; 8
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	f9 01       	movw	r30, r18
    1c42:	20 81       	ld	r18, Z
    1c44:	62 2f       	mov	r22, r18
    1c46:	29 81       	ldd	r18, Y+1	; 0x01
    1c48:	42 2f       	mov	r20, r18
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	21 e0       	ldi	r18, 0x01	; 1
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <PORTC_set_pin_dir+0x44>
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	4a 95       	dec	r20
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <PORTC_set_pin_dir+0x40>
    1c5a:	20 95       	com	r18
    1c5c:	26 23       	and	r18, r22
    1c5e:	fc 01       	movw	r30, r24
    1c60:	20 83       	st	Z, r18
    1c62:	25 c0       	rjmp	.+74     	; 0x1cae <PORTC_set_pin_dir+0x9c>
    1c64:	88 e0       	ldi	r24, 0x08	; 8
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	28 e0       	ldi	r18, 0x08	; 8
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	20 81       	ld	r18, Z
    1c70:	62 2f       	mov	r22, r18
    1c72:	29 81       	ldd	r18, Y+1	; 0x01
    1c74:	42 2f       	mov	r20, r18
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	21 e0       	ldi	r18, 0x01	; 1
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <PORTC_set_pin_dir+0x70>
    1c7e:	22 0f       	add	r18, r18
    1c80:	33 1f       	adc	r19, r19
    1c82:	4a 95       	dec	r20
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <PORTC_set_pin_dir+0x6c>
    1c86:	26 2b       	or	r18, r22
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 83       	st	Z, r18
    1c8c:	10 c0       	rjmp	.+32     	; 0x1cae <PORTC_set_pin_dir+0x9c>
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	80 5b       	subi	r24, 0xB0	; 176
    1c96:	9b 4f       	sbci	r25, 0xFB	; 251
    1c98:	29 81       	ldd	r18, Y+1	; 0x01
    1c9a:	22 2f       	mov	r18, r18
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	20 5b       	subi	r18, 0xB0	; 176
    1ca0:	3b 4f       	sbci	r19, 0xFB	; 251
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	20 81       	ld	r18, Z
    1ca6:	28 60       	ori	r18, 0x08	; 8
    1ca8:	fc 01       	movw	r30, r24
    1caa:	20 83       	st	Z, r18
    1cac:	00 00       	nop
    1cae:	00 00       	nop
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <PORTC_set_pin_level>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <PORTC_set_pin_level+0x6>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	6a 83       	std	Y+2, r22	; 0x02
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	88 23       	and	r24, r24
    1ccc:	a9 f0       	breq	.+42     	; 0x1cf8 <PORTC_set_pin_level+0x3e>
    1cce:	88 e0       	ldi	r24, 0x08	; 8
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	28 e0       	ldi	r18, 0x08	; 8
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	21 81       	ldd	r18, Z+1	; 0x01
    1cda:	62 2f       	mov	r22, r18
    1cdc:	29 81       	ldd	r18, Y+1	; 0x01
    1cde:	42 2f       	mov	r20, r18
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	21 e0       	ldi	r18, 0x01	; 1
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <PORTC_set_pin_level+0x32>
    1ce8:	22 0f       	add	r18, r18
    1cea:	33 1f       	adc	r19, r19
    1cec:	4a 95       	dec	r20
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <PORTC_set_pin_level+0x2e>
    1cf0:	26 2b       	or	r18, r22
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	21 83       	std	Z+1, r18	; 0x01
    1cf6:	15 c0       	rjmp	.+42     	; 0x1d22 <PORTC_set_pin_level+0x68>
    1cf8:	88 e0       	ldi	r24, 0x08	; 8
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	28 e0       	ldi	r18, 0x08	; 8
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	f9 01       	movw	r30, r18
    1d02:	21 81       	ldd	r18, Z+1	; 0x01
    1d04:	62 2f       	mov	r22, r18
    1d06:	29 81       	ldd	r18, Y+1	; 0x01
    1d08:	42 2f       	mov	r20, r18
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	21 e0       	ldi	r18, 0x01	; 1
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <PORTC_set_pin_level+0x5c>
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	4a 95       	dec	r20
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <PORTC_set_pin_level+0x58>
    1d1a:	20 95       	com	r18
    1d1c:	26 23       	and	r18, r22
    1d1e:	fc 01       	movw	r30, r24
    1d20:	21 83       	std	Z+1, r18	; 0x01
    1d22:	00 00       	nop
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	1f 92       	push	r1
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	69 81       	ldd	r22, Y+1	; 0x01
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <PORTA_set_pin_dir>
    1d42:	00 00       	nop
    1d44:	0f 90       	pop	r0
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <CONF_WIFI_M2M_RESET_PIN_set_level>:
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	1f 92       	push	r1
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	69 81       	ldd	r22, Y+1	; 0x01
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	0e 94 8e 0c 	call	0x191c	; 0x191c <PORTA_set_pin_level>
    1d60:	00 00       	nop
    1d62:	0f 90       	pop	r0
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	08 95       	ret

00001d6a <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	1f 92       	push	r1
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	69 81       	ldd	r22, Y+1	; 0x01
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <PORTA_set_pin_dir>
    1d7e:	00 00       	nop
    1d80:	0f 90       	pop	r0
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <CONF_WIFI_M2M_WAKE_PIN_set_level>:
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	1f 92       	push	r1
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	69 81       	ldd	r22, Y+1	; 0x01
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	0e 94 8e 0c 	call	0x191c	; 0x191c <PORTA_set_pin_level>
    1d9c:	00 00       	nop
    1d9e:	0f 90       	pop	r0
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	08 95       	ret

00001da6 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	1f 92       	push	r1
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	69 81       	ldd	r22, Y+1	; 0x01
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <PORTA_set_pin_dir>
    1dba:	00 00       	nop
    1dbc:	0f 90       	pop	r0
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	1f 92       	push	r1
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	69 81       	ldd	r22, Y+1	; 0x01
    1dd2:	84 e0       	ldi	r24, 0x04	; 4
    1dd4:	0e 94 8e 0c 	call	0x191c	; 0x191c <PORTA_set_pin_level>
    1dd8:	00 00       	nop
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	08 95       	ret

00001de2 <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>:
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	1f 92       	push	r1
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	69 81       	ldd	r22, Y+1	; 0x01
    1df0:	85 e0       	ldi	r24, 0x05	; 5
    1df2:	0e 94 09 0c 	call	0x1812	; 0x1812 <PORTA_set_pin_pull_mode>
    1df6:	00 00       	nop
    1df8:	0f 90       	pop	r0
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	1f 92       	push	r1
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	69 81       	ldd	r22, Y+1	; 0x01
    1e0e:	85 e0       	ldi	r24, 0x05	; 5
    1e10:	0e 94 3a 0c 	call	0x1874	; 0x1874 <PORTA_set_pin_dir>
    1e14:	00 00       	nop
    1e16:	0f 90       	pop	r0
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	1f 92       	push	r1
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	69 81       	ldd	r22, Y+1	; 0x01
    1e2c:	86 e0       	ldi	r24, 0x06	; 6
    1e2e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <PORTA_set_pin_dir>
    1e32:	00 00       	nop
    1e34:	0f 90       	pop	r0
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	1f 92       	push	r1
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	69 81       	ldd	r22, Y+1	; 0x01
    1e4a:	86 e0       	ldi	r24, 0x06	; 6
    1e4c:	0e 94 8e 0c 	call	0x191c	; 0x191c <PORTA_set_pin_level>
    1e50:	00 00       	nop
    1e52:	0f 90       	pop	r0
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	1f 92       	push	r1
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	69 81       	ldd	r22, Y+1	; 0x01
    1e68:	87 e0       	ldi	r24, 0x07	; 7
    1e6a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <PORTA_set_pin_dir>
    1e6e:	00 00       	nop
    1e70:	0f 90       	pop	r0
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	08 95       	ret

00001e78 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	1f 92       	push	r1
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	69 81       	ldd	r22, Y+1	; 0x01
    1e86:	87 e0       	ldi	r24, 0x07	; 7
    1e88:	0e 94 8e 0c 	call	0x191c	; 0x191c <PORTA_set_pin_level>
    1e8c:	00 00       	nop
    1e8e:	0f 90       	pop	r0
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <SW0_set_pull_mode>:
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	1f 92       	push	r1
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	69 81       	ldd	r22, Y+1	; 0x01
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <PORTB_set_pin_pull_mode>
    1eaa:	00 00       	nop
    1eac:	0f 90       	pop	r0
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	08 95       	ret

00001eb4 <SW0_set_dir>:
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	1f 92       	push	r1
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	69 81       	ldd	r22, Y+1	; 0x01
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <PORTB_set_pin_dir>
    1ec8:	00 00       	nop
    1eca:	0f 90       	pop	r0
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <LED0_set_dir>:
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	1f 92       	push	r1
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	69 81       	ldd	r22, Y+1	; 0x01
    1ee0:	85 e0       	ldi	r24, 0x05	; 5
    1ee2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <PORTB_set_pin_dir>
    1ee6:	00 00       	nop
    1ee8:	0f 90       	pop	r0
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <LED0_set_level>:
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	1f 92       	push	r1
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	69 81       	ldd	r22, Y+1	; 0x01
    1efe:	85 e0       	ldi	r24, 0x05	; 5
    1f00:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <PORTB_set_pin_level>
    1f04:	00 00       	nop
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <PC0_set_dir>:
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	1f 92       	push	r1
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	69 81       	ldd	r22, Y+1	; 0x01
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <PORTC_set_pin_dir>
    1f22:	00 00       	nop
    1f24:	0f 90       	pop	r0
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <PC0_set_level>:
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	1f 92       	push	r1
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	69 81       	ldd	r22, Y+1	; 0x01
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <PORTC_set_pin_level>
    1f40:	00 00       	nop
    1f42:	0f 90       	pop	r0
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <PC1_set_pull_mode>:
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	1f 92       	push	r1
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	69 81       	ldd	r22, Y+1	; 0x01
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <PORTC_set_pin_pull_mode>
    1f5e:	00 00       	nop
    1f60:	0f 90       	pop	r0
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	08 95       	ret

00001f68 <PC1_set_dir>:
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	1f 92       	push	r1
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	69 81       	ldd	r22, Y+1	; 0x01
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <PORTC_set_pin_dir>
    1f7c:	00 00       	nop
    1f7e:	0f 90       	pop	r0
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	1f 92       	push	r1
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	69 81       	ldd	r22, Y+1	; 0x01
    1f94:	86 e0       	ldi	r24, 0x06	; 6
    1f96:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <PORTC_set_pin_pull_mode>
    1f9a:	00 00       	nop
    1f9c:	0f 90       	pop	r0
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	08 95       	ret

00001fa4 <CONF_WIFI_M2M_INT_PIN_set_dir>:
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	1f 92       	push	r1
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	69 81       	ldd	r22, Y+1	; 0x01
    1fb2:	86 e0       	ldi	r24, 0x06	; 6
    1fb4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <PORTC_set_pin_dir>
    1fb8:	00 00       	nop
    1fba:	0f 90       	pop	r0
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	08 95       	ret

00001fc2 <CONF_WIFI_M2M_INT_PIN_set_isc>:
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	1f 92       	push	r1
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	69 81       	ldd	r22, Y+1	; 0x01
    1fd0:	86 e0       	ldi	r24, 0x06	; 6
    1fd2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <PORTC_pin_set_isc>
    1fd6:	00 00       	nop
    1fd8:	0f 90       	pop	r0
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	08 95       	ret

00001fe0 <CONF_WIFI_M2M_INT_PIN_set_inverted>:
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	1f 92       	push	r1
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	69 81       	ldd	r22, Y+1	; 0x01
    1fee:	86 e0       	ldi	r24, 0x06	; 6
    1ff0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <PORTC_pin_set_inverted>
    1ff4:	00 00       	nop
    1ff6:	0f 90       	pop	r0
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	08 95       	ret

00001ffe <CONF_WIFI_M2M_INT_PIN_set_level>:
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	1f 92       	push	r1
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	69 81       	ldd	r22, Y+1	; 0x01
    200c:	86 e0       	ldi	r24, 0x06	; 6
    200e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <PORTC_set_pin_level>
    2012:	00 00       	nop
    2014:	0f 90       	pop	r0
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	08 95       	ret

0000201c <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	1f 92       	push	r1
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	69 81       	ldd	r22, Y+1	; 0x01
    202a:	87 e0       	ldi	r24, 0x07	; 7
    202c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <PORTC_set_pin_dir>
    2030:	00 00       	nop
    2032:	0f 90       	pop	r0
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	1f 92       	push	r1
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	69 81       	ldd	r22, Y+1	; 0x01
    2048:	87 e0       	ldi	r24, 0x07	; 7
    204a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <PORTC_set_pin_level>
    204e:	00 00       	nop
    2050:	0f 90       	pop	r0
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <mcu_init>:
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	26 97       	sbiw	r28, 0x06	; 6
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	19 82       	std	Y+1, r1	; 0x01
    2068:	12 c0       	rjmp	.+36     	; 0x208e <mcu_init+0x36>
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	80 5f       	subi	r24, 0xF0	; 240
    2072:	9b 4f       	sbci	r25, 0xFB	; 251
    2074:	29 81       	ldd	r18, Y+1	; 0x01
    2076:	22 2f       	mov	r18, r18
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	20 5f       	subi	r18, 0xF0	; 240
    207c:	3b 4f       	sbci	r19, 0xFB	; 251
    207e:	f9 01       	movw	r30, r18
    2080:	20 81       	ld	r18, Z
    2082:	28 60       	ori	r18, 0x08	; 8
    2084:	fc 01       	movw	r30, r24
    2086:	20 83       	st	Z, r18
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	8f 5f       	subi	r24, 0xFF	; 255
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	58 f3       	brcs	.-42     	; 0x206a <mcu_init+0x12>
    2094:	1a 82       	std	Y+2, r1	; 0x02
    2096:	12 c0       	rjmp	.+36     	; 0x20bc <mcu_init+0x64>
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	80 5d       	subi	r24, 0xD0	; 208
    20a0:	9b 4f       	sbci	r25, 0xFB	; 251
    20a2:	2a 81       	ldd	r18, Y+2	; 0x02
    20a4:	22 2f       	mov	r18, r18
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	20 5d       	subi	r18, 0xD0	; 208
    20aa:	3b 4f       	sbci	r19, 0xFB	; 251
    20ac:	f9 01       	movw	r30, r18
    20ae:	20 81       	ld	r18, Z
    20b0:	28 60       	ori	r18, 0x08	; 8
    20b2:	fc 01       	movw	r30, r24
    20b4:	20 83       	st	Z, r18
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	8f 5f       	subi	r24, 0xFF	; 255
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	88 30       	cpi	r24, 0x08	; 8
    20c0:	58 f3       	brcs	.-42     	; 0x2098 <mcu_init+0x40>
    20c2:	1b 82       	std	Y+3, r1	; 0x03
    20c4:	12 c0       	rjmp	.+36     	; 0x20ea <mcu_init+0x92>
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	80 5b       	subi	r24, 0xB0	; 176
    20ce:	9b 4f       	sbci	r25, 0xFB	; 251
    20d0:	2b 81       	ldd	r18, Y+3	; 0x03
    20d2:	22 2f       	mov	r18, r18
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	20 5b       	subi	r18, 0xB0	; 176
    20d8:	3b 4f       	sbci	r19, 0xFB	; 251
    20da:	f9 01       	movw	r30, r18
    20dc:	20 81       	ld	r18, Z
    20de:	28 60       	ori	r18, 0x08	; 8
    20e0:	fc 01       	movw	r30, r24
    20e2:	20 83       	st	Z, r18
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	8b 83       	std	Y+3, r24	; 0x03
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	88 30       	cpi	r24, 0x08	; 8
    20ee:	58 f3       	brcs	.-42     	; 0x20c6 <mcu_init+0x6e>
    20f0:	1c 82       	std	Y+4, r1	; 0x04
    20f2:	12 c0       	rjmp	.+36     	; 0x2118 <mcu_init+0xc0>
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	80 59       	subi	r24, 0x90	; 144
    20fc:	9b 4f       	sbci	r25, 0xFB	; 251
    20fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2100:	22 2f       	mov	r18, r18
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	20 59       	subi	r18, 0x90	; 144
    2106:	3b 4f       	sbci	r19, 0xFB	; 251
    2108:	f9 01       	movw	r30, r18
    210a:	20 81       	ld	r18, Z
    210c:	28 60       	ori	r18, 0x08	; 8
    210e:	fc 01       	movw	r30, r24
    2110:	20 83       	st	Z, r18
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	8f 5f       	subi	r24, 0xFF	; 255
    2116:	8c 83       	std	Y+4, r24	; 0x04
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	58 f3       	brcs	.-42     	; 0x20f4 <mcu_init+0x9c>
    211e:	1d 82       	std	Y+5, r1	; 0x05
    2120:	12 c0       	rjmp	.+36     	; 0x2146 <mcu_init+0xee>
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	80 57       	subi	r24, 0x70	; 112
    212a:	9b 4f       	sbci	r25, 0xFB	; 251
    212c:	2d 81       	ldd	r18, Y+5	; 0x05
    212e:	22 2f       	mov	r18, r18
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	20 57       	subi	r18, 0x70	; 112
    2134:	3b 4f       	sbci	r19, 0xFB	; 251
    2136:	f9 01       	movw	r30, r18
    2138:	20 81       	ld	r18, Z
    213a:	28 60       	ori	r18, 0x08	; 8
    213c:	fc 01       	movw	r30, r24
    213e:	20 83       	st	Z, r18
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	88 30       	cpi	r24, 0x08	; 8
    214a:	58 f3       	brcs	.-42     	; 0x2122 <mcu_init+0xca>
    214c:	1e 82       	std	Y+6, r1	; 0x06
    214e:	12 c0       	rjmp	.+36     	; 0x2174 <mcu_init+0x11c>
    2150:	8e 81       	ldd	r24, Y+6	; 0x06
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	80 55       	subi	r24, 0x50	; 80
    2158:	9b 4f       	sbci	r25, 0xFB	; 251
    215a:	2e 81       	ldd	r18, Y+6	; 0x06
    215c:	22 2f       	mov	r18, r18
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	20 55       	subi	r18, 0x50	; 80
    2162:	3b 4f       	sbci	r19, 0xFB	; 251
    2164:	f9 01       	movw	r30, r18
    2166:	20 81       	ld	r18, Z
    2168:	28 60       	ori	r18, 0x08	; 8
    216a:	fc 01       	movw	r30, r24
    216c:	20 83       	st	Z, r18
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	8e 83       	std	Y+6, r24	; 0x06
    2174:	8e 81       	ldd	r24, Y+6	; 0x06
    2176:	88 30       	cpi	r24, 0x08	; 8
    2178:	58 f3       	brcs	.-42     	; 0x2150 <mcu_init+0xf8>
    217a:	00 00       	nop
    217c:	26 96       	adiw	r28, 0x06	; 6
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <USART_0_initialization>:
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <PC1_set_dir>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <PC1_set_pull_mode>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <PC0_set_dir>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <PC0_set_level>
    21a8:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <USART_0_init>
    21ac:	00 00       	nop
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret

000021b4 <SPI_0_initialization>:
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
    21e0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <SPI_0_init>
    21e4:	00 00       	nop
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    21f4:	0e 94 2c 10 	call	0x2058	; 0x2058 <mcu_init>
//	ADC_0_initialization();


	CLKCTRL_init();
    21f8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <CLKCTRL_init>

//	scheduler_timeout_init();

	USART_0_initialization();
    21fc:	0e 94 c4 10 	call	0x2188	; 0x2188 <USART_0_initialization>
	//return;
	/* PORT setting on PA2 */

	// Set pin direction to output
	CONF_WIFI_M2M_RESET_PIN_set_dir(PORT_DIR_OUT);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <CONF_WIFI_M2M_RESET_PIN_set_dir>

	CONF_WIFI_M2M_RESET_PIN_set_level(
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <CONF_WIFI_M2M_RESET_PIN_set_level>
	    false);

	/* PORT setting on PA3 */

	// Set pin direction to output
	CONF_WIFI_M2M_WAKE_PIN_set_dir(PORT_DIR_OUT);
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <CONF_WIFI_M2M_WAKE_PIN_set_dir>

	CONF_WIFI_M2M_WAKE_PIN_set_level(
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <CONF_WIFI_M2M_WAKE_PIN_set_level>
	    false);

	/* PORT setting on PA7 */

	// Set pin direction to output
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>

	CONF_WIFI_M2M_SPI_CS_PIN_set_level(
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	    true);

	/* PORT setting on PB2 */

	// Set pin direction to input
	SW0_set_dir(PORT_DIR_IN);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <SW0_set_dir>

	SW0_set_pull_mode(
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <SW0_set_pull_mode>
	    PORT_PULL_UP);

	/* PORT setting on PB5 */

	// Set pin direction to output
	LED0_set_dir(PORT_DIR_OUT);
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <LED0_set_dir>

	LED0_set_level(
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <LED0_set_level>
	    // <true"> High
	    false);

	/* PORT setting on PC6 */

	CONF_WIFI_M2M_INT_PIN_set_dir(
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <CONF_WIFI_M2M_INT_PIN_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_IN);

	CONF_WIFI_M2M_INT_PIN_set_level(
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <CONF_WIFI_M2M_INT_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CONF_WIFI_M2M_INT_PIN_set_pull_mode(
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CONF_WIFI_M2M_INT_PIN_set_inverted(
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <CONF_WIFI_M2M_INT_PIN_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	CONF_WIFI_M2M_INT_PIN_set_isc(
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <CONF_WIFI_M2M_INT_PIN_set_isc>
	    PORT_ISC_FALLING_gc);

	/* PORT setting on PC7 */

	// Set pin direction to output
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir(PORT_DIR_OUT);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	0e 94 0e 10 	call	0x201c	; 0x201c <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>

	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	0e 94 1d 10 	call	0x203a	; 0x203a <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
    2266:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <CLKCTRL_init>

	scheduler_timeout_init();
    226a:	0e 94 a2 11 	call	0x2344	; 0x2344 <scheduler_timeout_init>

	USART_0_initialization();
    226e:	0e 94 c4 10 	call	0x2188	; 0x2188 <USART_0_initialization>

	SPI_0_initialization();
    2272:	0e 94 da 10 	call	0x21b4	; 0x21b4 <SPI_0_initialization>

	CPUINT_init();
    2276:	0e 94 01 0c 	call	0x1802	; 0x1802 <CPUINT_init>

	SLPCTRL_init();
    227a:	0e 94 4a 11 	call	0x2294	; 0x2294 <SLPCTRL_init>

	BOD_init();
    227e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <BOD_init>
}
    2282:	00 00       	nop
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    228a:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    228c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    228e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    2290:	40 83       	st	Z, r20
	ret                             // Return to caller
    2292:	08 95       	ret

00002294 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    229c:	80 e0       	ldi	r24, 0x00	; 0
}
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	08 95       	ret

000022a4 <SPI_0_init>:
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
}
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	80 ec       	ldi	r24, 0xC0	; 192
    22ae:	98 e0       	ldi	r25, 0x08	; 8
    22b0:	21 e3       	ldi	r18, 0x31	; 49
    22b2:	fc 01       	movw	r30, r24
    22b4:	20 83       	st	Z, r18
    22b6:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <SPI_0_desc>
    22ba:	00 00       	nop
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <SPI_0_enable>:
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	80 ec       	ldi	r24, 0xC0	; 192
    22cc:	98 e0       	ldi	r25, 0x08	; 8
    22ce:	20 ec       	ldi	r18, 0xC0	; 192
    22d0:	38 e0       	ldi	r19, 0x08	; 8
    22d2:	f9 01       	movw	r30, r18
    22d4:	20 81       	ld	r18, Z
    22d6:	21 60       	ori	r18, 0x01	; 1
    22d8:	fc 01       	movw	r30, r24
    22da:	20 83       	st	Z, r18
    22dc:	00 00       	nop
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	08 95       	ret

000022e4 <SPI_0_exchange_byte>:
 * \param[in] data The byte to transfer
 *
 * \return Received data byte.
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	1f 92       	push	r1
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	89 83       	std	Y+1, r24	; 0x01
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    22f0:	00 00       	nop
    22f2:	80 91 d0 28 	lds	r24, 0x28D0	; 0x8028d0 <SPI_0_desc>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	e1 f3       	breq	.-8      	; 0x22f2 <SPI_0_exchange_byte+0xe>
		;
	SPI0.DATA = data;
    22fa:	80 ec       	ldi	r24, 0xC0	; 192
    22fc:	98 e0       	ldi	r25, 0x08	; 8
    22fe:	29 81       	ldd	r18, Y+1	; 0x01
    2300:	fc 01       	movw	r30, r24
    2302:	24 83       	std	Z+4, r18	; 0x04
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    2304:	00 00       	nop
    2306:	80 ec       	ldi	r24, 0xC0	; 192
    2308:	98 e0       	ldi	r25, 0x08	; 8
    230a:	fc 01       	movw	r30, r24
    230c:	83 81       	ldd	r24, Z+3	; 0x03
    230e:	88 23       	and	r24, r24
    2310:	d4 f7       	brge	.-12     	; 0x2306 <SPI_0_exchange_byte+0x22>
		;
	return SPI0.DATA;
    2312:	80 ec       	ldi	r24, 0xC0	; 192
    2314:	98 e0       	ldi	r25, 0x08	; 8
    2316:	fc 01       	movw	r30, r24
    2318:	84 81       	ldd	r24, Z+4	; 0x04
}
    231a:	0f 90       	pop	r0
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <scheduler_dummy_handler>:

void scheduler_timeout_flush_all(void)
{
	scheduler_stop_timeouts();
	scheduler_list_head = NULL;
}
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	00 d0       	rcall	.+0      	; 0x2328 <scheduler_dummy_handler+0x6>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	dc 01       	movw	r26, r24
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	08 95       	ret

00002344 <scheduler_timeout_init>:
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	00 00       	nop
    234e:	80 e4       	ldi	r24, 0x40	; 64
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	fc 01       	movw	r30, r24
    2354:	81 81       	ldd	r24, Z+1	; 0x01
    2356:	88 23       	and	r24, r24
    2358:	d1 f7       	brne	.-12     	; 0x234e <scheduler_timeout_init+0xa>
    235a:	80 e4       	ldi	r24, 0x40	; 64
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	21 e0       	ldi	r18, 0x01	; 1
    2360:	fc 01       	movw	r30, r24
    2362:	20 83       	st	Z, r18
    2364:	80 e4       	ldi	r24, 0x40	; 64
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	21 e0       	ldi	r18, 0x01	; 1
    236a:	fc 01       	movw	r30, r24
    236c:	27 83       	std	Z+7, r18	; 0x07
    236e:	80 e4       	ldi	r24, 0x40	; 64
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	fc 01       	movw	r30, r24
    2376:	22 83       	std	Z+2, r18	; 0x02
    2378:	00 00       	nop
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <scheduler_stop_timeouts>:
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	80 e4       	ldi	r24, 0x40	; 64
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	20 e4       	ldi	r18, 0x40	; 64
    238e:	31 e0       	ldi	r19, 0x01	; 1
    2390:	f9 01       	movw	r30, r18
    2392:	22 81       	ldd	r18, Z+2	; 0x02
    2394:	2e 7f       	andi	r18, 0xFE	; 254
    2396:	fc 01       	movw	r30, r24
    2398:	22 83       	std	Z+2, r18	; 0x02
    239a:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    239e:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    23a2:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    23a6:	10 92 d8 28 	sts	0x28D8, r1	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
    23aa:	10 92 dd 28 	sts	0x28DD, r1	; 0x8028dd <scheduler_is_running>
    23ae:	00 00       	nop
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <scheduler_set_timer_duration>:
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <scheduler_set_timer_duration+0xe>
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <scheduler_set_timer_duration+0x10>
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	69 83       	std	Y+1, r22	; 0x01
    23cc:	7a 83       	std	Y+2, r23	; 0x02
    23ce:	8b 83       	std	Y+3, r24	; 0x03
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	2f ef       	ldi	r18, 0xFF	; 255
    23d4:	3f ef       	ldi	r19, 0xFF	; 255
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	ab 81       	ldd	r26, Y+3	; 0x03
    23e0:	bc 81       	ldd	r27, Y+4	; 0x04
    23e2:	79 01       	movw	r14, r18
    23e4:	8a 01       	movw	r16, r20
    23e6:	e8 1a       	sub	r14, r24
    23e8:	f9 0a       	sbc	r15, r25
    23ea:	0a 0b       	sbc	r16, r26
    23ec:	1b 0b       	sbc	r17, r27
    23ee:	d8 01       	movw	r26, r16
    23f0:	c7 01       	movw	r24, r14
    23f2:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <scheduler_last_timer_load>
    23f6:	90 93 da 28 	sts	0x28DA, r25	; 0x8028da <scheduler_last_timer_load+0x1>
    23fa:	a0 93 db 28 	sts	0x28DB, r26	; 0x8028db <scheduler_last_timer_load+0x2>
    23fe:	b0 93 dc 28 	sts	0x28DC, r27	; 0x8028dc <scheduler_last_timer_load+0x3>
    2402:	20 e4       	ldi	r18, 0x40	; 64
    2404:	31 e0       	ldi	r19, 0x01	; 1
    2406:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <scheduler_last_timer_load>
    240a:	90 91 da 28 	lds	r25, 0x28DA	; 0x8028da <scheduler_last_timer_load+0x1>
    240e:	a0 91 db 28 	lds	r26, 0x28DB	; 0x8028db <scheduler_last_timer_load+0x2>
    2412:	b0 91 dc 28 	lds	r27, 0x28DC	; 0x8028dc <scheduler_last_timer_load+0x3>
    2416:	f9 01       	movw	r30, r18
    2418:	80 87       	std	Z+8, r24	; 0x08
    241a:	91 87       	std	Z+9, r25	; 0x09
    241c:	00 00       	nop
    241e:	80 e4       	ldi	r24, 0x40	; 64
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	fc 01       	movw	r30, r24
    2424:	81 81       	ldd	r24, Z+1	; 0x01
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	82 70       	andi	r24, 0x02	; 2
    242c:	99 27       	eor	r25, r25
    242e:	89 2b       	or	r24, r25
    2430:	b1 f7       	brne	.-20     	; 0x241e <scheduler_set_timer_duration+0x68>
    2432:	00 00       	nop
    2434:	24 96       	adiw	r28, 0x04	; 4
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	08 95       	ret

00002448 <scheduler_make_absolute>:
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	00 d0       	rcall	.+0      	; 0x2456 <scheduler_make_absolute+0xe>
    2456:	00 d0       	rcall	.+0      	; 0x2458 <scheduler_make_absolute+0x10>
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	69 83       	std	Y+1, r22	; 0x01
    245e:	7a 83       	std	Y+2, r23	; 0x02
    2460:	8b 83       	std	Y+3, r24	; 0x03
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    2468:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    246c:	a0 91 d7 28 	lds	r26, 0x28D7	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    2470:	b0 91 d8 28 	lds	r27, 0x28D8	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
    2474:	29 81       	ldd	r18, Y+1	; 0x01
    2476:	3a 81       	ldd	r19, Y+2	; 0x02
    2478:	4b 81       	ldd	r20, Y+3	; 0x03
    247a:	5c 81       	ldd	r21, Y+4	; 0x04
    247c:	82 0f       	add	r24, r18
    247e:	93 1f       	adc	r25, r19
    2480:	a4 1f       	adc	r26, r20
    2482:	b5 1f       	adc	r27, r21
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	ab 83       	std	Y+3, r26	; 0x03
    248a:	bc 83       	std	Y+4, r27	; 0x04
    248c:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <scheduler_is_running>
    2490:	88 23       	and	r24, r24
    2492:	c9 f0       	breq	.+50     	; 0x24c6 <scheduler_make_absolute+0x7e>
    2494:	80 e4       	ldi	r24, 0x40	; 64
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	fc 01       	movw	r30, r24
    249a:	80 85       	ldd	r24, Z+8	; 0x08
    249c:	91 85       	ldd	r25, Z+9	; 0x09
    249e:	9c 01       	movw	r18, r24
    24a0:	40 e0       	ldi	r20, 0x00	; 0
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <scheduler_last_timer_load>
    24a8:	90 91 da 28 	lds	r25, 0x28DA	; 0x8028da <scheduler_last_timer_load+0x1>
    24ac:	a0 91 db 28 	lds	r26, 0x28DB	; 0x8028db <scheduler_last_timer_load+0x2>
    24b0:	b0 91 dc 28 	lds	r27, 0x28DC	; 0x8028dc <scheduler_last_timer_load+0x3>
    24b4:	79 01       	movw	r14, r18
    24b6:	8a 01       	movw	r16, r20
    24b8:	e8 1a       	sub	r14, r24
    24ba:	f9 0a       	sbc	r15, r25
    24bc:	0a 0b       	sbc	r16, r26
    24be:	1b 0b       	sbc	r17, r27
    24c0:	d8 01       	movw	r26, r16
    24c2:	c7 01       	movw	r24, r14
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <scheduler_make_absolute+0x84>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	dc 01       	movw	r26, r24
    24cc:	29 81       	ldd	r18, Y+1	; 0x01
    24ce:	3a 81       	ldd	r19, Y+2	; 0x02
    24d0:	4b 81       	ldd	r20, Y+3	; 0x03
    24d2:	5c 81       	ldd	r21, Y+4	; 0x04
    24d4:	82 0f       	add	r24, r18
    24d6:	93 1f       	adc	r25, r19
    24d8:	a4 1f       	adc	r26, r20
    24da:	b5 1f       	adc	r27, r21
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	ab 83       	std	Y+3, r26	; 0x03
    24e2:	bc 83       	std	Y+4, r27	; 0x04
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	9a 81       	ldd	r25, Y+2	; 0x02
    24e8:	ab 81       	ldd	r26, Y+3	; 0x03
    24ea:	bc 81       	ldd	r27, Y+4	; 0x04
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	24 96       	adiw	r28, 0x04	; 4
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	08 95       	ret

00002504 <scheduler_rebase_list>:
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	26 97       	sbiw	r28, 0x06	; 6
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    251e:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    252a:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    252e:	fc 01       	movw	r30, r24
    2530:	86 81       	ldd	r24, Z+6	; 0x06
    2532:	97 81       	ldd	r25, Z+7	; 0x07
    2534:	a0 85       	ldd	r26, Z+8	; 0x08
    2536:	b1 85       	ldd	r27, Z+9	; 0x09
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	ad 83       	std	Y+5, r26	; 0x05
    253e:	be 83       	std	Y+6, r27	; 0x06
    2540:	21 c0       	rjmp	.+66     	; 0x2584 <scheduler_rebase_list+0x80>
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	fc 01       	movw	r30, r24
    2548:	26 81       	ldd	r18, Z+6	; 0x06
    254a:	37 81       	ldd	r19, Z+7	; 0x07
    254c:	40 85       	ldd	r20, Z+8	; 0x08
    254e:	51 85       	ldd	r21, Z+9	; 0x09
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	ad 81       	ldd	r26, Y+5	; 0x05
    2556:	be 81       	ldd	r27, Y+6	; 0x06
    2558:	79 01       	movw	r14, r18
    255a:	8a 01       	movw	r16, r20
    255c:	e8 1a       	sub	r14, r24
    255e:	f9 0a       	sbc	r15, r25
    2560:	0a 0b       	sbc	r16, r26
    2562:	1b 0b       	sbc	r17, r27
    2564:	d8 01       	movw	r26, r16
    2566:	c7 01       	movw	r24, r14
    2568:	29 81       	ldd	r18, Y+1	; 0x01
    256a:	3a 81       	ldd	r19, Y+2	; 0x02
    256c:	f9 01       	movw	r30, r18
    256e:	86 83       	std	Z+6, r24	; 0x06
    2570:	97 83       	std	Z+7, r25	; 0x07
    2572:	a0 87       	std	Z+8, r26	; 0x08
    2574:	b1 87       	std	Z+9, r27	; 0x09
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	fc 01       	movw	r30, r24
    257c:	84 81       	ldd	r24, Z+4	; 0x04
    257e:	95 81       	ldd	r25, Z+5	; 0x05
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	89 2b       	or	r24, r25
    258a:	d9 f6       	brne	.-74     	; 0x2542 <scheduler_rebase_list+0x3e>
    258c:	20 91 d5 28 	lds	r18, 0x28D5	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    2590:	30 91 d6 28 	lds	r19, 0x28D6	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    2594:	40 91 d7 28 	lds	r20, 0x28D7	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    2598:	50 91 d8 28 	lds	r21, 0x28D8	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	ad 81       	ldd	r26, Y+5	; 0x05
    25a2:	be 81       	ldd	r27, Y+6	; 0x06
    25a4:	79 01       	movw	r14, r18
    25a6:	8a 01       	movw	r16, r20
    25a8:	e8 1a       	sub	r14, r24
    25aa:	f9 0a       	sbc	r15, r25
    25ac:	0a 0b       	sbc	r16, r26
    25ae:	1b 0b       	sbc	r17, r27
    25b0:	d8 01       	movw	r26, r16
    25b2:	c7 01       	movw	r24, r14
    25b4:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    25b8:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    25bc:	a0 93 d7 28 	sts	0x28D7, r26	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    25c0:	b0 93 d8 28 	sts	0x28D8, r27	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	ad 81       	ldd	r26, Y+5	; 0x05
    25ca:	be 81       	ldd	r27, Y+6	; 0x06
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	26 96       	adiw	r28, 0x06	; 6
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	ff 90       	pop	r15
    25e0:	ef 90       	pop	r14
    25e2:	08 95       	ret

000025e4 <scheduler_sorted_insert>:
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	2b 97       	sbiw	r28, 0x0b	; 11
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	8a 87       	std	Y+10, r24	; 0x0a
    25f4:	9b 87       	std	Y+11, r25	; 0x0b
    25f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25fa:	fc 01       	movw	r30, r24
    25fc:	86 81       	ldd	r24, Z+6	; 0x06
    25fe:	97 81       	ldd	r25, Z+7	; 0x07
    2600:	a0 85       	ldd	r26, Z+8	; 0x08
    2602:	b1 85       	ldd	r27, Z+9	; 0x09
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	ab 83       	std	Y+3, r26	; 0x03
    260a:	bc 83       	std	Y+4, r27	; 0x04
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2614:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2618:	8e 83       	std	Y+6, r24	; 0x06
    261a:	9f 83       	std	Y+7, r25	; 0x07
    261c:	18 86       	std	Y+8, r1	; 0x08
    261e:	19 86       	std	Y+9, r1	; 0x09
    2620:	8a 85       	ldd	r24, Y+10	; 0x0a
    2622:	9b 85       	ldd	r25, Y+11	; 0x0b
    2624:	fc 01       	movw	r30, r24
    2626:	14 82       	std	Z+4, r1	; 0x04
    2628:	15 82       	std	Z+5, r1	; 0x05
    262a:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    262e:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    2632:	a0 91 d7 28 	lds	r26, 0x28D7	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    2636:	b0 91 d8 28 	lds	r27, 0x28D8	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
    263a:	29 81       	ldd	r18, Y+1	; 0x01
    263c:	3a 81       	ldd	r19, Y+2	; 0x02
    263e:	4b 81       	ldd	r20, Y+3	; 0x03
    2640:	5c 81       	ldd	r21, Y+4	; 0x04
    2642:	28 17       	cp	r18, r24
    2644:	39 07       	cpc	r19, r25
    2646:	4a 07       	cpc	r20, r26
    2648:	5b 07       	cpc	r21, r27
    264a:	08 f0       	brcs	.+2      	; 0x264e <scheduler_sorted_insert+0x6a>
    264c:	40 c0       	rjmp	.+128    	; 0x26ce <scheduler_sorted_insert+0xea>
    264e:	0e 94 82 12 	call	0x2504	; 0x2504 <scheduler_rebase_list>
    2652:	9b 01       	movw	r18, r22
    2654:	ac 01       	movw	r20, r24
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a1 e0       	ldi	r26, 0x01	; 1
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	82 1b       	sub	r24, r18
    2660:	93 0b       	sbc	r25, r19
    2662:	a4 0b       	sbc	r26, r20
    2664:	b5 0b       	sbc	r27, r21
    2666:	29 81       	ldd	r18, Y+1	; 0x01
    2668:	3a 81       	ldd	r19, Y+2	; 0x02
    266a:	4b 81       	ldd	r20, Y+3	; 0x03
    266c:	5c 81       	ldd	r21, Y+4	; 0x04
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	a4 1f       	adc	r26, r20
    2674:	b5 1f       	adc	r27, r21
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	ab 83       	std	Y+3, r26	; 0x03
    267c:	bc 83       	std	Y+4, r27	; 0x04
    267e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2680:	3b 85       	ldd	r19, Y+11	; 0x0b
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	ab 81       	ldd	r26, Y+3	; 0x03
    2688:	bc 81       	ldd	r27, Y+4	; 0x04
    268a:	f9 01       	movw	r30, r18
    268c:	86 83       	std	Z+6, r24	; 0x06
    268e:	97 83       	std	Z+7, r25	; 0x07
    2690:	a0 87       	std	Z+8, r26	; 0x08
    2692:	b1 87       	std	Z+9, r27	; 0x09
    2694:	1c c0       	rjmp	.+56     	; 0x26ce <scheduler_sorted_insert+0xea>
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	fc 01       	movw	r30, r24
    269c:	26 81       	ldd	r18, Z+6	; 0x06
    269e:	37 81       	ldd	r19, Z+7	; 0x07
    26a0:	40 85       	ldd	r20, Z+8	; 0x08
    26a2:	51 85       	ldd	r21, Z+9	; 0x09
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	ab 81       	ldd	r26, Y+3	; 0x03
    26aa:	bc 81       	ldd	r27, Y+4	; 0x04
    26ac:	82 17       	cp	r24, r18
    26ae:	93 07       	cpc	r25, r19
    26b0:	a4 07       	cpc	r26, r20
    26b2:	b5 07       	cpc	r27, r21
    26b4:	88 f0       	brcs	.+34     	; 0x26d8 <scheduler_sorted_insert+0xf4>
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ba:	88 87       	std	Y+8, r24	; 0x08
    26bc:	99 87       	std	Y+9, r25	; 0x09
    26be:	8e 81       	ldd	r24, Y+6	; 0x06
    26c0:	9f 81       	ldd	r25, Y+7	; 0x07
    26c2:	fc 01       	movw	r30, r24
    26c4:	84 81       	ldd	r24, Z+4	; 0x04
    26c6:	95 81       	ldd	r25, Z+5	; 0x05
    26c8:	8e 83       	std	Y+6, r24	; 0x06
    26ca:	9f 83       	std	Y+7, r25	; 0x07
    26cc:	1d 82       	std	Y+5, r1	; 0x05
    26ce:	8e 81       	ldd	r24, Y+6	; 0x06
    26d0:	9f 81       	ldd	r25, Y+7	; 0x07
    26d2:	89 2b       	or	r24, r25
    26d4:	01 f7       	brne	.-64     	; 0x2696 <scheduler_sorted_insert+0xb2>
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <scheduler_sorted_insert+0xf6>
    26d8:	00 00       	nop
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	41 f5       	brne	.+80     	; 0x2730 <scheduler_sorted_insert+0x14c>
    26e0:	6f ef       	ldi	r22, 0xFF	; 255
    26e2:	7f ef       	ldi	r23, 0xFF	; 255
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 db 11 	call	0x23b6	; 0x23b6 <scheduler_set_timer_duration>
    26ec:	80 e4       	ldi	r24, 0x40	; 64
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	21 e0       	ldi	r18, 0x01	; 1
    26f2:	fc 01       	movw	r30, r24
    26f4:	23 83       	std	Z+3, r18	; 0x03
    26f6:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    26fa:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    26fe:	84 55       	subi	r24, 0x54	; 84
    2700:	98 42       	sbci	r25, 0x28	; 40
    2702:	29 f4       	brne	.+10     	; 0x270e <scheduler_sorted_insert+0x12a>
    2704:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <scheduler_dummy+0x4>
    2708:	90 91 59 28 	lds	r25, 0x2859	; 0x802859 <scheduler_dummy+0x5>
    270c:	04 c0       	rjmp	.+8      	; 0x2716 <scheduler_sorted_insert+0x132>
    270e:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2712:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2716:	2a 85       	ldd	r18, Y+10	; 0x0a
    2718:	3b 85       	ldd	r19, Y+11	; 0x0b
    271a:	f9 01       	movw	r30, r18
    271c:	84 83       	std	Z+4, r24	; 0x04
    271e:	95 83       	std	Z+5, r25	; 0x05
    2720:	8a 85       	ldd	r24, Y+10	; 0x0a
    2722:	9b 85       	ldd	r25, Y+11	; 0x0b
    2724:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <scheduler_list_head>
    2728:	90 93 d2 28 	sts	0x28D2, r25	; 0x8028d2 <scheduler_list_head+0x1>
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	12 c0       	rjmp	.+36     	; 0x2754 <scheduler_sorted_insert+0x170>
    2730:	88 85       	ldd	r24, Y+8	; 0x08
    2732:	99 85       	ldd	r25, Y+9	; 0x09
    2734:	fc 01       	movw	r30, r24
    2736:	24 81       	ldd	r18, Z+4	; 0x04
    2738:	35 81       	ldd	r19, Z+5	; 0x05
    273a:	8a 85       	ldd	r24, Y+10	; 0x0a
    273c:	9b 85       	ldd	r25, Y+11	; 0x0b
    273e:	fc 01       	movw	r30, r24
    2740:	24 83       	std	Z+4, r18	; 0x04
    2742:	35 83       	std	Z+5, r19	; 0x05
    2744:	88 85       	ldd	r24, Y+8	; 0x08
    2746:	99 85       	ldd	r25, Y+9	; 0x09
    2748:	2a 85       	ldd	r18, Y+10	; 0x0a
    274a:	3b 85       	ldd	r19, Y+11	; 0x0b
    274c:	fc 01       	movw	r30, r24
    274e:	24 83       	std	Z+4, r18	; 0x04
    2750:	35 83       	std	Z+5, r19	; 0x05
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	2b 96       	adiw	r28, 0x0b	; 11
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <scheduler_start_timer_at_head>:
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	00 d0       	rcall	.+0      	; 0x2766 <scheduler_start_timer_at_head+0x6>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <scheduler_start_timer_at_head+0x8>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	80 e4       	ldi	r24, 0x40	; 64
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	20 e4       	ldi	r18, 0x40	; 64
    2772:	31 e0       	ldi	r19, 0x01	; 1
    2774:	f9 01       	movw	r30, r18
    2776:	22 81       	ldd	r18, Z+2	; 0x02
    2778:	2e 7f       	andi	r18, 0xFE	; 254
    277a:	fc 01       	movw	r30, r24
    277c:	22 83       	std	Z+2, r18	; 0x02
    277e:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2782:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2786:	89 2b       	or	r24, r25
    2788:	19 f4       	brne	.+6      	; 0x2790 <scheduler_start_timer_at_head+0x30>
    278a:	0e 94 c0 11 	call	0x2380	; 0x2380 <scheduler_stop_timeouts>
    278e:	68 c0       	rjmp	.+208    	; 0x2860 <scheduler_start_timer_at_head+0x100>
    2790:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2794:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2798:	89 2b       	or	r24, r25
    279a:	51 f0       	breq	.+20     	; 0x27b0 <scheduler_start_timer_at_head+0x50>
    279c:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    27a0:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    27a4:	fc 01       	movw	r30, r24
    27a6:	86 81       	ldd	r24, Z+6	; 0x06
    27a8:	97 81       	ldd	r25, Z+7	; 0x07
    27aa:	a0 85       	ldd	r26, Z+8	; 0x08
    27ac:	b1 85       	ldd	r27, Z+9	; 0x09
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <scheduler_start_timer_at_head+0x56>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	dc 01       	movw	r26, r24
    27b6:	20 91 d5 28 	lds	r18, 0x28D5	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    27ba:	30 91 d6 28 	lds	r19, 0x28D6	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    27be:	40 91 d7 28 	lds	r20, 0x28D7	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    27c2:	50 91 d8 28 	lds	r21, 0x28D8	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
    27c6:	82 1b       	sub	r24, r18
    27c8:	93 0b       	sbc	r25, r19
    27ca:	a4 0b       	sbc	r26, r20
    27cc:	b5 0b       	sbc	r27, r21
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	ab 83       	std	Y+3, r26	; 0x03
    27d4:	bc 83       	std	Y+4, r27	; 0x04
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	ab 81       	ldd	r26, Y+3	; 0x03
    27dc:	bc 81       	ldd	r27, Y+4	; 0x04
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	a1 40       	sbci	r26, 0x01	; 1
    27e2:	b1 05       	cpc	r27, r1
    27e4:	48 f1       	brcs	.+82     	; 0x2838 <scheduler_start_timer_at_head+0xd8>
    27e6:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    27ea:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    27ee:	a0 91 d7 28 	lds	r26, 0x28D7	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    27f2:	b0 91 d8 28 	lds	r27, 0x28D8	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	af 4f       	sbci	r26, 0xFF	; 255
    27fa:	bf 4f       	sbci	r27, 0xFF	; 255
    27fc:	80 93 5a 28 	sts	0x285A, r24	; 0x80285a <scheduler_dummy+0x6>
    2800:	90 93 5b 28 	sts	0x285B, r25	; 0x80285b <scheduler_dummy+0x7>
    2804:	a0 93 5c 28 	sts	0x285C, r26	; 0x80285c <scheduler_dummy+0x8>
    2808:	b0 93 5d 28 	sts	0x285D, r27	; 0x80285d <scheduler_dummy+0x9>
    280c:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2810:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2814:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <scheduler_dummy+0x4>
    2818:	90 93 59 28 	sts	0x2859, r25	; 0x802859 <scheduler_dummy+0x5>
    281c:	84 e5       	ldi	r24, 0x54	; 84
    281e:	98 e2       	ldi	r25, 0x28	; 40
    2820:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <scheduler_list_head>
    2824:	90 93 d2 28 	sts	0x28D2, r25	; 0x8028d2 <scheduler_list_head+0x1>
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	9f ef       	ldi	r25, 0xFF	; 255
    282c:	a0 e0       	ldi	r26, 0x00	; 0
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	ab 83       	std	Y+3, r26	; 0x03
    2836:	bc 83       	std	Y+4, r27	; 0x04
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	ab 81       	ldd	r26, Y+3	; 0x03
    283e:	bc 81       	ldd	r27, Y+4	; 0x04
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 db 11 	call	0x23b6	; 0x23b6 <scheduler_set_timer_duration>
    2848:	80 e4       	ldi	r24, 0x40	; 64
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	20 e4       	ldi	r18, 0x40	; 64
    284e:	31 e0       	ldi	r19, 0x01	; 1
    2850:	f9 01       	movw	r30, r18
    2852:	22 81       	ldd	r18, Z+2	; 0x02
    2854:	21 60       	ori	r18, 0x01	; 1
    2856:	fc 01       	movw	r30, r24
    2858:	22 83       	std	Z+2, r18	; 0x02
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <scheduler_is_running>
    2860:	24 96       	adiw	r28, 0x04	; 4
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <scheduler_timeout_delete>:

void scheduler_timeout_delete(timer_struct_t *timer)
{
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	26 97       	sbiw	r28, 0x06	; 6
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	9e 83       	std	Y+6, r25	; 0x06
	if (scheduler_list_head == NULL)
    287e:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2882:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2886:	89 2b       	or	r24, r25
    2888:	09 f4       	brne	.+2      	; 0x288c <scheduler_timeout_delete+0x20>
    288a:	54 c0       	rjmp	.+168    	; 0x2934 <scheduler_timeout_delete+0xc8>
		return;

	// Guard in case we get interrupted, we cannot safely compare/search and get interrupted
	RTC.INTCTRL &= ~RTC_OVF_bm;
    288c:	80 e4       	ldi	r24, 0x40	; 64
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	20 e4       	ldi	r18, 0x40	; 64
    2892:	31 e0       	ldi	r19, 0x01	; 1
    2894:	f9 01       	movw	r30, r18
    2896:	22 81       	ldd	r18, Z+2	; 0x02
    2898:	2e 7f       	andi	r18, 0xFE	; 254
    289a:	fc 01       	movw	r30, r24
    289c:	22 83       	std	Z+2, r18	; 0x02

	// Special case, the head is the one we are deleting
	if (timer == scheduler_list_head) {
    289e:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    28a2:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    28a6:	2d 81       	ldd	r18, Y+5	; 0x05
    28a8:	3e 81       	ldd	r19, Y+6	; 0x06
    28aa:	28 17       	cp	r18, r24
    28ac:	39 07       	cpc	r19, r25
    28ae:	71 f4       	brne	.+28     	; 0x28cc <scheduler_timeout_delete+0x60>
		scheduler_list_head = scheduler_list_head->next; // Delete the head
    28b0:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    28b4:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    28b8:	fc 01       	movw	r30, r24
    28ba:	84 81       	ldd	r24, Z+4	; 0x04
    28bc:	95 81       	ldd	r25, Z+5	; 0x05
    28be:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <scheduler_list_head>
    28c2:	90 93 d2 28 	sts	0x28D2, r25	; 0x8028d2 <scheduler_list_head+0x1>
		scheduler_start_timer_at_head();                 // Start the new timer at the head
    28c6:	0e 94 b0 13 	call	0x2760	; 0x2760 <scheduler_start_timer_at_head>
    28ca:	35 c0       	rjmp	.+106    	; 0x2936 <scheduler_timeout_delete+0xca>
	} else {                                             // More than one timer in the list, search the list.
		timer_struct_t *find_timer = scheduler_list_head;
    28cc:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    28d0:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	9a 83       	std	Y+2, r25	; 0x02
		timer_struct_t *prev_timer = NULL;
    28d8:	1b 82       	std	Y+3, r1	; 0x03
    28da:	1c 82       	std	Y+4, r1	; 0x04
		while (find_timer != NULL) {
    28dc:	1d c0       	rjmp	.+58     	; 0x2918 <scheduler_timeout_delete+0xac>
			if (find_timer == timer) {
    28de:	29 81       	ldd	r18, Y+1	; 0x01
    28e0:	3a 81       	ldd	r19, Y+2	; 0x02
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	28 17       	cp	r18, r24
    28e8:	39 07       	cpc	r19, r25
    28ea:	59 f4       	brne	.+22     	; 0x2902 <scheduler_timeout_delete+0x96>
				prev_timer->next = find_timer->next;
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	fc 01       	movw	r30, r24
    28f2:	24 81       	ldd	r18, Z+4	; 0x04
    28f4:	35 81       	ldd	r19, Z+5	; 0x05
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	fc 01       	movw	r30, r24
    28fc:	24 83       	std	Z+4, r18	; 0x04
    28fe:	35 83       	std	Z+5, r19	; 0x05
				break;
    2900:	0f c0       	rjmp	.+30     	; 0x2920 <scheduler_timeout_delete+0xb4>
			}
			prev_timer = find_timer;
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	8b 83       	std	Y+3, r24	; 0x03
    2908:	9c 83       	std	Y+4, r25	; 0x04
			find_timer = find_timer->next;
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	fc 01       	movw	r30, r24
    2910:	84 81       	ldd	r24, Z+4	; 0x04
    2912:	95 81       	ldd	r25, Z+5	; 0x05
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	9a 83       	std	Y+2, r25	; 0x02
		scheduler_list_head = scheduler_list_head->next; // Delete the head
		scheduler_start_timer_at_head();                 // Start the new timer at the head
	} else {                                             // More than one timer in the list, search the list.
		timer_struct_t *find_timer = scheduler_list_head;
		timer_struct_t *prev_timer = NULL;
		while (find_timer != NULL) {
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	89 2b       	or	r24, r25
    291e:	f9 f6       	brne	.-66     	; 0x28de <scheduler_timeout_delete+0x72>
				break;
			}
			prev_timer = find_timer;
			find_timer = find_timer->next;
		}
		RTC.INTCTRL |= RTC_OVF_bm;
    2920:	80 e4       	ldi	r24, 0x40	; 64
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	20 e4       	ldi	r18, 0x40	; 64
    2926:	31 e0       	ldi	r19, 0x01	; 1
    2928:	f9 01       	movw	r30, r18
    292a:	22 81       	ldd	r18, Z+2	; 0x02
    292c:	21 60       	ori	r18, 0x01	; 1
    292e:	fc 01       	movw	r30, r24
    2930:	22 83       	std	Z+2, r18	; 0x02
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <scheduler_timeout_delete+0xca>
}

void scheduler_timeout_delete(timer_struct_t *timer)
{
	if (scheduler_list_head == NULL)
		return;
    2934:	00 00       	nop
			prev_timer = find_timer;
			find_timer = find_timer->next;
		}
		RTC.INTCTRL |= RTC_OVF_bm;
	}
}
    2936:	26 96       	adiw	r28, 0x06	; 6
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	08 95       	ret

00002942 <scheduler_enqueue_callback>:

inline void scheduler_enqueue_callback(timer_struct_t *timer)
{
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	00 d0       	rcall	.+0      	; 0x2948 <scheduler_enqueue_callback+0x6>
    2948:	00 d0       	rcall	.+0      	; 0x294a <scheduler_enqueue_callback+0x8>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	9c 83       	std	Y+4, r25	; 0x04
	timer_struct_t *tmp;
	timer->next = NULL;
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	fc 01       	movw	r30, r24
    2958:	14 82       	std	Z+4, r1	; 0x04
    295a:	15 82       	std	Z+5, r1	; 0x05

	// Special case for empty list
	if (scheduler_execute_queue_head == NULL) {
    295c:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <scheduler_execute_queue_head>
    2960:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <scheduler_execute_queue_head+0x1>
    2964:	89 2b       	or	r24, r25
    2966:	39 f4       	brne	.+14     	; 0x2976 <scheduler_enqueue_callback+0x34>
		scheduler_execute_queue_head = timer;
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	9c 81       	ldd	r25, Y+4	; 0x04
    296c:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <scheduler_execute_queue_head>
    2970:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <scheduler_execute_queue_head+0x1>
		return;
    2974:	1c c0       	rjmp	.+56     	; 0x29ae <scheduler_enqueue_callback+0x6c>
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = scheduler_execute_queue_head;
    2976:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <scheduler_execute_queue_head>
    297a:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <scheduler_execute_queue_head+0x1>
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	9a 83       	std	Y+2, r25	; 0x02
	while (tmp->next != NULL)
    2982:	07 c0       	rjmp	.+14     	; 0x2992 <scheduler_enqueue_callback+0x50>
		tmp = tmp->next;
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	fc 01       	movw	r30, r24
    298a:	84 81       	ldd	r24, Z+4	; 0x04
    298c:	95 81       	ldd	r25, Z+5	; 0x05
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	9a 83       	std	Y+2, r25	; 0x02
		return;
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = scheduler_execute_queue_head;
	while (tmp->next != NULL)
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	fc 01       	movw	r30, r24
    2998:	84 81       	ldd	r24, Z+4	; 0x04
    299a:	95 81       	ldd	r25, Z+5	; 0x05
    299c:	89 2b       	or	r24, r25
    299e:	91 f7       	brne	.-28     	; 0x2984 <scheduler_enqueue_callback+0x42>
		tmp = tmp->next;

	tmp->next = timer;
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	2b 81       	ldd	r18, Y+3	; 0x03
    29a6:	3c 81       	ldd	r19, Y+4	; 0x04
    29a8:	fc 01       	movw	r30, r24
    29aa:	24 83       	std	Z+4, r18	; 0x04
    29ac:	35 83       	std	Z+5, r19	; 0x05
}
    29ae:	24 96       	adiw	r28, 0x04	; 4
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <scheduler_timeout_call_next_callback>:

void scheduler_timeout_call_next_callback(void)
{
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	26 97       	sbiw	r28, 0x06	; 6
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	de bf       	out	0x3e, r29	; 62

	if (scheduler_execute_queue_head == NULL)
    29c8:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <scheduler_execute_queue_head>
    29cc:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <scheduler_execute_queue_head+0x1>
    29d0:	89 2b       	or	r24, r25
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <scheduler_timeout_call_next_callback+0x1c>
    29d4:	3c c0       	rjmp	.+120    	; 0x2a4e <scheduler_timeout_call_next_callback+0x94>
		return;

	// Critical section needed if scheduler_timeout_call_next_callback()
	// was called from polling loop, and not called from ISR.
	ENTER_CRITICAL(T);
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	0f 92       	push	r0
	timer_struct_t *callback_timer = scheduler_execute_queue_head;
    29dc:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <scheduler_execute_queue_head>
    29e0:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <scheduler_execute_queue_head+0x1>
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	9a 83       	std	Y+2, r25	; 0x02

	// Done, remove from list
	scheduler_execute_queue_head = scheduler_execute_queue_head->next;
    29e8:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <scheduler_execute_queue_head>
    29ec:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <scheduler_execute_queue_head+0x1>
    29f0:	fc 01       	movw	r30, r24
    29f2:	84 81       	ldd	r24, Z+4	; 0x04
    29f4:	95 81       	ldd	r25, Z+5	; 0x05
    29f6:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <scheduler_execute_queue_head>
    29fa:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <scheduler_execute_queue_head+0x1>

	EXIT_CRITICAL(T); // End critical section
    29fe:	0f 90       	pop	r0
    2a00:	0f be       	out	0x3f, r0	; 63

	absolutetime_t reschedule = callback_timer->callback_ptr(callback_timer->payload);
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	fc 01       	movw	r30, r24
    2a08:	20 81       	ld	r18, Z
    2a0a:	31 81       	ldd	r19, Z+1	; 0x01
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	fc 01       	movw	r30, r24
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	f9 01       	movw	r30, r18
    2a18:	09 95       	icall
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	8b 83       	std	Y+3, r24	; 0x03
    2a20:	9c 83       	std	Y+4, r25	; 0x04
    2a22:	ad 83       	std	Y+5, r26	; 0x05
    2a24:	be 83       	std	Y+6, r27	; 0x06

	// Do we have to reschedule it? If yes then add delta to absolute for reschedule
	if (reschedule) {
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	ad 81       	ldd	r26, Y+5	; 0x05
    2a2c:	be 81       	ldd	r27, Y+6	; 0x06
    2a2e:	89 2b       	or	r24, r25
    2a30:	8a 2b       	or	r24, r26
    2a32:	8b 2b       	or	r24, r27
    2a34:	69 f0       	breq	.+26     	; 0x2a50 <scheduler_timeout_call_next_callback+0x96>
		scheduler_timeout_create(callback_timer, reschedule);
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	ad 81       	ldd	r26, Y+5	; 0x05
    2a3c:	be 81       	ldd	r27, Y+6	; 0x06
    2a3e:	29 81       	ldd	r18, Y+1	; 0x01
    2a40:	3a 81       	ldd	r19, Y+2	; 0x02
    2a42:	ac 01       	movw	r20, r24
    2a44:	bd 01       	movw	r22, r26
    2a46:	c9 01       	movw	r24, r18
    2a48:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <scheduler_timeout_create>
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <scheduler_timeout_call_next_callback+0x96>

void scheduler_timeout_call_next_callback(void)
{

	if (scheduler_execute_queue_head == NULL)
		return;
    2a4e:	00 00       	nop

	// Do we have to reschedule it? If yes then add delta to absolute for reschedule
	if (reschedule) {
		scheduler_timeout_create(callback_timer, reschedule);
	}
}
    2a50:	26 96       	adiw	r28, 0x06	; 6
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	08 95       	ret

00002a5c <scheduler_timeout_create>:

void scheduler_timeout_create(timer_struct_t *timer, absolutetime_t timeout)
{
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	26 97       	sbiw	r28, 0x06	; 6
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	4b 83       	std	Y+3, r20	; 0x03
    2a70:	5c 83       	std	Y+4, r21	; 0x04
    2a72:	6d 83       	std	Y+5, r22	; 0x05
    2a74:	7e 83       	std	Y+6, r23	; 0x06
	RTC.INTCTRL &= ~RTC_OVF_bm;
    2a76:	80 e4       	ldi	r24, 0x40	; 64
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	20 e4       	ldi	r18, 0x40	; 64
    2a7c:	31 e0       	ldi	r19, 0x01	; 1
    2a7e:	f9 01       	movw	r30, r18
    2a80:	22 81       	ldd	r18, Z+2	; 0x02
    2a82:	2e 7f       	andi	r18, 0xFE	; 254
    2a84:	fc 01       	movw	r30, r24
    2a86:	22 83       	std	Z+2, r18	; 0x02

	timer->absolute_time = scheduler_make_absolute(timeout);
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	ad 81       	ldd	r26, Y+5	; 0x05
    2a8e:	be 81       	ldd	r27, Y+6	; 0x06
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 24 12 	call	0x2448	; 0x2448 <scheduler_make_absolute>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	29 81       	ldd	r18, Y+1	; 0x01
    2a9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2aa0:	f9 01       	movw	r30, r18
    2aa2:	86 83       	std	Z+6, r24	; 0x06
    2aa4:	97 83       	std	Z+7, r25	; 0x07
    2aa6:	a0 87       	std	Z+8, r26	; 0x08
    2aa8:	b1 87       	std	Z+9, r27	; 0x09

	// We only have to start the timer at head if the insert was at the head
	if (scheduler_sorted_insert(timer)) {
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <scheduler_sorted_insert>
    2ab2:	88 23       	and	r24, r24
    2ab4:	19 f0       	breq	.+6      	; 0x2abc <scheduler_timeout_create+0x60>
		scheduler_start_timer_at_head();
    2ab6:	0e 94 b0 13 	call	0x2760	; 0x2760 <scheduler_start_timer_at_head>
	} else {
		if (scheduler_is_running)
			RTC.INTCTRL |= RTC_OVF_bm;
	}
}
    2aba:	0d c0       	rjmp	.+26     	; 0x2ad6 <scheduler_timeout_create+0x7a>

	// We only have to start the timer at head if the insert was at the head
	if (scheduler_sorted_insert(timer)) {
		scheduler_start_timer_at_head();
	} else {
		if (scheduler_is_running)
    2abc:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <scheduler_is_running>
    2ac0:	88 23       	and	r24, r24
    2ac2:	49 f0       	breq	.+18     	; 0x2ad6 <scheduler_timeout_create+0x7a>
			RTC.INTCTRL |= RTC_OVF_bm;
    2ac4:	80 e4       	ldi	r24, 0x40	; 64
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	20 e4       	ldi	r18, 0x40	; 64
    2aca:	31 e0       	ldi	r19, 0x01	; 1
    2acc:	f9 01       	movw	r30, r18
    2ace:	22 81       	ldd	r18, Z+2	; 0x02
    2ad0:	21 60       	ori	r18, 0x01	; 1
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	22 83       	std	Z+2, r18	; 0x02
	}
}
    2ad6:	00 00       	nop
    2ad8:	26 96       	adiw	r28, 0x06	; 6
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret

00002ae4 <__vector_3>:

// NOTE: assumes the callback completes before the next timer tick
ISR(RTC_CNT_vect)
{
    2ae4:	1f 92       	push	r1
    2ae6:	0f 92       	push	r0
    2ae8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2aec:	0f 92       	push	r0
    2aee:	11 24       	eor	r1, r1
    2af0:	2f 93       	push	r18
    2af2:	3f 93       	push	r19
    2af4:	4f 93       	push	r20
    2af6:	5f 93       	push	r21
    2af8:	6f 93       	push	r22
    2afa:	7f 93       	push	r23
    2afc:	8f 93       	push	r24
    2afe:	9f 93       	push	r25
    2b00:	af 93       	push	r26
    2b02:	bf 93       	push	r27
    2b04:	ef 93       	push	r30
    2b06:	ff 93       	push	r31
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <__vector_3+0x2a>
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
	timer_struct_t *next                    = scheduler_list_head->next;
    2b12:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2b16:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	84 81       	ldd	r24, Z+4	; 0x04
    2b1e:	95 81       	ldd	r25, Z+5	; 0x05
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	9a 83       	std	Y+2, r25	; 0x02
	scheduler_absolute_time_of_last_timeout = scheduler_list_head->absolute_time;
    2b24:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2b28:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	86 81       	ldd	r24, Z+6	; 0x06
    2b30:	97 81       	ldd	r25, Z+7	; 0x07
    2b32:	a0 85       	ldd	r26, Z+8	; 0x08
    2b34:	b1 85       	ldd	r27, Z+9	; 0x09
    2b36:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <scheduler_absolute_time_of_last_timeout>
    2b3a:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <scheduler_absolute_time_of_last_timeout+0x1>
    2b3e:	a0 93 d7 28 	sts	0x28D7, r26	; 0x8028d7 <scheduler_absolute_time_of_last_timeout+0x2>
    2b42:	b0 93 d8 28 	sts	0x28D8, r27	; 0x8028d8 <scheduler_absolute_time_of_last_timeout+0x3>
	scheduler_last_timer_load               = 0;
    2b46:	10 92 d9 28 	sts	0x28D9, r1	; 0x8028d9 <scheduler_last_timer_load>
    2b4a:	10 92 da 28 	sts	0x28DA, r1	; 0x8028da <scheduler_last_timer_load+0x1>
    2b4e:	10 92 db 28 	sts	0x28DB, r1	; 0x8028db <scheduler_last_timer_load+0x2>
    2b52:	10 92 dc 28 	sts	0x28DC, r1	; 0x8028dc <scheduler_last_timer_load+0x3>

	if (scheduler_list_head != &scheduler_dummy)
    2b56:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2b5a:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2b5e:	84 55       	subi	r24, 0x54	; 84
    2b60:	98 42       	sbci	r25, 0x28	; 40
    2b62:	31 f0       	breq	.+12     	; 0x2b70 <__vector_3+0x8c>
		scheduler_enqueue_callback(scheduler_list_head);
    2b64:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <scheduler_list_head>
    2b68:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <scheduler_list_head+0x1>
    2b6c:	0e 94 a1 14 	call	0x2942	; 0x2942 <scheduler_enqueue_callback>

	// Remove expired timer for the list now (it is always the one at the head)
	scheduler_list_head = next;
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <scheduler_list_head>
    2b78:	90 93 d2 28 	sts	0x28D2, r25	; 0x8028d2 <scheduler_list_head+0x1>

	scheduler_start_timer_at_head();
    2b7c:	0e 94 b0 13 	call	0x2760	; 0x2760 <scheduler_start_timer_at_head>

	RTC.INTFLAGS = RTC_OVF_bm;
    2b80:	80 e4       	ldi	r24, 0x40	; 64
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	21 e0       	ldi	r18, 0x01	; 1
    2b86:	fc 01       	movw	r30, r24
    2b88:	23 83       	std	Z+3, r18	; 0x03
}
    2b8a:	00 00       	nop
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	ff 91       	pop	r31
    2b96:	ef 91       	pop	r30
    2b98:	bf 91       	pop	r27
    2b9a:	af 91       	pop	r26
    2b9c:	9f 91       	pop	r25
    2b9e:	8f 91       	pop	r24
    2ba0:	7f 91       	pop	r23
    2ba2:	6f 91       	pop	r22
    2ba4:	5f 91       	pop	r21
    2ba6:	4f 91       	pop	r20
    2ba8:	3f 91       	pop	r19
    2baa:	2f 91       	pop	r18
    2bac:	0f 90       	pop	r0
    2bae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2bb2:	0f 90       	pop	r0
    2bb4:	1f 90       	pop	r1
    2bb6:	18 95       	reti

00002bb8 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
		;
	return USART1.RXDATAL;
}
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	80 e2       	ldi	r24, 0x20	; 32
    2bc2:	98 e0       	ldi	r25, 0x08	; 8
    2bc4:	2c e2       	ldi	r18, 0x2C	; 44
    2bc6:	32 e0       	ldi	r19, 0x02	; 2
    2bc8:	fc 01       	movw	r30, r24
    2bca:	20 87       	std	Z+8, r18	; 0x08
    2bcc:	31 87       	std	Z+9, r19	; 0x09
    2bce:	80 e2       	ldi	r24, 0x20	; 32
    2bd0:	98 e0       	ldi	r25, 0x08	; 8
    2bd2:	20 ec       	ldi	r18, 0xC0	; 192
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	26 83       	std	Z+6, r18	; 0x06
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	08 95       	ret

00002be0 <USART_1_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	1f 92       	push	r1
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	89 83       	std	Y+1, r24	; 0x01
	while (!(USART1.STATUS & USART_DREIF_bm))
    2bec:	00 00       	nop
    2bee:	80 e2       	ldi	r24, 0x20	; 32
    2bf0:	98 e0       	ldi	r25, 0x08	; 8
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	84 81       	ldd	r24, Z+4	; 0x04
    2bf6:	88 2f       	mov	r24, r24
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	80 72       	andi	r24, 0x20	; 32
    2bfc:	99 27       	eor	r25, r25
    2bfe:	89 2b       	or	r24, r25
    2c00:	b1 f3       	breq	.-20     	; 0x2bee <USART_1_write+0xe>
		;
	USART1.TXDATAL = data;
    2c02:	80 e2       	ldi	r24, 0x20	; 32
    2c04:	98 e0       	ldi	r25, 0x08	; 8
    2c06:	29 81       	ldd	r18, Y+1	; 0x01
    2c08:	fc 01       	movw	r30, r24
    2c0a:	22 83       	std	Z+2, r18	; 0x02
}
    2c0c:	00 00       	nop
    2c0e:	0f 90       	pop	r0
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <PORTA_set_pin_dir>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	00 d0       	rcall	.+0      	; 0x2c1c <PORTA_set_pin_dir+0x6>
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	89 83       	std	Y+1, r24	; 0x01
    2c22:	6a 83       	std	Y+2, r22	; 0x02
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	81 30       	cpi	r24, 0x01	; 1
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	e1 f0       	breq	.+56     	; 0x2c68 <PORTA_set_pin_dir+0x52>
    2c30:	82 30       	cpi	r24, 0x02	; 2
    2c32:	91 05       	cpc	r25, r1
    2c34:	71 f1       	breq	.+92     	; 0x2c92 <PORTA_set_pin_dir+0x7c>
    2c36:	89 2b       	or	r24, r25
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <PORTA_set_pin_dir+0x26>
    2c3a:	3b c0       	rjmp	.+118    	; 0x2cb2 <PORTA_set_pin_dir+0x9c>
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	fc 01       	movw	r30, r24
    2c46:	80 81       	ld	r24, Z
    2c48:	68 2f       	mov	r22, r24
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <PORTA_set_pin_dir+0x44>
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	4a 95       	dec	r20
    2c5c:	e2 f7       	brpl	.-8      	; 0x2c56 <PORTA_set_pin_dir+0x40>
    2c5e:	80 95       	com	r24
    2c60:	86 23       	and	r24, r22
    2c62:	f9 01       	movw	r30, r18
    2c64:	80 83       	st	Z, r24
    2c66:	25 c0       	rjmp	.+74     	; 0x2cb2 <PORTA_set_pin_dir+0x9c>
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	fc 01       	movw	r30, r24
    2c72:	80 81       	ld	r24, Z
    2c74:	68 2f       	mov	r22, r24
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	48 2f       	mov	r20, r24
    2c7a:	50 e0       	ldi	r21, 0x00	; 0
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <PORTA_set_pin_dir+0x70>
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	4a 95       	dec	r20
    2c88:	e2 f7       	brpl	.-8      	; 0x2c82 <PORTA_set_pin_dir+0x6c>
    2c8a:	86 2b       	or	r24, r22
    2c8c:	f9 01       	movw	r30, r18
    2c8e:	80 83       	st	Z, r24
    2c90:	10 c0       	rjmp	.+32     	; 0x2cb2 <PORTA_set_pin_dir+0x9c>
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	88 2f       	mov	r24, r24
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	80 5f       	subi	r24, 0xF0	; 240
    2c9a:	9b 4f       	sbci	r25, 0xFB	; 251
    2c9c:	29 81       	ldd	r18, Y+1	; 0x01
    2c9e:	22 2f       	mov	r18, r18
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	20 5f       	subi	r18, 0xF0	; 240
    2ca4:	3b 4f       	sbci	r19, 0xFB	; 251
    2ca6:	f9 01       	movw	r30, r18
    2ca8:	20 81       	ld	r18, Z
    2caa:	28 60       	ori	r18, 0x08	; 8
    2cac:	fc 01       	movw	r30, r24
    2cae:	20 83       	st	Z, r18
    2cb0:	00 00       	nop
    2cb2:	00 00       	nop
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <PORTA_set_pin_level>:
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <PORTA_set_pin_level+0x6>
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	6a 83       	std	Y+2, r22	; 0x02
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	88 23       	and	r24, r24
    2cd0:	a9 f0       	breq	.+42     	; 0x2cfc <PORTA_set_pin_level+0x3e>
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	fc 01       	movw	r30, r24
    2cdc:	81 81       	ldd	r24, Z+1	; 0x01
    2cde:	68 2f       	mov	r22, r24
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	48 2f       	mov	r20, r24
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <PORTA_set_pin_level+0x32>
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	4a 95       	dec	r20
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <PORTA_set_pin_level+0x2e>
    2cf4:	86 2b       	or	r24, r22
    2cf6:	f9 01       	movw	r30, r18
    2cf8:	81 83       	std	Z+1, r24	; 0x01
    2cfa:	15 c0       	rjmp	.+42     	; 0x2d26 <PORTA_set_pin_level+0x68>
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	fc 01       	movw	r30, r24
    2d06:	81 81       	ldd	r24, Z+1	; 0x01
    2d08:	68 2f       	mov	r22, r24
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	48 2f       	mov	r20, r24
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <PORTA_set_pin_level+0x5c>
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	4a 95       	dec	r20
    2d1c:	e2 f7       	brpl	.-8      	; 0x2d16 <PORTA_set_pin_level+0x58>
    2d1e:	80 95       	com	r24
    2d20:	86 23       	and	r24, r22
    2d22:	f9 01       	movw	r30, r18
    2d24:	81 83       	std	Z+1, r24	; 0x01
    2d26:	00 00       	nop
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <PORTC_set_pin_pull_mode>:
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <PORTC_set_pin_pull_mode+0x6>
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <PORTC_set_pin_pull_mode+0x8>
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	8b 83       	std	Y+3, r24	; 0x03
    2d40:	6c 83       	std	Y+4, r22	; 0x04
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	88 2f       	mov	r24, r24
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	80 5b       	subi	r24, 0xB0	; 176
    2d4a:	9b 4f       	sbci	r25, 0xFB	; 251
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	8c 81       	ldd	r24, Y+4	; 0x04
    2d52:	81 30       	cpi	r24, 0x01	; 1
    2d54:	59 f4       	brne	.+22     	; 0x2d6c <PORTC_set_pin_pull_mode+0x3a>
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	28 2f       	mov	r18, r24
    2d60:	28 60       	ori	r18, 0x08	; 8
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	9a 81       	ldd	r25, Y+2	; 0x02
    2d66:	fc 01       	movw	r30, r24
    2d68:	20 83       	st	Z, r18
    2d6a:	0d c0       	rjmp	.+26     	; 0x2d86 <PORTC_set_pin_pull_mode+0x54>
    2d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6e:	88 23       	and	r24, r24
    2d70:	51 f4       	brne	.+20     	; 0x2d86 <PORTC_set_pin_pull_mode+0x54>
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
    2d76:	fc 01       	movw	r30, r24
    2d78:	80 81       	ld	r24, Z
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	27 7f       	andi	r18, 0xF7	; 247
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	fc 01       	movw	r30, r24
    2d84:	20 83       	st	Z, r18
    2d86:	00 00       	nop
    2d88:	24 96       	adiw	r28, 0x04	; 4
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	08 95       	ret

00002d94 <PORTC_pin_set_isc>:
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <PORTC_pin_set_isc+0x6>
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <PORTC_pin_set_isc+0x8>
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	8b 83       	std	Y+3, r24	; 0x03
    2da2:	6c 83       	std	Y+4, r22	; 0x04
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	80 5b       	subi	r24, 0xB0	; 176
    2dac:	9b 4f       	sbci	r25, 0xFB	; 251
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	fc 01       	movw	r30, r24
    2db8:	80 81       	ld	r24, Z
    2dba:	98 2f       	mov	r25, r24
    2dbc:	98 7f       	andi	r25, 0xF8	; 248
    2dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc0:	89 2b       	or	r24, r25
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	fc 01       	movw	r30, r24
    2dca:	20 83       	st	Z, r18
    2dcc:	00 00       	nop
    2dce:	24 96       	adiw	r28, 0x04	; 4
    2dd0:	cd bf       	out	0x3d, r28	; 61
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	08 95       	ret

00002dda <PORTC_set_pin_dir>:
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <PORTC_set_pin_dir+0x6>
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	6a 83       	std	Y+2, r22	; 0x02
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	88 2f       	mov	r24, r24
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	91 05       	cpc	r25, r1
    2df2:	e1 f0       	breq	.+56     	; 0x2e2c <PORTC_set_pin_dir+0x52>
    2df4:	82 30       	cpi	r24, 0x02	; 2
    2df6:	91 05       	cpc	r25, r1
    2df8:	71 f1       	breq	.+92     	; 0x2e56 <PORTC_set_pin_dir+0x7c>
    2dfa:	89 2b       	or	r24, r25
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <PORTC_set_pin_dir+0x26>
    2dfe:	3b c0       	rjmp	.+118    	; 0x2e76 <PORTC_set_pin_dir+0x9c>
    2e00:	88 e0       	ldi	r24, 0x08	; 8
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	28 e0       	ldi	r18, 0x08	; 8
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	f9 01       	movw	r30, r18
    2e0a:	20 81       	ld	r18, Z
    2e0c:	62 2f       	mov	r22, r18
    2e0e:	29 81       	ldd	r18, Y+1	; 0x01
    2e10:	42 2f       	mov	r20, r18
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	21 e0       	ldi	r18, 0x01	; 1
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <PORTC_set_pin_dir+0x44>
    2e1a:	22 0f       	add	r18, r18
    2e1c:	33 1f       	adc	r19, r19
    2e1e:	4a 95       	dec	r20
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <PORTC_set_pin_dir+0x40>
    2e22:	20 95       	com	r18
    2e24:	26 23       	and	r18, r22
    2e26:	fc 01       	movw	r30, r24
    2e28:	20 83       	st	Z, r18
    2e2a:	25 c0       	rjmp	.+74     	; 0x2e76 <PORTC_set_pin_dir+0x9c>
    2e2c:	88 e0       	ldi	r24, 0x08	; 8
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	28 e0       	ldi	r18, 0x08	; 8
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	f9 01       	movw	r30, r18
    2e36:	20 81       	ld	r18, Z
    2e38:	62 2f       	mov	r22, r18
    2e3a:	29 81       	ldd	r18, Y+1	; 0x01
    2e3c:	42 2f       	mov	r20, r18
    2e3e:	50 e0       	ldi	r21, 0x00	; 0
    2e40:	21 e0       	ldi	r18, 0x01	; 1
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <PORTC_set_pin_dir+0x70>
    2e46:	22 0f       	add	r18, r18
    2e48:	33 1f       	adc	r19, r19
    2e4a:	4a 95       	dec	r20
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <PORTC_set_pin_dir+0x6c>
    2e4e:	26 2b       	or	r18, r22
    2e50:	fc 01       	movw	r30, r24
    2e52:	20 83       	st	Z, r18
    2e54:	10 c0       	rjmp	.+32     	; 0x2e76 <PORTC_set_pin_dir+0x9c>
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	88 2f       	mov	r24, r24
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	80 5b       	subi	r24, 0xB0	; 176
    2e5e:	9b 4f       	sbci	r25, 0xFB	; 251
    2e60:	29 81       	ldd	r18, Y+1	; 0x01
    2e62:	22 2f       	mov	r18, r18
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	20 5b       	subi	r18, 0xB0	; 176
    2e68:	3b 4f       	sbci	r19, 0xFB	; 251
    2e6a:	f9 01       	movw	r30, r18
    2e6c:	20 81       	ld	r18, Z
    2e6e:	28 60       	ori	r18, 0x08	; 8
    2e70:	fc 01       	movw	r30, r24
    2e72:	20 83       	st	Z, r18
    2e74:	00 00       	nop
    2e76:	00 00       	nop
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <PORTC_set_pin_level>:
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <PORTC_set_pin_level+0x6>
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	89 83       	std	Y+1, r24	; 0x01
    2e8e:	6a 83       	std	Y+2, r22	; 0x02
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	88 23       	and	r24, r24
    2e94:	a9 f0       	breq	.+42     	; 0x2ec0 <PORTC_set_pin_level+0x3e>
    2e96:	88 e0       	ldi	r24, 0x08	; 8
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	28 e0       	ldi	r18, 0x08	; 8
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	f9 01       	movw	r30, r18
    2ea0:	21 81       	ldd	r18, Z+1	; 0x01
    2ea2:	62 2f       	mov	r22, r18
    2ea4:	29 81       	ldd	r18, Y+1	; 0x01
    2ea6:	42 2f       	mov	r20, r18
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	21 e0       	ldi	r18, 0x01	; 1
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <PORTC_set_pin_level+0x32>
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	4a 95       	dec	r20
    2eb6:	e2 f7       	brpl	.-8      	; 0x2eb0 <PORTC_set_pin_level+0x2e>
    2eb8:	26 2b       	or	r18, r22
    2eba:	fc 01       	movw	r30, r24
    2ebc:	21 83       	std	Z+1, r18	; 0x01
    2ebe:	15 c0       	rjmp	.+42     	; 0x2eea <PORTC_set_pin_level+0x68>
    2ec0:	88 e0       	ldi	r24, 0x08	; 8
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	28 e0       	ldi	r18, 0x08	; 8
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	f9 01       	movw	r30, r18
    2eca:	21 81       	ldd	r18, Z+1	; 0x01
    2ecc:	62 2f       	mov	r22, r18
    2ece:	29 81       	ldd	r18, Y+1	; 0x01
    2ed0:	42 2f       	mov	r20, r18
    2ed2:	50 e0       	ldi	r21, 0x00	; 0
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <PORTC_set_pin_level+0x5c>
    2eda:	22 0f       	add	r18, r18
    2edc:	33 1f       	adc	r19, r19
    2ede:	4a 95       	dec	r20
    2ee0:	e2 f7       	brpl	.-8      	; 0x2eda <PORTC_set_pin_level+0x58>
    2ee2:	20 95       	com	r18
    2ee4:	26 23       	and	r18, r22
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	21 83       	std	Z+1, r18	; 0x01
    2eea:	00 00       	nop
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	08 95       	ret

00002ef6 <PORTC_get_pin_level>:
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	1f 92       	push	r1
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	88 e0       	ldi	r24, 0x08	; 8
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	fc 01       	movw	r30, r24
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	48 2f       	mov	r20, r24
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <PORTC_get_pin_level+0x28>
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	4a 95       	dec	r20
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <PORTC_get_pin_level+0x24>
    2f22:	82 23       	and	r24, r18
    2f24:	93 23       	and	r25, r19
    2f26:	21 e0       	ldi	r18, 0x01	; 1
    2f28:	89 2b       	or	r24, r25
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <PORTC_get_pin_level+0x38>
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	82 2f       	mov	r24, r18
    2f30:	0f 90       	pop	r0
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	08 95       	ret

00002f38 <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	1f 92       	push	r1
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	69 81       	ldd	r22, Y+1	; 0x01
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <PORTA_set_pin_dir>
    2f4c:	00 00       	nop
    2f4e:	0f 90       	pop	r0
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	08 95       	ret

00002f56 <CONF_WIFI_M2M_RESET_PIN_set_level>:
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	1f 92       	push	r1
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	89 83       	std	Y+1, r24	; 0x01
    2f62:	69 81       	ldd	r22, Y+1	; 0x01
    2f64:	82 e0       	ldi	r24, 0x02	; 2
    2f66:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <PORTA_set_pin_level>
    2f6a:	00 00       	nop
    2f6c:	0f 90       	pop	r0
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	08 95       	ret

00002f74 <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	1f 92       	push	r1
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	69 81       	ldd	r22, Y+1	; 0x01
    2f82:	83 e0       	ldi	r24, 0x03	; 3
    2f84:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <PORTA_set_pin_dir>
    2f88:	00 00       	nop
    2f8a:	0f 90       	pop	r0
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	08 95       	ret

00002f92 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	1f 92       	push	r1
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	69 81       	ldd	r22, Y+1	; 0x01
    2fa0:	86 e0       	ldi	r24, 0x06	; 6
    2fa2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <PORTC_set_pin_pull_mode>
    2fa6:	00 00       	nop
    2fa8:	0f 90       	pop	r0
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	08 95       	ret

00002fb0 <CONF_WIFI_M2M_INT_PIN_set_dir>:
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	1f 92       	push	r1
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	69 81       	ldd	r22, Y+1	; 0x01
    2fbe:	86 e0       	ldi	r24, 0x06	; 6
    2fc0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <PORTC_set_pin_dir>
    2fc4:	00 00       	nop
    2fc6:	0f 90       	pop	r0
    2fc8:	df 91       	pop	r29
    2fca:	cf 91       	pop	r28
    2fcc:	08 95       	ret

00002fce <CONF_WIFI_M2M_INT_PIN_set_isc>:
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	1f 92       	push	r1
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	89 83       	std	Y+1, r24	; 0x01
    2fda:	69 81       	ldd	r22, Y+1	; 0x01
    2fdc:	86 e0       	ldi	r24, 0x06	; 6
    2fde:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <PORTC_pin_set_isc>
    2fe2:	00 00       	nop
    2fe4:	0f 90       	pop	r0
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

00002fec <CONF_WIFI_M2M_INT_PIN_get_level>:
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	86 e0       	ldi	r24, 0x06	; 6
    2ff6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <PORTC_get_pin_level>
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	08 95       	ret

00003000 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	1f 92       	push	r1
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	69 81       	ldd	r22, Y+1	; 0x01
    300e:	87 e0       	ldi	r24, 0x07	; 7
    3010:	0e 94 ed 16 	call	0x2dda	; 0x2dda <PORTC_set_pin_dir>
    3014:	00 00       	nop
    3016:	0f 90       	pop	r0
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	08 95       	ret

0000301e <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	1f 92       	push	r1
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	69 81       	ldd	r22, Y+1	; 0x01
    302c:	87 e0       	ldi	r24, 0x07	; 7
    302e:	0e 94 41 17 	call	0x2e82	; 0x2e82 <PORTC_set_pin_level>
    3032:	00 00       	nop
    3034:	0f 90       	pop	r0
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	08 95       	ret

0000303c <__vector_24>:
    303c:	1f 92       	push	r1
    303e:	0f 92       	push	r0
    3040:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3044:	0f 92       	push	r0
    3046:	11 24       	eor	r1, r1
    3048:	2f 93       	push	r18
    304a:	3f 93       	push	r19
    304c:	4f 93       	push	r20
    304e:	5f 93       	push	r21
    3050:	6f 93       	push	r22
    3052:	7f 93       	push	r23
    3054:	8f 93       	push	r24
    3056:	9f 93       	push	r25
    3058:	af 93       	push	r26
    305a:	bf 93       	push	r27
    305c:	ef 93       	push	r30
    305e:	ff 93       	push	r31
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	0e 94 f6 17 	call	0x2fec	; 0x2fec <CONF_WIFI_M2M_INT_PIN_get_level>
    306c:	98 2f       	mov	r25, r24
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	89 27       	eor	r24, r25
    3072:	88 23       	and	r24, r24
    3074:	61 f0       	breq	.+24     	; 0x308e <__vector_24+0x52>
    3076:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <gpfIsr>
    307a:	90 91 df 28 	lds	r25, 0x28DF	; 0x8028df <gpfIsr+0x1>
    307e:	89 2b       	or	r24, r25
    3080:	31 f0       	breq	.+12     	; 0x308e <__vector_24+0x52>
    3082:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <gpfIsr>
    3086:	90 91 df 28 	lds	r25, 0x28DF	; 0x8028df <gpfIsr+0x1>
    308a:	fc 01       	movw	r30, r24
    308c:	09 95       	icall
    308e:	8b e0       	ldi	r24, 0x0B	; 11
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	20 ec       	ldi	r18, 0xC0	; 192
    3094:	fc 01       	movw	r30, r24
    3096:	20 83       	st	Z, r18
    3098:	00 00       	nop
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	ff 91       	pop	r31
    30a0:	ef 91       	pop	r30
    30a2:	bf 91       	pop	r27
    30a4:	af 91       	pop	r26
    30a6:	9f 91       	pop	r25
    30a8:	8f 91       	pop	r24
    30aa:	7f 91       	pop	r23
    30ac:	6f 91       	pop	r22
    30ae:	5f 91       	pop	r21
    30b0:	4f 91       	pop	r20
    30b2:	3f 91       	pop	r19
    30b4:	2f 91       	pop	r18
    30b6:	0f 90       	pop	r0
    30b8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    30bc:	0f 90       	pop	r0
    30be:	1f 90       	pop	r1
    30c0:	18 95       	reti

000030c2 <init_chip_pins>:
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <CONF_WIFI_M2M_RESET_PIN_set_dir>
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	0e 94 00 18 	call	0x3000	; 0x3000 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <CONF_WIFI_M2M_WAKE_PIN_set_dir>
    30dc:	00 00       	nop
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	08 95       	ret

000030e4 <nm_bsp_init>:
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	10 92 de 28 	sts	0x28DE, r1	; 0x8028de <gpfIsr>
    30f0:	10 92 df 28 	sts	0x28DF, r1	; 0x8028df <gpfIsr+0x1>
    30f4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <init_chip_pins>
    30f8:	0e 94 83 18 	call	0x3106	; 0x3106 <nm_bsp_reset>
    30fc:	78 94       	sei
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	08 95       	ret

00003106 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(false);
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	0e 94 0f 18 	call	0x301e	; 0x301e <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
// 	asm volatile ("nop");
// 	PORTB_set_pin_level(5,true);
	nm_bsp_sleep(1);
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
// 	PORTB_set_pin_level(5,false);
// 	asm volatile ("nop");

	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 0f 18 	call	0x301e	; 0x301e <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	nm_bsp_sleep(10);
    312c:	6a e0       	ldi	r22, 0x0A	; 10
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>

	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, true);
	CONF_WIFI_M2M_RESET_PIN_set_level(true);
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
	//nm_bsp_sleep(100);
}
    313e:	00 00       	nop
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	08 95       	ret

00003146 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	62 97       	sbiw	r28, 0x12	; 18
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	6f 87       	std	Y+15, r22	; 0x0f
    3156:	78 8b       	std	Y+16, r23	; 0x10
    3158:	89 8b       	std	Y+17, r24	; 0x11
    315a:	9a 8b       	std	Y+18, r25	; 0x12
	while (u32TimeMsec--) {
    315c:	72 c0       	rjmp	.+228    	; 0x3242 <nm_bsp_sleep+0xfc>
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	a0 e8       	ldi	r26, 0x80	; 128
    3164:	bf e3       	ldi	r27, 0x3F	; 63
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	ab 83       	std	Y+3, r26	; 0x03
    316c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e4       	ldi	r19, 0x40	; 64
    3172:	4c e1       	ldi	r20, 0x1C	; 28
    3174:	55 e4       	ldi	r21, 0x45	; 69
    3176:	69 81       	ldd	r22, Y+1	; 0x01
    3178:	7a 81       	ldd	r23, Y+2	; 0x02
    317a:	8b 81       	ldd	r24, Y+3	; 0x03
    317c:	9c 81       	ldd	r25, Y+4	; 0x04
    317e:	0e 94 c8 41 	call	0x8390	; 0x8390 <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	8d 83       	std	Y+5, r24	; 0x05
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	af 83       	std	Y+7, r26	; 0x07
    318c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	6d 81       	ldd	r22, Y+5	; 0x05
    3198:	7e 81       	ldd	r23, Y+6	; 0x06
    319a:	8f 81       	ldd	r24, Y+7	; 0x07
    319c:	98 85       	ldd	r25, Y+8	; 0x08
    319e:	0e 94 42 41 	call	0x8284	; 0x8284 <__cmpsf2>
    31a2:	88 23       	and	r24, r24
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <nm_bsp_sleep+0x6a>
		__ticks = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	89 87       	std	Y+9, r24	; 0x09
    31ac:	9a 87       	std	Y+10, r25	; 0x0a
    31ae:	3f c0       	rjmp	.+126    	; 0x322e <nm_bsp_sleep+0xe8>
	else if (__tmp > 65535)
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	3f ef       	ldi	r19, 0xFF	; 255
    31b4:	4f e7       	ldi	r20, 0x7F	; 127
    31b6:	57 e4       	ldi	r21, 0x47	; 71
    31b8:	6d 81       	ldd	r22, Y+5	; 0x05
    31ba:	7e 81       	ldd	r23, Y+6	; 0x06
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	0e 94 c3 41 	call	0x8386	; 0x8386 <__gesf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	4c f5       	brge	.+82     	; 0x321a <nm_bsp_sleep+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e2       	ldi	r20, 0x20	; 32
    31ce:	51 e4       	ldi	r21, 0x41	; 65
    31d0:	69 81       	ldd	r22, Y+1	; 0x01
    31d2:	7a 81       	ldd	r23, Y+2	; 0x02
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	9c 81       	ldd	r25, Y+4	; 0x04
    31d8:	0e 94 c8 41 	call	0x8390	; 0x8390 <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 47 41 	call	0x828e	; 0x828e <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	89 87       	std	Y+9, r24	; 0x09
    31ee:	9a 87       	std	Y+10, r25	; 0x0a
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <nm_bsp_sleep+0xca>
    31f2:	8a ef       	ldi	r24, 0xFA	; 250
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	8b 87       	std	Y+11, r24	; 0x0b
    31f8:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    31fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <nm_bsp_sleep+0xb8>
    3202:	8b 87       	std	Y+11, r24	; 0x0b
    3204:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	89 85       	ldd	r24, Y+9	; 0x09
    3208:	9a 85       	ldd	r25, Y+10	; 0x0a
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	89 87       	std	Y+9, r24	; 0x09
    320e:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	9a 85       	ldd	r25, Y+10	; 0x0a
    3214:	89 2b       	or	r24, r25
    3216:	69 f7       	brne	.-38     	; 0x31f2 <nm_bsp_sleep+0xac>
    3218:	14 c0       	rjmp	.+40     	; 0x3242 <nm_bsp_sleep+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	6d 81       	ldd	r22, Y+5	; 0x05
    321c:	7e 81       	ldd	r23, Y+6	; 0x06
    321e:	8f 81       	ldd	r24, Y+7	; 0x07
    3220:	98 85       	ldd	r25, Y+8	; 0x08
    3222:	0e 94 47 41 	call	0x828e	; 0x828e <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	89 87       	std	Y+9, r24	; 0x09
    322c:	9a 87       	std	Y+10, r25	; 0x0a
    322e:	89 85       	ldd	r24, Y+9	; 0x09
    3230:	9a 85       	ldd	r25, Y+10	; 0x0a
    3232:	8d 87       	std	Y+13, r24	; 0x0d
    3234:	9e 87       	std	Y+14, r25	; 0x0e
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	9e 85       	ldd	r25, Y+14	; 0x0e
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <nm_bsp_sleep+0xf4>
    323e:	8d 87       	std	Y+13, r24	; 0x0d
    3240:	9e 87       	std	Y+14, r25	; 0x0e
    3242:	8f 85       	ldd	r24, Y+15	; 0x0f
    3244:	98 89       	ldd	r25, Y+16	; 0x10
    3246:	a9 89       	ldd	r26, Y+17	; 0x11
    3248:	ba 89       	ldd	r27, Y+18	; 0x12
    324a:	9c 01       	movw	r18, r24
    324c:	ad 01       	movw	r20, r26
    324e:	21 50       	subi	r18, 0x01	; 1
    3250:	31 09       	sbc	r19, r1
    3252:	41 09       	sbc	r20, r1
    3254:	51 09       	sbc	r21, r1
    3256:	2f 87       	std	Y+15, r18	; 0x0f
    3258:	38 8b       	std	Y+16, r19	; 0x10
    325a:	49 8b       	std	Y+17, r20	; 0x11
    325c:	5a 8b       	std	Y+18, r21	; 0x12
    325e:	89 2b       	or	r24, r25
    3260:	8a 2b       	or	r24, r26
    3262:	8b 2b       	or	r24, r27
    3264:	09 f0       	breq	.+2      	; 0x3268 <nm_bsp_sleep+0x122>
    3266:	7b cf       	rjmp	.-266    	; 0x315e <nm_bsp_sleep+0x18>
		_delay_ms(1);
	}
}
    3268:	00 00       	nop
    326a:	62 96       	adiw	r28, 0x12	; 18
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	08 95       	ret

00003276 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	00 d0       	rcall	.+0      	; 0x327c <nm_bsp_register_isr+0x6>
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	9a 83       	std	Y+2, r25	; 0x02
	gpfIsr = pfIsr;
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <gpfIsr>
    328c:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <gpfIsr+0x1>

	//ioport_configure_pin(CONF_WIFI_M2M_INT_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	CONF_WIFI_M2M_INT_PIN_set_dir(PORT_DIR_IN);
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <CONF_WIFI_M2M_INT_PIN_set_dir>
	CONF_WIFI_M2M_INT_PIN_set_pull_mode(PORT_PULL_UP);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    329c:	83 e0       	ldi	r24, 0x03	; 3
    329e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <CONF_WIFI_M2M_INT_PIN_set_isc>
	
	/* Enable interrupt */
// 	CONF_WIFI_M2M_INT_INTMASK_reg = CONF_WIFI_M2M_INT_INTFLAG_Msk;
// 	CONF_WIFI_M2M_INT_INTCTRL_reg = CONF_WIFI_M2M_INT_INTCTRL_Msk;
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    32a2:	83 e0       	ldi	r24, 0x03	; 3
    32a4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <CONF_WIFI_M2M_INT_PIN_set_isc>
	//ENABLE_INTERRUPTS();
	sei();
    32a8:	78 94       	sei
}
    32aa:	00 00       	nop
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

000032b6 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	1f 92       	push	r1
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	89 83       	std	Y+1, r24	; 0x01
	if (u8Enable)
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	88 23       	and	r24, r24
    32c6:	21 f0       	breq	.+8      	; 0x32d0 <nm_bsp_interrupt_ctrl+0x1a>
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg |= CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    32c8:	83 e0       	ldi	r24, 0x03	; 3
    32ca:	0e 94 e7 17 	call	0x2fce	; 0x2fce <CONF_WIFI_M2M_INT_PIN_set_isc>
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
	}
}
    32ce:	03 c0       	rjmp	.+6      	; 0x32d6 <nm_bsp_interrupt_ctrl+0x20>
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
	}
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	0e 94 e7 17 	call	0x2fce	; 0x2fce <CONF_WIFI_M2M_INT_PIN_set_isc>
	}
}
    32d6:	00 00       	nop
    32d8:	0f 90       	pop	r0
    32da:	df 91       	pop	r29
    32dc:	cf 91       	pop	r28
    32de:	08 95       	ret

000032e0 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    32e0:	cf 93       	push	r28
    32e2:	df 93       	push	r29
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <PORTA_set_pin_dir+0x6>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	88 2f       	mov	r24, r24
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	81 30       	cpi	r24, 0x01	; 1
    32f6:	91 05       	cpc	r25, r1
    32f8:	e1 f0       	breq	.+56     	; 0x3332 <PORTA_set_pin_dir+0x52>
    32fa:	82 30       	cpi	r24, 0x02	; 2
    32fc:	91 05       	cpc	r25, r1
    32fe:	71 f1       	breq	.+92     	; 0x335c <PORTA_set_pin_dir+0x7c>
    3300:	89 2b       	or	r24, r25
    3302:	09 f0       	breq	.+2      	; 0x3306 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    3304:	3b c0       	rjmp	.+118    	; 0x337c <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	fc 01       	movw	r30, r24
    3310:	80 81       	ld	r24, Z
    3312:	68 2f       	mov	r22, r24
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	48 2f       	mov	r20, r24
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <PORTA_set_pin_dir+0x44>
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	4a 95       	dec	r20
    3326:	e2 f7       	brpl	.-8      	; 0x3320 <PORTA_set_pin_dir+0x40>
    3328:	80 95       	com	r24
    332a:	86 23       	and	r24, r22
    332c:	f9 01       	movw	r30, r18
    332e:	80 83       	st	Z, r24
		break;
    3330:	25 c0       	rjmp	.+74     	; 0x337c <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	fc 01       	movw	r30, r24
    333c:	80 81       	ld	r24, Z
    333e:	68 2f       	mov	r22, r24
    3340:	89 81       	ldd	r24, Y+1	; 0x01
    3342:	48 2f       	mov	r20, r24
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	02 c0       	rjmp	.+4      	; 0x3350 <PORTA_set_pin_dir+0x70>
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	4a 95       	dec	r20
    3352:	e2 f7       	brpl	.-8      	; 0x334c <PORTA_set_pin_dir+0x6c>
    3354:	86 2b       	or	r24, r22
    3356:	f9 01       	movw	r30, r18
    3358:	80 83       	st	Z, r24
		break;
    335a:	10 c0       	rjmp	.+32     	; 0x337c <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	88 2f       	mov	r24, r24
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	80 5f       	subi	r24, 0xF0	; 240
    3364:	9b 4f       	sbci	r25, 0xFB	; 251
    3366:	29 81       	ldd	r18, Y+1	; 0x01
    3368:	22 2f       	mov	r18, r18
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	20 5f       	subi	r18, 0xF0	; 240
    336e:	3b 4f       	sbci	r19, 0xFB	; 251
    3370:	f9 01       	movw	r30, r18
    3372:	20 81       	ld	r18, Z
    3374:	28 60       	ori	r18, 0x08	; 8
    3376:	fc 01       	movw	r30, r24
    3378:	20 83       	st	Z, r18
		break;
    337a:	00 00       	nop
	default:
		break;
	}
}
    337c:	00 00       	nop
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	00 d0       	rcall	.+0      	; 0x338e <PORTA_set_pin_level+0x6>
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	88 23       	and	r24, r24
    339a:	a9 f0       	breq	.+42     	; 0x33c6 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	fc 01       	movw	r30, r24
    33a6:	81 81       	ldd	r24, Z+1	; 0x01
    33a8:	68 2f       	mov	r22, r24
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	48 2f       	mov	r20, r24
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <PORTA_set_pin_level+0x32>
    33b6:	88 0f       	add	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	4a 95       	dec	r20
    33bc:	e2 f7       	brpl	.-8      	; 0x33b6 <PORTA_set_pin_level+0x2e>
    33be:	86 2b       	or	r24, r22
    33c0:	f9 01       	movw	r30, r18
    33c2:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    33c4:	15 c0       	rjmp	.+42     	; 0x33f0 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	fc 01       	movw	r30, r24
    33d0:	81 81       	ldd	r24, Z+1	; 0x01
    33d2:	68 2f       	mov	r22, r24
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	48 2f       	mov	r20, r24
    33d8:	50 e0       	ldi	r21, 0x00	; 0
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <PORTA_set_pin_level+0x5c>
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	4a 95       	dec	r20
    33e6:	e2 f7       	brpl	.-8      	; 0x33e0 <PORTA_set_pin_level+0x58>
    33e8:	80 95       	com	r24
    33ea:	86 23       	and	r24, r22
    33ec:	f9 01       	movw	r30, r18
    33ee:	81 83       	std	Z+1, r24	; 0x01
	}
}
    33f0:	00 00       	nop
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	08 95       	ret

000033fc <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(const enum port_dir dir)
{
    33fc:	cf 93       	push	r28
    33fe:	df 93       	push	r29
    3400:	1f 92       	push	r1
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    3408:	69 81       	ldd	r22, Y+1	; 0x01
    340a:	84 e0       	ldi	r24, 0x04	; 4
    340c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <PORTA_set_pin_dir>
}
    3410:	00 00       	nop
    3412:	0f 90       	pop	r0
    3414:	df 91       	pop	r29
    3416:	cf 91       	pop	r28
    3418:	08 95       	ret

0000341a <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(const bool level)
{
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	1f 92       	push	r1
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
    3426:	69 81       	ldd	r22, Y+1	; 0x01
    3428:	84 e0       	ldi	r24, 0x04	; 4
    342a:	0e 94 c4 19 	call	0x3388	; 0x3388 <PORTA_set_pin_level>
}
    342e:	00 00       	nop
    3430:	0f 90       	pop	r0
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	08 95       	ret

00003438 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(const enum port_dir dir)
{
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	1f 92       	push	r1
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(5, dir);
    3444:	69 81       	ldd	r22, Y+1	; 0x01
    3446:	85 e0       	ldi	r24, 0x05	; 5
    3448:	0e 94 70 19 	call	0x32e0	; 0x32e0 <PORTA_set_pin_dir>
}
    344c:	00 00       	nop
    344e:	0f 90       	pop	r0
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	08 95       	ret

00003456 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(const enum port_dir dir)
{
    3456:	cf 93       	push	r28
    3458:	df 93       	push	r29
    345a:	1f 92       	push	r1
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(6, dir);
    3462:	69 81       	ldd	r22, Y+1	; 0x01
    3464:	86 e0       	ldi	r24, 0x06	; 6
    3466:	0e 94 70 19 	call	0x32e0	; 0x32e0 <PORTA_set_pin_dir>
}
    346a:	00 00       	nop
    346c:	0f 90       	pop	r0
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	08 95       	ret

00003474 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_level(const bool level)
{
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	1f 92       	push	r1
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(6, level);
    3480:	69 81       	ldd	r22, Y+1	; 0x01
    3482:	86 e0       	ldi	r24, 0x06	; 6
    3484:	0e 94 c4 19 	call	0x3388	; 0x3388 <PORTA_set_pin_level>
}
    3488:	00 00       	nop
    348a:	0f 90       	pop	r0
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	08 95       	ret

00003492 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_dir(const enum port_dir dir)
{
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	1f 92       	push	r1
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(7, dir);
    349e:	69 81       	ldd	r22, Y+1	; 0x01
    34a0:	87 e0       	ldi	r24, 0x07	; 7
    34a2:	0e 94 70 19 	call	0x32e0	; 0x32e0 <PORTA_set_pin_dir>
}
    34a6:	00 00       	nop
    34a8:	0f 90       	pop	r0
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	08 95       	ret

000034b0 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_level(const bool level)
{
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	1f 92       	push	r1
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(7, level);
    34bc:	69 81       	ldd	r22, Y+1	; 0x01
    34be:	87 e0       	ldi	r24, 0x07	; 7
    34c0:	0e 94 c4 19 	call	0x3388	; 0x3388 <PORTA_set_pin_level>
}
    34c4:	00 00       	nop
    34c6:	0f 90       	pop	r0
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	08 95       	ret

000034ce <spi_rw>:
}
#endif

#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	2d 97       	sbiw	r28, 0x0d	; 13
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	88 87       	std	Y+8, r24	; 0x08
    34de:	99 87       	std	Y+9, r25	; 0x09
    34e0:	6a 87       	std	Y+10, r22	; 0x0a
    34e2:	7b 87       	std	Y+11, r23	; 0x0b
    34e4:	4c 87       	std	Y+12, r20	; 0x0c
    34e6:	5d 87       	std	Y+13, r21	; 0x0d
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
    34e8:	1f 82       	std	Y+7, r1	; 0x07
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    34ea:	19 82       	std	Y+1, r1	; 0x01
    34ec:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t txd_data = 0;
    34ee:	1b 82       	std	Y+3, r1	; 0x03
    34f0:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t rxd_data = 0;
    34f2:	1d 82       	std	Y+5, r1	; 0x05
    34f4:	1e 82       	std	Y+6, r1	; 0x06

	if (!pu8Mosi) {
    34f6:	88 85       	ldd	r24, Y+8	; 0x08
    34f8:	99 85       	ldd	r25, Y+9	; 0x09
    34fa:	89 2b       	or	r24, r25
    34fc:	39 f4       	brne	.+14     	; 0x350c <spi_rw+0x3e>
		pu8Mosi = &u8Dummy;
    34fe:	ce 01       	movw	r24, r28
    3500:	07 96       	adiw	r24, 0x07	; 7
    3502:	88 87       	std	Y+8, r24	; 0x08
    3504:	99 87       	std	Y+9, r25	; 0x09
		u8SkipMosi = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	89 83       	std	Y+1, r24	; 0x01
    350a:	0d c0       	rjmp	.+26     	; 0x3526 <spi_rw+0x58>
	}
	else if(!pu8Miso) {
    350c:	8a 85       	ldd	r24, Y+10	; 0x0a
    350e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3510:	89 2b       	or	r24, r25
    3512:	39 f4       	brne	.+14     	; 0x3522 <spi_rw+0x54>
		pu8Miso = &u8Dummy;
    3514:	ce 01       	movw	r24, r28
    3516:	07 96       	adiw	r24, 0x07	; 7
    3518:	8a 87       	std	Y+10, r24	; 0x0a
    351a:	9b 87       	std	Y+11, r25	; 0x0b
		u8SkipMiso = 1;
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	8a 83       	std	Y+2, r24	; 0x02
    3520:	02 c0       	rjmp	.+4      	; 0x3526 <spi_rw+0x58>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    3522:	8a ef       	ldi	r24, 0xFA	; 250
    3524:	34 c0       	rjmp	.+104    	; 0x358e <spi_rw+0xc0>
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	while (u16Sz) {
    352c:	28 c0       	rjmp	.+80     	; 0x357e <spi_rw+0xb0>
		txd_data = *pu8Mosi;
    352e:	88 85       	ldd	r24, Y+8	; 0x08
    3530:	99 85       	ldd	r25, Y+9	; 0x09
    3532:	fc 01       	movw	r30, r24
    3534:	80 81       	ld	r24, Z
    3536:	88 2f       	mov	r24, r24
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	8b 83       	std	Y+3, r24	; 0x03
    353c:	9c 83       	std	Y+4, r25	; 0x04
//		spi_read_single((uint8_t*)(&rxd_data));
		//SPI_0_read_block((uint8_t*)(&rxd_data), 1);
		
		
		
		rxd_data = SPI_0_exchange_byte(txd_data);		
    353e:	8b 81       	ldd	r24, Y+3	; 0x03
    3540:	9c 81       	ldd	r25, Y+4	; 0x04
    3542:	0e 94 72 11 	call	0x22e4	; 0x22e4 <SPI_0_exchange_byte>
    3546:	8d 83       	std	Y+5, r24	; 0x05
    3548:	9e 83       	std	Y+6, r25	; 0x06
		
		*pu8Miso = rxd_data;
    354a:	2d 81       	ldd	r18, Y+5	; 0x05
    354c:	8a 85       	ldd	r24, Y+10	; 0x0a
    354e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3550:	fc 01       	movw	r30, r24
    3552:	20 83       	st	Z, r18

		u16Sz--;
    3554:	8c 85       	ldd	r24, Y+12	; 0x0c
    3556:	9d 85       	ldd	r25, Y+13	; 0x0d
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	8c 87       	std	Y+12, r24	; 0x0c
    355c:	9d 87       	std	Y+13, r25	; 0x0d
		if (!u8SkipMiso)
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	88 23       	and	r24, r24
    3562:	29 f4       	brne	.+10     	; 0x356e <spi_rw+0xa0>
			pu8Miso++;
    3564:	8a 85       	ldd	r24, Y+10	; 0x0a
    3566:	9b 85       	ldd	r25, Y+11	; 0x0b
    3568:	01 96       	adiw	r24, 0x01	; 1
    356a:	8a 87       	std	Y+10, r24	; 0x0a
    356c:	9b 87       	std	Y+11, r25	; 0x0b
		if (!u8SkipMosi)
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	88 23       	and	r24, r24
    3572:	29 f4       	brne	.+10     	; 0x357e <spi_rw+0xb0>
			pu8Mosi++;
    3574:	88 85       	ldd	r24, Y+8	; 0x08
    3576:	99 85       	ldd	r25, Y+9	; 0x09
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	88 87       	std	Y+8, r24	; 0x08
    357c:	99 87       	std	Y+9, r25	; 0x09
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
    357e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3580:	9d 85       	ldd	r25, Y+13	; 0x0d
    3582:	89 2b       	or	r24, r25
    3584:	a1 f6       	brne	.-88     	; 0x352e <spi_rw+0x60>
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	//spi_deselect_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>

	return M2M_SUCCESS;
    358c:	80 e0       	ldi	r24, 0x00	; 0
}
    358e:	2d 96       	adiw	r28, 0x0d	; 13
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	df 91       	pop	r29
    3596:	cf 91       	pop	r28
    3598:	08 95       	ret

0000359a <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 volatile nm_bus_init(void *pvinit)
{
    359a:	cf 93       	push	r28
    359c:	df 93       	push	r29
    359e:	00 d0       	rcall	.+0      	; 0x35a0 <nm_bus_init+0x6>
    35a0:	1f 92       	push	r1
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	8a 83       	std	Y+2, r24	; 0x02
    35a8:	9b 83       	std	Y+3, r25	; 0x03
	sint8 result = M2M_SUCCESS;
    35aa:	19 82       	std	Y+1, r1	; 0x01
#ifdef CONF_WINC_USE_I2C
		/* Not implemented */
#elif defined CONF_WINC_USE_SPI
	/* Configure pins */
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_CS_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	0e 94 49 1a 	call	0x3492	; 0x3492 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MOSI_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(PORT_DIR_OUT);
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	0e 94 fe 19 	call	0x33fc	; 0x33fc <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(true);
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	0e 94 0d 1a 	call	0x341a	; 0x341a <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MISO_PIN, IOPORT_DIR_INPUT);
	CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(PORT_DIR_IN);
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	0e 94 1c 1a 	call	0x3438	; 0x3438 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_SCK_PIN, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(PORT_DIR_OUT);
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	0e 94 2b 1a 	call	0x3456	; 0x3456 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
	CONF_WIFI_M2M_SPI_SCK_PIN_set_level(false);
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	0e 94 3a 1a 	call	0x3474	; 0x3474 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	 
	/* Configure the SPI master. */
	//spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    35d6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <SPI_0_init>
	
	//spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);
	
	/* Enable the SPI master. */
	//spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    35da:	0e 94 61 11 	call	0x22c2	; 0x22c2 <SPI_0_enable>

	nm_bsp_reset();
    35de:	0e 94 83 18 	call	0x3106	; 0x3106 <nm_bsp_reset>
	nm_bsp_sleep(1);
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	70 e0       	ldi	r23, 0x00	; 0
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
#endif
	return result;
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    35f0:	23 96       	adiw	r28, 0x03	; 3
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	df 91       	pop	r29
    35f8:	cf 91       	pop	r28
    35fa:	08 95       	ret

000035fc <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    35fc:	cf 93       	push	r28
    35fe:	df 93       	push	r29
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	26 97       	sbiw	r28, 0x06	; 6
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	8c 83       	std	Y+4, r24	; 0x04
    360c:	6d 83       	std	Y+5, r22	; 0x05
    360e:	7e 83       	std	Y+6, r23	; 0x06
	sint8 s8Ret = 0;
    3610:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Cmd)
    3612:	8c 81       	ldd	r24, Y+4	; 0x04
    3614:	88 2f       	mov	r24, r24
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	03 97       	sbiw	r24, 0x03	; 3
    361a:	c1 f4       	brne	.+48     	; 0x364c <nm_bus_ioctl+0x50>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	8a 83       	std	Y+2, r24	; 0x02
    3622:	9b 83       	std	Y+3, r25	; 0x03
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	9b 81       	ldd	r25, Y+3	; 0x03
    3628:	fc 01       	movw	r30, r24
    362a:	44 81       	ldd	r20, Z+4	; 0x04
    362c:	55 81       	ldd	r21, Z+5	; 0x05
    362e:	8a 81       	ldd	r24, Y+2	; 0x02
    3630:	9b 81       	ldd	r25, Y+3	; 0x03
    3632:	fc 01       	movw	r30, r24
    3634:	22 81       	ldd	r18, Z+2	; 0x02
    3636:	33 81       	ldd	r19, Z+3	; 0x03
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	9b 81       	ldd	r25, Y+3	; 0x03
    363c:	fc 01       	movw	r30, r24
    363e:	80 81       	ld	r24, Z
    3640:	91 81       	ldd	r25, Z+1	; 0x01
    3642:	b9 01       	movw	r22, r18
    3644:	0e 94 67 1a 	call	0x34ce	; 0x34ce <spi_rw>
    3648:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    364a:	03 c0       	rjmp	.+6      	; 0x3652 <nm_bus_ioctl+0x56>
#endif
		default:
			s8Ret = -1;
    364c:	8f ef       	ldi	r24, 0xFF	; 255
    364e:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR("invalide ioclt cmd\n");
			break;
    3650:	00 00       	nop
	}

	return s8Ret;
    3652:	89 81       	ldd	r24, Y+1	; 0x01
}
    3654:	26 96       	adiw	r28, 0x06	; 6
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	08 95       	ret

00003660 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
	return M2M_SUCCESS;
    3668:	80 e0       	ldi	r24, 0x00	; 0
}
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    366e:	08 95       	ret

00003670 <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	28 97       	sbiw	r28, 0x08	; 8
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	89 83       	std	Y+1, r24	; 0x01
    3680:	9a 83       	std	Y+2, r25	; 0x02
    3682:	6b 83       	std	Y+3, r22	; 0x03
    3684:	7c 83       	std	Y+4, r23	; 0x04
    3686:	2d 83       	std	Y+5, r18	; 0x05
    3688:	3e 83       	std	Y+6, r19	; 0x06
    368a:	4f 83       	std	Y+7, r20	; 0x07
    368c:	58 87       	std	Y+8, r21	; 0x08
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	af 81       	ldd	r26, Y+7	; 0x07
    3694:	b8 85       	ldd	r27, Y+8	; 0x08
    3696:	89 2b       	or	r24, r25
    3698:	8a 2b       	or	r24, r26
    369a:	8b 2b       	or	r24, r27
    369c:	31 f1       	breq	.+76     	; 0x36ea <m2m_memcpy+0x7a>
    369e:	8b 81       	ldd	r24, Y+3	; 0x03
    36a0:	9c 81       	ldd	r25, Y+4	; 0x04
    36a2:	fc 01       	movw	r30, r24
    36a4:	20 81       	ld	r18, Z
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	9a 81       	ldd	r25, Y+2	; 0x02
    36aa:	fc 01       	movw	r30, r24
    36ac:	20 83       	st	Z, r18
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	9a 81       	ldd	r25, Y+2	; 0x02
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	9a 83       	std	Y+2, r25	; 0x02
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	01 96       	adiw	r24, 0x01	; 1
    36be:	8b 83       	std	Y+3, r24	; 0x03
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	af 81       	ldd	r26, Y+7	; 0x07
    36c8:	b8 85       	ldd	r27, Y+8	; 0x08
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	a1 09       	sbc	r26, r1
    36ce:	b1 09       	sbc	r27, r1
    36d0:	8d 83       	std	Y+5, r24	; 0x05
    36d2:	9e 83       	std	Y+6, r25	; 0x06
    36d4:	af 83       	std	Y+7, r26	; 0x07
    36d6:	b8 87       	std	Y+8, r27	; 0x08
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	af 81       	ldd	r26, Y+7	; 0x07
    36de:	b8 85       	ldd	r27, Y+8	; 0x08
    36e0:	89 2b       	or	r24, r25
    36e2:	8a 2b       	or	r24, r26
    36e4:	8b 2b       	or	r24, r27
    36e6:	d9 f6       	brne	.-74     	; 0x369e <m2m_memcpy+0x2e>
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <m2m_memcpy+0x7c>
    36ea:	00 00       	nop
    36ec:	28 96       	adiw	r28, 0x08	; 8
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	08 95       	ret

000036f8 <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
    3700:	27 97       	sbiw	r28, 0x07	; 7
    3702:	cd bf       	out	0x3d, r28	; 61
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	89 83       	std	Y+1, r24	; 0x01
    3708:	9a 83       	std	Y+2, r25	; 0x02
    370a:	6b 83       	std	Y+3, r22	; 0x03
    370c:	2c 83       	std	Y+4, r18	; 0x04
    370e:	3d 83       	std	Y+5, r19	; 0x05
    3710:	4e 83       	std	Y+6, r20	; 0x06
    3712:	5f 83       	std	Y+7, r21	; 0x07
	if(sz == 0) return;
    3714:	8c 81       	ldd	r24, Y+4	; 0x04
    3716:	9d 81       	ldd	r25, Y+5	; 0x05
    3718:	ae 81       	ldd	r26, Y+6	; 0x06
    371a:	bf 81       	ldd	r27, Y+7	; 0x07
    371c:	89 2b       	or	r24, r25
    371e:	8a 2b       	or	r24, r26
    3720:	8b 2b       	or	r24, r27
    3722:	f1 f0       	breq	.+60     	; 0x3760 <m2m_memset+0x68>
	do
	{
		*pBuf = val;
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	9a 81       	ldd	r25, Y+2	; 0x02
    3728:	2b 81       	ldd	r18, Y+3	; 0x03
    372a:	fc 01       	movw	r30, r24
    372c:	20 83       	st	Z, r18
		pBuf++;
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	9a 81       	ldd	r25, Y+2	; 0x02
    3732:	01 96       	adiw	r24, 0x01	; 1
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	9a 83       	std	Y+2, r25	; 0x02
	}while(--sz);
    3738:	8c 81       	ldd	r24, Y+4	; 0x04
    373a:	9d 81       	ldd	r25, Y+5	; 0x05
    373c:	ae 81       	ldd	r26, Y+6	; 0x06
    373e:	bf 81       	ldd	r27, Y+7	; 0x07
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	a1 09       	sbc	r26, r1
    3744:	b1 09       	sbc	r27, r1
    3746:	8c 83       	std	Y+4, r24	; 0x04
    3748:	9d 83       	std	Y+5, r25	; 0x05
    374a:	ae 83       	std	Y+6, r26	; 0x06
    374c:	bf 83       	std	Y+7, r27	; 0x07
    374e:	8c 81       	ldd	r24, Y+4	; 0x04
    3750:	9d 81       	ldd	r25, Y+5	; 0x05
    3752:	ae 81       	ldd	r26, Y+6	; 0x06
    3754:	bf 81       	ldd	r27, Y+7	; 0x07
    3756:	89 2b       	or	r24, r25
    3758:	8a 2b       	or	r24, r26
    375a:	8b 2b       	or	r24, r27
    375c:	19 f7       	brne	.-58     	; 0x3724 <m2m_memset+0x2c>
    375e:	01 c0       	rjmp	.+2      	; 0x3762 <m2m_memset+0x6a>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    3760:	00 00       	nop
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    3762:	27 96       	adiw	r28, 0x07	; 7
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	08 95       	ret

0000376e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	00 d0       	rcall	.+0      	; 0x3774 <m2m_strlen+0x6>
    3774:	00 d0       	rcall	.+0      	; 0x3776 <m2m_strlen+0x8>
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	9c 83       	std	Y+4, r25	; 0x04
	uint16	u16StrLen = 0;
    377e:	19 82       	std	Y+1, r1	; 0x01
    3780:	1a 82       	std	Y+2, r1	; 0x02
	while(*pcStr)
    3782:	0a c0       	rjmp	.+20     	; 0x3798 <m2m_strlen+0x2a>
	{
		u16StrLen ++;
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	9a 83       	std	Y+2, r25	; 0x02
		pcStr++;
    378e:	8b 81       	ldd	r24, Y+3	; 0x03
    3790:	9c 81       	ldd	r25, Y+4	; 0x04
    3792:	01 96       	adiw	r24, 0x01	; 1
    3794:	8b 83       	std	Y+3, r24	; 0x03
    3796:	9c 83       	std	Y+4, r25	; 0x04
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    3798:	8b 81       	ldd	r24, Y+3	; 0x03
    379a:	9c 81       	ldd	r25, Y+4	; 0x04
    379c:	fc 01       	movw	r30, r24
    379e:	80 81       	ld	r24, Z
    37a0:	88 23       	and	r24, r24
    37a2:	81 f7       	brne	.-32     	; 0x3784 <m2m_strlen+0x16>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    37a8:	24 96       	adiw	r28, 0x04	; 4
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	08 95       	ret

000037b4 <isr>:
{
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
	return ret;
}
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	80 91 d9 29 	lds	r24, 0x29D9	; 0x8029d9 <gstrHifCxt+0x3>
    37c0:	8f 5f       	subi	r24, 0xFF	; 255
    37c2:	80 93 d9 29 	sts	0x29D9, r24	; 0x8029d9 <gstrHifCxt+0x3>
    37c6:	00 00       	nop
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	08 95       	ret

000037ce <hif_set_rx_done>:
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	25 97       	sbiw	r28, 0x05	; 5
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	19 82       	std	Y+1, r1	; 0x01
    37de:	10 92 d8 29 	sts	0x29D8, r1	; 0x8029d8 <gstrHifCxt+0x2>
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <nm_bsp_interrupt_ctrl>
    37e8:	ce 01       	movw	r24, r28
    37ea:	02 96       	adiw	r24, 0x02	; 2
    37ec:	ac 01       	movw	r20, r24
    37ee:	60 e7       	ldi	r22, 0x70	; 112
    37f0:	70 e1       	ldi	r23, 0x10	; 16
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    37fa:	89 83       	std	Y+1, r24	; 0x01
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	88 23       	and	r24, r24
    3800:	b9 f4       	brne	.+46     	; 0x3830 <hif_set_rx_done+0x62>
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	9b 81       	ldd	r25, Y+3	; 0x03
    3806:	ac 81       	ldd	r26, Y+4	; 0x04
    3808:	bd 81       	ldd	r27, Y+5	; 0x05
    380a:	82 60       	ori	r24, 0x02	; 2
    380c:	8a 83       	std	Y+2, r24	; 0x02
    380e:	9b 83       	std	Y+3, r25	; 0x03
    3810:	ac 83       	std	Y+4, r26	; 0x04
    3812:	bd 83       	std	Y+5, r27	; 0x05
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	ac 81       	ldd	r26, Y+4	; 0x04
    381a:	bd 81       	ldd	r27, Y+5	; 0x05
    381c:	9c 01       	movw	r18, r24
    381e:	ad 01       	movw	r20, r26
    3820:	60 e7       	ldi	r22, 0x70	; 112
    3822:	70 e1       	ldi	r23, 0x10	; 16
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    382c:	89 83       	std	Y+1, r24	; 0x01
    382e:	01 c0       	rjmp	.+2      	; 0x3832 <hif_set_rx_done+0x64>
    3830:	00 00       	nop
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	25 96       	adiw	r28, 0x05	; 5
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	df 91       	pop	r29
    383c:	cf 91       	pop	r28
    383e:	08 95       	ret

00003840 <m2m_hif_cb>:
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	27 97       	sbiw	r28, 0x07	; 7
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	6a 83       	std	Y+2, r22	; 0x02
    3852:	7b 83       	std	Y+3, r23	; 0x03
    3854:	2c 83       	std	Y+4, r18	; 0x04
    3856:	3d 83       	std	Y+5, r19	; 0x05
    3858:	4e 83       	std	Y+6, r20	; 0x06
    385a:	5f 83       	std	Y+7, r21	; 0x07
    385c:	00 00       	nop
    385e:	27 96       	adiw	r28, 0x07	; 7
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	08 95       	ret

0000386a <hif_chip_wake>:
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	1f 92       	push	r1
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	19 82       	std	Y+1, r1	; 0x01
    3876:	80 91 d8 29 	lds	r24, 0x29D8	; 0x8029d8 <gstrHifCxt+0x2>
    387a:	88 23       	and	r24, r24
    387c:	11 f0       	breq	.+4      	; 0x3882 <hif_chip_wake+0x18>
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	16 c0       	rjmp	.+44     	; 0x38ae <hif_chip_wake+0x44>
    3882:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <gstrHifCxt+0x1>
    3886:	88 23       	and	r24, r24
    3888:	51 f4       	brne	.+20     	; 0x389e <hif_chip_wake+0x34>
    388a:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <gstrHifCxt>
    388e:	88 23       	and	r24, r24
    3890:	31 f0       	breq	.+12     	; 0x389e <hif_chip_wake+0x34>
    3892:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <chip_wake>
    3896:	89 83       	std	Y+1, r24	; 0x01
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	88 23       	and	r24, r24
    389c:	31 f4       	brne	.+12     	; 0x38aa <hif_chip_wake+0x40>
    389e:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <gstrHifCxt+0x1>
    38a2:	8f 5f       	subi	r24, 0xFF	; 255
    38a4:	80 93 d7 29 	sts	0x29D7, r24	; 0x8029d7 <gstrHifCxt+0x1>
    38a8:	01 c0       	rjmp	.+2      	; 0x38ac <hif_chip_wake+0x42>
    38aa:	00 00       	nop
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	0f 90       	pop	r0
    38b0:	df 91       	pop	r29
    38b2:	cf 91       	pop	r28
    38b4:	08 95       	ret

000038b6 <hif_chip_sleep_sc>:
    38b6:	cf 93       	push	r28
    38b8:	df 93       	push	r29
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
    38be:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <gstrHifCxt+0x1>
    38c2:	88 23       	and	r24, r24
    38c4:	29 f0       	breq	.+10     	; 0x38d0 <hif_chip_sleep_sc+0x1a>
    38c6:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <gstrHifCxt+0x1>
    38ca:	81 50       	subi	r24, 0x01	; 1
    38cc:	80 93 d7 29 	sts	0x29D7, r24	; 0x8029d7 <gstrHifCxt+0x1>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	08 95       	ret

000038d8 <hif_chip_sleep>:
    38d8:	cf 93       	push	r28
    38da:	df 93       	push	r29
    38dc:	1f 92       	push	r1
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	19 82       	std	Y+1, r1	; 0x01
    38e4:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <gstrHifCxt+0x1>
    38e8:	88 23       	and	r24, r24
    38ea:	29 f0       	breq	.+10     	; 0x38f6 <hif_chip_sleep+0x1e>
    38ec:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <gstrHifCxt+0x1>
    38f0:	81 50       	subi	r24, 0x01	; 1
    38f2:	80 93 d7 29 	sts	0x29D7, r24	; 0x8029d7 <gstrHifCxt+0x1>
    38f6:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <gstrHifCxt+0x1>
    38fa:	88 23       	and	r24, r24
    38fc:	39 f4       	brne	.+14     	; 0x390c <hif_chip_sleep+0x34>
    38fe:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <gstrHifCxt>
    3902:	88 23       	and	r24, r24
    3904:	19 f0       	breq	.+6      	; 0x390c <hif_chip_sleep+0x34>
    3906:	0e 94 4f 28 	call	0x509e	; 0x509e <chip_sleep>
    390a:	89 83       	std	Y+1, r24	; 0x01
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	0f 90       	pop	r0
    3910:	df 91       	pop	r29
    3912:	cf 91       	pop	r28
    3914:	08 95       	ret

00003916 <hif_init>:
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	00 d0       	rcall	.+0      	; 0x391c <hif_init+0x6>
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	9a 83       	std	Y+2, r25	; 0x02
    3924:	2a e1       	ldi	r18, 0x1A	; 26
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	50 e0       	ldi	r21, 0x00	; 0
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	86 ed       	ldi	r24, 0xD6	; 214
    3930:	99 e2       	ldi	r25, 0x29	; 41
    3932:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <m2m_memset>
    3936:	8a ed       	ldi	r24, 0xDA	; 218
    3938:	9b e1       	ldi	r25, 0x1B	; 27
    393a:	0e 94 3b 19 	call	0x3276	; 0x3276 <nm_bsp_register_isr>
    393e:	60 e2       	ldi	r22, 0x20	; 32
    3940:	7c e1       	ldi	r23, 0x1C	; 28
    3942:	83 e0       	ldi	r24, 0x03	; 3
    3944:	0e 94 1e 21 	call	0x423c	; 0x423c <hif_register_cb>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    3954:	cf 92       	push	r12
    3956:	df 92       	push	r13
    3958:	ef 92       	push	r14
    395a:	ff 92       	push	r15
    395c:	0f 93       	push	r16
    395e:	1f 93       	push	r17
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	6f 97       	sbiw	r28, 0x1f	; 31
    396a:	cd bf       	out	0x3d, r28	; 61
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	8c 8b       	std	Y+20, r24	; 0x14
    3970:	6d 8b       	std	Y+21, r22	; 0x15
    3972:	4e 8b       	std	Y+22, r20	; 0x16
    3974:	5f 8b       	std	Y+23, r21	; 0x17
    3976:	28 8f       	std	Y+24, r18	; 0x18
    3978:	39 8f       	std	Y+25, r19	; 0x19
    397a:	0a 8f       	std	Y+26, r16	; 0x1a
    397c:	1b 8f       	std	Y+27, r17	; 0x1b
    397e:	ec 8e       	std	Y+28, r14	; 0x1c
    3980:	fd 8e       	std	Y+29, r15	; 0x1d
    3982:	ce 8e       	std	Y+30, r12	; 0x1e
    3984:	df 8e       	std	Y+31, r13	; 0x1f
	sint8		ret = M2M_ERR_SEND;
    3986:	8f ef       	ldi	r24, 0xFF	; 255
    3988:	89 83       	std	Y+1, r24	; 0x01
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    398a:	8d 89       	ldd	r24, Y+21	; 0x15
    398c:	8f 77       	andi	r24, 0x7F	; 127
    398e:	8b 83       	std	Y+3, r24	; 0x03
	strHif.u8Gid		= u8Gid;
    3990:	8c 89       	ldd	r24, Y+20	; 0x14
    3992:	8a 83       	std	Y+2, r24	; 0x02
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    3994:	88 e0       	ldi	r24, 0x08	; 8
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	8c 83       	std	Y+4, r24	; 0x04
    399a:	9d 83       	std	Y+5, r25	; 0x05
	if(pu8DataBuf != NULL)
    399c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    399e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    39a0:	89 2b       	or	r24, r25
    39a2:	69 f0       	breq	.+26     	; 0x39be <hif_send+0x6a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    39a4:	2c 81       	ldd	r18, Y+4	; 0x04
    39a6:	3d 81       	ldd	r19, Y+5	; 0x05
    39a8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    39aa:	5f 8d       	ldd	r21, Y+31	; 0x1f
    39ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39b0:	84 0f       	add	r24, r20
    39b2:	95 1f       	adc	r25, r21
    39b4:	82 0f       	add	r24, r18
    39b6:	93 1f       	adc	r25, r19
    39b8:	8c 83       	std	Y+4, r24	; 0x04
    39ba:	9d 83       	std	Y+5, r25	; 0x05
    39bc:	08 c0       	rjmp	.+16     	; 0x39ce <hif_send+0x7a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    39be:	2c 81       	ldd	r18, Y+4	; 0x04
    39c0:	3d 81       	ldd	r19, Y+5	; 0x05
    39c2:	88 8d       	ldd	r24, Y+24	; 0x18
    39c4:	99 8d       	ldd	r25, Y+25	; 0x19
    39c6:	82 0f       	add	r24, r18
    39c8:	93 1f       	adc	r25, r19
    39ca:	8c 83       	std	Y+4, r24	; 0x04
    39cc:	9d 83       	std	Y+5, r25	; 0x05
	}
	ret = hif_chip_wake();
    39ce:	0e 94 35 1c 	call	0x386a	; 0x386a <hif_chip_wake>
    39d2:	89 83       	std	Y+1, r24	; 0x01
	if(ret == M2M_SUCCESS)
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	88 23       	and	r24, r24
    39d8:	09 f0       	breq	.+2      	; 0x39dc <hif_send+0x88>
    39da:	a6 c1       	rjmp	.+844    	; 0x3d28 <hif_send+0x3d4>
	{
		volatile uint32 reg, dma_addr = 0;
    39dc:	1a 86       	std	Y+10, r1	; 0x0a
    39de:	1b 86       	std	Y+11, r1	; 0x0b
    39e0:	1c 86       	std	Y+12, r1	; 0x0c
    39e2:	1d 86       	std	Y+13, r1	; 0x0d
		volatile uint16 cnt = 0;
    39e4:	1e 86       	std	Y+14, r1	; 0x0e
    39e6:	1f 86       	std	Y+15, r1	; 0x0f
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    39e8:	1e 82       	std	Y+6, r1	; 0x06
    39ea:	1f 82       	std	Y+7, r1	; 0x07
    39ec:	18 86       	std	Y+8, r1	; 0x08
    39ee:	19 86       	std	Y+9, r1	; 0x09
		reg |= (uint32)u8Gid;
    39f0:	8c 89       	ldd	r24, Y+20	; 0x14
    39f2:	28 2f       	mov	r18, r24
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	8e 81       	ldd	r24, Y+6	; 0x06
    39fc:	9f 81       	ldd	r25, Y+7	; 0x07
    39fe:	a8 85       	ldd	r26, Y+8	; 0x08
    3a00:	b9 85       	ldd	r27, Y+9	; 0x09
    3a02:	82 2b       	or	r24, r18
    3a04:	93 2b       	or	r25, r19
    3a06:	a4 2b       	or	r26, r20
    3a08:	b5 2b       	or	r27, r21
    3a0a:	8e 83       	std	Y+6, r24	; 0x06
    3a0c:	9f 83       	std	Y+7, r25	; 0x07
    3a0e:	a8 87       	std	Y+8, r26	; 0x08
    3a10:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)u8Opcode<<8);
    3a12:	8d 89       	ldd	r24, Y+21	; 0x15
    3a14:	88 2f       	mov	r24, r24
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	a0 e0       	ldi	r26, 0x00	; 0
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	22 27       	eor	r18, r18
    3a1e:	38 2f       	mov	r19, r24
    3a20:	49 2f       	mov	r20, r25
    3a22:	5a 2f       	mov	r21, r26
    3a24:	8e 81       	ldd	r24, Y+6	; 0x06
    3a26:	9f 81       	ldd	r25, Y+7	; 0x07
    3a28:	a8 85       	ldd	r26, Y+8	; 0x08
    3a2a:	b9 85       	ldd	r27, Y+9	; 0x09
    3a2c:	82 2b       	or	r24, r18
    3a2e:	93 2b       	or	r25, r19
    3a30:	a4 2b       	or	r26, r20
    3a32:	b5 2b       	or	r27, r21
    3a34:	8e 83       	std	Y+6, r24	; 0x06
    3a36:	9f 83       	std	Y+7, r25	; 0x07
    3a38:	a8 87       	std	Y+8, r26	; 0x08
    3a3a:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)strHif.u16Length<<16);
    3a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a40:	cc 01       	movw	r24, r24
    3a42:	a0 e0       	ldi	r26, 0x00	; 0
    3a44:	b0 e0       	ldi	r27, 0x00	; 0
    3a46:	ac 01       	movw	r20, r24
    3a48:	33 27       	eor	r19, r19
    3a4a:	22 27       	eor	r18, r18
    3a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a50:	a8 85       	ldd	r26, Y+8	; 0x08
    3a52:	b9 85       	ldd	r27, Y+9	; 0x09
    3a54:	82 2b       	or	r24, r18
    3a56:	93 2b       	or	r25, r19
    3a58:	a4 2b       	or	r26, r20
    3a5a:	b5 2b       	or	r27, r21
    3a5c:	8e 83       	std	Y+6, r24	; 0x06
    3a5e:	9f 83       	std	Y+7, r25	; 0x07
    3a60:	a8 87       	std	Y+8, r26	; 0x08
    3a62:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(NMI_STATE_REG,reg);
    3a64:	8e 81       	ldd	r24, Y+6	; 0x06
    3a66:	9f 81       	ldd	r25, Y+7	; 0x07
    3a68:	a8 85       	ldd	r26, Y+8	; 0x08
    3a6a:	b9 85       	ldd	r27, Y+9	; 0x09
    3a6c:	9c 01       	movw	r18, r24
    3a6e:	ad 01       	movw	r20, r26
    3a70:	6c e8       	ldi	r22, 0x8C	; 140
    3a72:	70 e1       	ldi	r23, 0x10	; 16
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    3a7c:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	88 23       	and	r24, r24
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <hif_send+0x132>
    3a84:	45 c1       	rjmp	.+650    	; 0x3d10 <hif_send+0x3bc>

		reg = 0UL;
    3a86:	1e 82       	std	Y+6, r1	; 0x06
    3a88:	1f 82       	std	Y+7, r1	; 0x07
    3a8a:	18 86       	std	Y+8, r1	; 0x08
    3a8c:	19 86       	std	Y+9, r1	; 0x09
		reg |= NBIT1;
    3a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a90:	9f 81       	ldd	r25, Y+7	; 0x07
    3a92:	a8 85       	ldd	r26, Y+8	; 0x08
    3a94:	b9 85       	ldd	r27, Y+9	; 0x09
    3a96:	82 60       	ori	r24, 0x02	; 2
    3a98:	8e 83       	std	Y+6, r24	; 0x06
    3a9a:	9f 83       	std	Y+7, r25	; 0x07
    3a9c:	a8 87       	std	Y+8, r26	; 0x08
    3a9e:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    3aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    3aa2:	9f 81       	ldd	r25, Y+7	; 0x07
    3aa4:	a8 85       	ldd	r26, Y+8	; 0x08
    3aa6:	b9 85       	ldd	r27, Y+9	; 0x09
    3aa8:	9c 01       	movw	r18, r24
    3aaa:	ad 01       	movw	r20, r26
    3aac:	68 e7       	ldi	r22, 0x78	; 120
    3aae:	70 e1       	ldi	r23, 0x10	; 16
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    3ab8:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	88 23       	and	r24, r24
    3abe:	09 f0       	breq	.+2      	; 0x3ac2 <hif_send+0x16e>
    3ac0:	29 c1       	rjmp	.+594    	; 0x3d14 <hif_send+0x3c0>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    3ac2:	1a 86       	std	Y+10, r1	; 0x0a
    3ac4:	1b 86       	std	Y+11, r1	; 0x0b
    3ac6:	1c 86       	std	Y+12, r1	; 0x0c
    3ac8:	1d 86       	std	Y+13, r1	; 0x0d
		
		for(cnt = 0; cnt < 1000; cnt ++)
    3aca:	1e 86       	std	Y+14, r1	; 0x0e
    3acc:	1f 86       	std	Y+15, r1	; 0x0f
    3ace:	3d c0       	rjmp	.+122    	; 0x3b4a <hif_send+0x1f6>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	06 96       	adiw	r24, 0x06	; 6
    3ad4:	ac 01       	movw	r20, r24
    3ad6:	68 e7       	ldi	r22, 0x78	; 120
    3ad8:	70 e1       	ldi	r23, 0x10	; 16
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    3ae2:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS) break;
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	88 23       	and	r24, r24
    3ae8:	b9 f5       	brne	.+110    	; 0x3b58 <hif_send+0x204>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    3aea:	8e 85       	ldd	r24, Y+14	; 0x0e
    3aec:	9f 85       	ldd	r25, Y+15	; 0x0f
    3aee:	84 3f       	cpi	r24, 0xF4	; 244
    3af0:	91 40       	sbci	r25, 0x01	; 1
    3af2:	40 f0       	brcs	.+16     	; 0x3b04 <hif_send+0x1b0>
				if(cnt < 501) {
    3af4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3af6:	9f 85       	ldd	r25, Y+15	; 0x0f
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    3af8:	61 e0       	ldi	r22, 0x01	; 1
    3afa:	70 e0       	ldi	r23, 0x00	; 0
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
    3b04:	8e 81       	ldd	r24, Y+6	; 0x06
    3b06:	9f 81       	ldd	r25, Y+7	; 0x07
    3b08:	a8 85       	ldd	r26, Y+8	; 0x08
    3b0a:	b9 85       	ldd	r27, Y+9	; 0x09
    3b0c:	82 70       	andi	r24, 0x02	; 2
    3b0e:	99 27       	eor	r25, r25
    3b10:	aa 27       	eor	r26, r26
    3b12:	bb 27       	eor	r27, r27
    3b14:	89 2b       	or	r24, r25
    3b16:	8a 2b       	or	r24, r26
    3b18:	8b 2b       	or	r24, r27
    3b1a:	91 f4       	brne	.+36     	; 0x3b40 <hif_send+0x1ec>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    3b1c:	ce 01       	movw	r24, r28
    3b1e:	0a 96       	adiw	r24, 0x0a	; 10
    3b20:	ac 01       	movw	r20, r24
    3b22:	60 e0       	ldi	r22, 0x00	; 0
    3b24:	74 e0       	ldi	r23, 0x04	; 4
    3b26:	85 e1       	ldi	r24, 0x15	; 21
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    3b2e:	89 83       	std	Y+1, r24	; 0x01
				if(ret != M2M_SUCCESS) {
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	88 23       	and	r24, r24
    3b34:	99 f0       	breq	.+38     	; 0x3b5c <hif_send+0x208>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    3b36:	1a 86       	std	Y+10, r1	; 0x0a
    3b38:	1b 86       	std	Y+11, r1	; 0x0b
    3b3a:	1c 86       	std	Y+12, r1	; 0x0c
    3b3c:	1d 86       	std	Y+13, r1	; 0x0d
					goto ERR1;
    3b3e:	f1 c0       	rjmp	.+482    	; 0x3d22 <hif_send+0x3ce>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    3b40:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b42:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b44:	01 96       	adiw	r24, 0x01	; 1
    3b46:	8e 87       	std	Y+14, r24	; 0x0e
    3b48:	9f 87       	std	Y+15, r25	; 0x0f
    3b4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b4e:	88 3e       	cpi	r24, 0xE8	; 232
    3b50:	93 40       	sbci	r25, 0x03	; 3
    3b52:	08 f4       	brcc	.+2      	; 0x3b56 <hif_send+0x202>
    3b54:	bd cf       	rjmp	.-134    	; 0x3ad0 <hif_send+0x17c>
    3b56:	03 c0       	rjmp	.+6      	; 0x3b5e <hif_send+0x20a>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    3b58:	00 00       	nop
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <hif_send+0x20a>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    3b5c:	00 00       	nop
			}
		}

		if (dma_addr != 0)
    3b5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b60:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b62:	ac 85       	ldd	r26, Y+12	; 0x0c
    3b64:	bd 85       	ldd	r27, Y+13	; 0x0d
    3b66:	89 2b       	or	r24, r25
    3b68:	8a 2b       	or	r24, r26
    3b6a:	8b 2b       	or	r24, r27
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <hif_send+0x21c>
    3b6e:	c5 c0       	rjmp	.+394    	; 0x3cfa <hif_send+0x3a6>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    3b70:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b72:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b74:	ac 85       	ldd	r26, Y+12	; 0x0c
    3b76:	bd 85       	ldd	r27, Y+13	; 0x0d
    3b78:	88 8b       	std	Y+16, r24	; 0x10
    3b7a:	99 8b       	std	Y+17, r25	; 0x11
    3b7c:	aa 8b       	std	Y+18, r26	; 0x12
    3b7e:	bb 8b       	std	Y+19, r27	; 0x13
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    3b80:	8c 81       	ldd	r24, Y+4	; 0x04
    3b82:	9d 81       	ldd	r25, Y+5	; 0x05
    3b84:	8c 83       	std	Y+4, r24	; 0x04
    3b86:	9d 83       	std	Y+5, r25	; 0x05
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    3b88:	88 89       	ldd	r24, Y+16	; 0x10
    3b8a:	99 89       	ldd	r25, Y+17	; 0x11
    3b8c:	aa 89       	ldd	r26, Y+18	; 0x12
    3b8e:	bb 89       	ldd	r27, Y+19	; 0x13
    3b90:	ae 01       	movw	r20, r28
    3b92:	4e 5f       	subi	r20, 0xFE	; 254
    3b94:	5f 4f       	sbci	r21, 0xFF	; 255
    3b96:	08 e0       	ldi	r16, 0x08	; 8
    3b98:	10 e0       	ldi	r17, 0x00	; 0
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	bc 01       	movw	r22, r24
    3ba0:	cd 01       	movw	r24, r26
    3ba2:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <nm_write_block>
    3ba6:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	88 23       	and	r24, r24
    3bac:	09 f0       	breq	.+2      	; 0x3bb0 <hif_send+0x25c>
    3bae:	b4 c0       	rjmp	.+360    	; 0x3d18 <hif_send+0x3c4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    3bb0:	88 89       	ldd	r24, Y+16	; 0x10
    3bb2:	99 89       	ldd	r25, Y+17	; 0x11
    3bb4:	aa 89       	ldd	r26, Y+18	; 0x12
    3bb6:	bb 89       	ldd	r27, Y+19	; 0x13
    3bb8:	08 96       	adiw	r24, 0x08	; 8
    3bba:	a1 1d       	adc	r26, r1
    3bbc:	b1 1d       	adc	r27, r1
    3bbe:	88 8b       	std	Y+16, r24	; 0x10
    3bc0:	99 8b       	std	Y+17, r25	; 0x11
    3bc2:	aa 8b       	std	Y+18, r26	; 0x12
    3bc4:	bb 8b       	std	Y+19, r27	; 0x13
			if(pu8CtrlBuf != NULL)
    3bc6:	8e 89       	ldd	r24, Y+22	; 0x16
    3bc8:	9f 89       	ldd	r25, Y+23	; 0x17
    3bca:	89 2b       	or	r24, r25
    3bcc:	41 f1       	breq	.+80     	; 0x3c1e <hif_send+0x2ca>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    3bce:	88 8d       	ldd	r24, Y+24	; 0x18
    3bd0:	99 8d       	ldd	r25, Y+25	; 0x19
    3bd2:	9c 01       	movw	r18, r24
    3bd4:	40 e0       	ldi	r20, 0x00	; 0
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	88 89       	ldd	r24, Y+16	; 0x10
    3bda:	99 89       	ldd	r25, Y+17	; 0x11
    3bdc:	aa 89       	ldd	r26, Y+18	; 0x12
    3bde:	bb 89       	ldd	r27, Y+19	; 0x13
    3be0:	6e 89       	ldd	r22, Y+22	; 0x16
    3be2:	7f 89       	ldd	r23, Y+23	; 0x17
    3be4:	89 01       	movw	r16, r18
    3be6:	9a 01       	movw	r18, r20
    3be8:	ab 01       	movw	r20, r22
    3bea:	bc 01       	movw	r22, r24
    3bec:	cd 01       	movw	r24, r26
    3bee:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <nm_write_block>
    3bf2:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	88 23       	and	r24, r24
    3bf8:	09 f0       	breq	.+2      	; 0x3bfc <hif_send+0x2a8>
    3bfa:	90 c0       	rjmp	.+288    	; 0x3d1c <hif_send+0x3c8>
				u32CurrAddr += u16CtrlBufSize;
    3bfc:	88 8d       	ldd	r24, Y+24	; 0x18
    3bfe:	99 8d       	ldd	r25, Y+25	; 0x19
    3c00:	9c 01       	movw	r18, r24
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	50 e0       	ldi	r21, 0x00	; 0
    3c06:	88 89       	ldd	r24, Y+16	; 0x10
    3c08:	99 89       	ldd	r25, Y+17	; 0x11
    3c0a:	aa 89       	ldd	r26, Y+18	; 0x12
    3c0c:	bb 89       	ldd	r27, Y+19	; 0x13
    3c0e:	82 0f       	add	r24, r18
    3c10:	93 1f       	adc	r25, r19
    3c12:	a4 1f       	adc	r26, r20
    3c14:	b5 1f       	adc	r27, r21
    3c16:	88 8b       	std	Y+16, r24	; 0x10
    3c18:	99 8b       	std	Y+17, r25	; 0x11
    3c1a:	aa 8b       	std	Y+18, r26	; 0x12
    3c1c:	bb 8b       	std	Y+19, r27	; 0x13
			}
			if(pu8DataBuf != NULL)
    3c1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c20:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c22:	89 2b       	or	r24, r25
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <hif_send+0x2d4>
    3c26:	3f c0       	rjmp	.+126    	; 0x3ca6 <hif_send+0x352>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    3c28:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3c2a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3c2c:	88 8d       	ldd	r24, Y+24	; 0x18
    3c2e:	99 8d       	ldd	r25, Y+25	; 0x19
    3c30:	a9 01       	movw	r20, r18
    3c32:	48 1b       	sub	r20, r24
    3c34:	59 0b       	sbc	r21, r25
    3c36:	ca 01       	movw	r24, r20
    3c38:	9c 01       	movw	r18, r24
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	88 89       	ldd	r24, Y+16	; 0x10
    3c40:	99 89       	ldd	r25, Y+17	; 0x11
    3c42:	aa 89       	ldd	r26, Y+18	; 0x12
    3c44:	bb 89       	ldd	r27, Y+19	; 0x13
    3c46:	82 0f       	add	r24, r18
    3c48:	93 1f       	adc	r25, r19
    3c4a:	a4 1f       	adc	r26, r20
    3c4c:	b5 1f       	adc	r27, r21
    3c4e:	88 8b       	std	Y+16, r24	; 0x10
    3c50:	99 8b       	std	Y+17, r25	; 0x11
    3c52:	aa 8b       	std	Y+18, r26	; 0x12
    3c54:	bb 8b       	std	Y+19, r27	; 0x13
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    3c56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c58:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c5a:	9c 01       	movw	r18, r24
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	50 e0       	ldi	r21, 0x00	; 0
    3c60:	88 89       	ldd	r24, Y+16	; 0x10
    3c62:	99 89       	ldd	r25, Y+17	; 0x11
    3c64:	aa 89       	ldd	r26, Y+18	; 0x12
    3c66:	bb 89       	ldd	r27, Y+19	; 0x13
    3c68:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3c6a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3c6c:	89 01       	movw	r16, r18
    3c6e:	9a 01       	movw	r18, r20
    3c70:	ab 01       	movw	r20, r22
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <nm_write_block>
    3c7a:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	88 23       	and	r24, r24
    3c80:	09 f0       	breq	.+2      	; 0x3c84 <hif_send+0x330>
    3c82:	4e c0       	rjmp	.+156    	; 0x3d20 <hif_send+0x3cc>
				u32CurrAddr += u16DataSize;
    3c84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c88:	9c 01       	movw	r18, r24
    3c8a:	40 e0       	ldi	r20, 0x00	; 0
    3c8c:	50 e0       	ldi	r21, 0x00	; 0
    3c8e:	88 89       	ldd	r24, Y+16	; 0x10
    3c90:	99 89       	ldd	r25, Y+17	; 0x11
    3c92:	aa 89       	ldd	r26, Y+18	; 0x12
    3c94:	bb 89       	ldd	r27, Y+19	; 0x13
    3c96:	82 0f       	add	r24, r18
    3c98:	93 1f       	adc	r25, r19
    3c9a:	a4 1f       	adc	r26, r20
    3c9c:	b5 1f       	adc	r27, r21
    3c9e:	88 8b       	std	Y+16, r24	; 0x10
    3ca0:	99 8b       	std	Y+17, r25	; 0x11
    3ca2:	aa 8b       	std	Y+18, r26	; 0x12
    3ca4:	bb 8b       	std	Y+19, r27	; 0x13
			}

			reg = dma_addr << 2;
    3ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ca8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3caa:	ac 85       	ldd	r26, Y+12	; 0x0c
    3cac:	bd 85       	ldd	r27, Y+13	; 0x0d
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	aa 1f       	adc	r26, r26
    3cb4:	bb 1f       	adc	r27, r27
    3cb6:	88 0f       	add	r24, r24
    3cb8:	99 1f       	adc	r25, r25
    3cba:	aa 1f       	adc	r26, r26
    3cbc:	bb 1f       	adc	r27, r27
    3cbe:	8e 83       	std	Y+6, r24	; 0x06
    3cc0:	9f 83       	std	Y+7, r25	; 0x07
    3cc2:	a8 87       	std	Y+8, r26	; 0x08
    3cc4:	b9 87       	std	Y+9, r27	; 0x09
			reg |= NBIT1;
    3cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    3cca:	a8 85       	ldd	r26, Y+8	; 0x08
    3ccc:	b9 85       	ldd	r27, Y+9	; 0x09
    3cce:	82 60       	ori	r24, 0x02	; 2
    3cd0:	8e 83       	std	Y+6, r24	; 0x06
    3cd2:	9f 83       	std	Y+7, r25	; 0x07
    3cd4:	a8 87       	std	Y+8, r26	; 0x08
    3cd6:	b9 87       	std	Y+9, r27	; 0x09
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    3cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    3cda:	9f 81       	ldd	r25, Y+7	; 0x07
    3cdc:	a8 85       	ldd	r26, Y+8	; 0x08
    3cde:	b9 85       	ldd	r27, Y+9	; 0x09
    3ce0:	9c 01       	movw	r18, r24
    3ce2:	ad 01       	movw	r20, r26
    3ce4:	6c e6       	ldi	r22, 0x6C	; 108
    3ce6:	70 e1       	ldi	r23, 0x10	; 16
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    3cf0:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	88 23       	and	r24, r24
    3cf6:	39 f0       	breq	.+14     	; 0x3d06 <hif_send+0x3b2>
    3cf8:	14 c0       	rjmp	.+40     	; 0x3d22 <hif_send+0x3ce>
		}
		else
		{
			ret = hif_chip_sleep();
    3cfa:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <hif_chip_sleep>
    3cfe:	89 83       	std	Y+1, r24	; 0x01
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    3d00:	8d ef       	ldi	r24, 0xFD	; 253
    3d02:	89 83       	std	Y+1, r24	; 0x01
			goto ERR2;
    3d04:	12 c0       	rjmp	.+36     	; 0x3d2a <hif_send+0x3d6>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    3d06:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <hif_chip_sleep>
    3d0a:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	0e c0       	rjmp	.+28     	; 0x3d2c <hif_send+0x3d8>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    3d10:	00 00       	nop
    3d12:	07 c0       	rjmp	.+14     	; 0x3d22 <hif_send+0x3ce>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    3d14:	00 00       	nop
    3d16:	05 c0       	rjmp	.+10     	; 0x3d22 <hif_send+0x3ce>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    3d18:	00 00       	nop
    3d1a:	03 c0       	rjmp	.+6      	; 0x3d22 <hif_send+0x3ce>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    3d1c:	00 00       	nop
    3d1e:	01 c0       	rjmp	.+2      	; 0x3d22 <hif_send+0x3ce>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    3d20:	00 00       	nop
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    3d22:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <hif_chip_sleep_sc>
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <hif_send+0x3d6>

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
    3d28:	00 00       	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d2c:	6f 96       	adiw	r28, 0x1f	; 31
    3d2e:	cd bf       	out	0x3d, r28	; 61
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	df 91       	pop	r29
    3d34:	cf 91       	pop	r28
    3d36:	1f 91       	pop	r17
    3d38:	0f 91       	pop	r16
    3d3a:	ff 90       	pop	r15
    3d3c:	ef 90       	pop	r14
    3d3e:	df 90       	pop	r13
    3d40:	cf 90       	pop	r12
    3d42:	08 95       	ret

00003d44 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    3d44:	0f 93       	push	r16
    3d46:	1f 93       	push	r17
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	2f 97       	sbiw	r28, 0x0f	; 15
    3d52:	cd bf       	out	0x3d, r28	; 61
    3d54:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;
    3d56:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    3d58:	ce 01       	movw	r24, r28
    3d5a:	04 96       	adiw	r24, 0x04	; 4
    3d5c:	ac 01       	movw	r20, r24
    3d5e:	60 e7       	ldi	r22, 0x70	; 112
    3d60:	70 e1       	ldi	r23, 0x10	; 16
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    3d6a:	89 83       	std	Y+1, r24	; 0x01
	if(M2M_SUCCESS == ret)
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	88 23       	and	r24, r24
    3d70:	09 f0       	breq	.+2      	; 0x3d74 <hif_isr+0x30>
    3d72:	70 c1       	rjmp	.+736    	; 0x4054 <__RODATA_PM_OFFSET__+0x54>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    3d74:	8c 81       	ldd	r24, Y+4	; 0x04
    3d76:	9d 81       	ldd	r25, Y+5	; 0x05
    3d78:	ae 81       	ldd	r26, Y+6	; 0x06
    3d7a:	bf 81       	ldd	r27, Y+7	; 0x07
    3d7c:	81 70       	andi	r24, 0x01	; 1
    3d7e:	99 27       	eor	r25, r25
    3d80:	aa 27       	eor	r26, r26
    3d82:	bb 27       	eor	r27, r27
    3d84:	89 2b       	or	r24, r25
    3d86:	8a 2b       	or	r24, r26
    3d88:	8b 2b       	or	r24, r27
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <hif_isr+0x4a>
    3d8c:	60 c1       	rjmp	.+704    	; 0x404e <__RODATA_PM_OFFSET__+0x4e>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    3d94:	8c 81       	ldd	r24, Y+4	; 0x04
    3d96:	9d 81       	ldd	r25, Y+5	; 0x05
    3d98:	ae 81       	ldd	r26, Y+6	; 0x06
    3d9a:	bf 81       	ldd	r27, Y+7	; 0x07
    3d9c:	8e 7f       	andi	r24, 0xFE	; 254
    3d9e:	8c 83       	std	Y+4, r24	; 0x04
    3da0:	9d 83       	std	Y+5, r25	; 0x05
    3da2:	ae 83       	std	Y+6, r26	; 0x06
    3da4:	bf 83       	std	Y+7, r27	; 0x07
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    3da6:	8c 81       	ldd	r24, Y+4	; 0x04
    3da8:	9d 81       	ldd	r25, Y+5	; 0x05
    3daa:	ae 81       	ldd	r26, Y+6	; 0x06
    3dac:	bf 81       	ldd	r27, Y+7	; 0x07
    3dae:	9c 01       	movw	r18, r24
    3db0:	ad 01       	movw	r20, r26
    3db2:	60 e7       	ldi	r22, 0x70	; 112
    3db4:	70 e1       	ldi	r23, 0x10	; 16
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    3dbe:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS)goto ERR1;
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	88 23       	and	r24, r24
    3dc4:	09 f0       	breq	.+2      	; 0x3dc8 <hif_isr+0x84>
    3dc6:	48 c1       	rjmp	.+656    	; 0x4058 <__RODATA_PM_OFFSET__+0x58>
			gstrHifCxt.u8HifRXDone = 1;
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	80 93 d8 29 	sts	0x29D8, r24	; 0x8029d8 <gstrHifCxt+0x2>
			size = (uint16)((reg >> 2) & 0xfff);
    3dce:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd2:	ae 81       	ldd	r26, Y+6	; 0x06
    3dd4:	bf 81       	ldd	r27, Y+7	; 0x07
    3dd6:	b6 95       	lsr	r27
    3dd8:	a7 95       	ror	r26
    3dda:	97 95       	ror	r25
    3ddc:	87 95       	ror	r24
    3dde:	b6 95       	lsr	r27
    3de0:	a7 95       	ror	r26
    3de2:	97 95       	ror	r25
    3de4:	87 95       	ror	r24
    3de6:	9f 70       	andi	r25, 0x0F	; 15
    3de8:	8a 83       	std	Y+2, r24	; 0x02
    3dea:	9b 83       	std	Y+3, r25	; 0x03
			if (size > 0) {
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	9b 81       	ldd	r25, Y+3	; 0x03
    3df0:	89 2b       	or	r24, r25
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <hif_isr+0xb2>
    3df4:	29 c1       	rjmp	.+594    	; 0x4048 <__RODATA_PM_OFFSET__+0x48>
				uint32 address = 0;
    3df6:	1c 86       	std	Y+12, r1	; 0x0c
    3df8:	1d 86       	std	Y+13, r1	; 0x0d
    3dfa:	1e 86       	std	Y+14, r1	; 0x0e
    3dfc:	1f 86       	std	Y+15, r1	; 0x0f
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    3dfe:	ce 01       	movw	r24, r28
    3e00:	0c 96       	adiw	r24, 0x0c	; 12
    3e02:	ac 01       	movw	r20, r24
    3e04:	64 e8       	ldi	r22, 0x84	; 132
    3e06:	70 e1       	ldi	r23, 0x10	; 16
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    3e10:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret)
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	88 23       	and	r24, r24
    3e16:	21 f0       	breq	.+8      	; 0x3e20 <hif_isr+0xdc>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    3e1e:	1d c1       	rjmp	.+570    	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
				}
				gstrHifCxt.u32RxAddr = address;
    3e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e24:	ae 85       	ldd	r26, Y+14	; 0x0e
    3e26:	bf 85       	ldd	r27, Y+15	; 0x0f
    3e28:	80 93 da 29 	sts	0x29DA, r24	; 0x8029da <gstrHifCxt+0x4>
    3e2c:	90 93 db 29 	sts	0x29DB, r25	; 0x8029db <gstrHifCxt+0x5>
    3e30:	a0 93 dc 29 	sts	0x29DC, r26	; 0x8029dc <gstrHifCxt+0x6>
    3e34:	b0 93 dd 29 	sts	0x29DD, r27	; 0x8029dd <gstrHifCxt+0x7>
				gstrHifCxt.u32RxSize = size;
    3e38:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3c:	cc 01       	movw	r24, r24
    3e3e:	a0 e0       	ldi	r26, 0x00	; 0
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	80 93 de 29 	sts	0x29DE, r24	; 0x8029de <gstrHifCxt+0x8>
    3e46:	90 93 df 29 	sts	0x29DF, r25	; 0x8029df <gstrHifCxt+0x9>
    3e4a:	a0 93 e0 29 	sts	0x29E0, r26	; 0x8029e0 <gstrHifCxt+0xa>
    3e4e:	b0 93 e1 29 	sts	0x29E1, r27	; 0x8029e1 <gstrHifCxt+0xb>
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    3e52:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e54:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e56:	ae 85       	ldd	r26, Y+14	; 0x0e
    3e58:	bf 85       	ldd	r27, Y+15	; 0x0f
    3e5a:	ae 01       	movw	r20, r28
    3e5c:	48 5f       	subi	r20, 0xF8	; 248
    3e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e60:	04 e0       	ldi	r16, 0x04	; 4
    3e62:	10 e0       	ldi	r17, 0x00	; 0
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	0e 94 15 2c 	call	0x582a	; 0x582a <nm_read_block>
    3e70:	89 83       	std	Y+1, r24	; 0x01
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    3e72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e74:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e76:	8a 87       	std	Y+10, r24	; 0x0a
    3e78:	9b 87       	std	Y+11, r25	; 0x0b
				if(M2M_SUCCESS != ret)
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01
    3e7c:	88 23       	and	r24, r24
    3e7e:	21 f0       	breq	.+8      	; 0x3e88 <hif_isr+0x144>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    3e86:	e9 c0       	rjmp	.+466    	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
				}
				if(strHif.u16Length != size)
    3e88:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e8a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e90:	28 17       	cp	r18, r24
    3e92:	39 07       	cpc	r19, r25
    3e94:	81 f0       	breq	.+32     	; 0x3eb6 <hif_isr+0x172>
				{
					if((size - strHif.u16Length) > 4)
    3e96:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e98:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e9a:	2a 81       	ldd	r18, Y+2	; 0x02
    3e9c:	3b 81       	ldd	r19, Y+3	; 0x03
    3e9e:	a9 01       	movw	r20, r18
    3ea0:	48 1b       	sub	r20, r24
    3ea2:	59 0b       	sbc	r21, r25
    3ea4:	ca 01       	movw	r24, r20
    3ea6:	05 97       	sbiw	r24, 0x05	; 5
    3ea8:	30 f0       	brcs	.+12     	; 0x3eb6 <hif_isr+0x172>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
    3eb0:	8a ef       	ldi	r24, 0xFA	; 250
    3eb2:	89 83       	std	Y+1, r24	; 0x01
						goto ERR1;
    3eb4:	d2 c0       	rjmp	.+420    	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    3eb6:	88 85       	ldd	r24, Y+8	; 0x08
    3eb8:	81 30       	cpi	r24, 0x01	; 1
    3eba:	e9 f4       	brne	.+58     	; 0x3ef6 <hif_isr+0x1b2>
				{
					if(gstrHifCxt.pfWifiCb)
    3ebc:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <gstrHifCxt+0xc>
    3ec0:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <gstrHifCxt+0xd>
    3ec4:	89 2b       	or	r24, r25
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <hif_isr+0x186>
    3ec8:	b7 c0       	rjmp	.+366    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3eca:	e0 91 e2 29 	lds	r30, 0x29E2	; 0x8029e2 <gstrHifCxt+0xc>
    3ece:	f0 91 e3 29 	lds	r31, 0x29E3	; 0x8029e3 <gstrHifCxt+0xd>
    3ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ed4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ed6:	ae 85       	ldd	r26, Y+14	; 0x0e
    3ed8:	bf 85       	ldd	r27, Y+15	; 0x0f
    3eda:	08 96       	adiw	r24, 0x08	; 8
    3edc:	a1 1d       	adc	r26, r1
    3ede:	b1 1d       	adc	r27, r1
    3ee0:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ee2:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ee4:	b9 01       	movw	r22, r18
    3ee6:	68 50       	subi	r22, 0x08	; 8
    3ee8:	71 09       	sbc	r23, r1
    3eea:	19 85       	ldd	r17, Y+9	; 0x09
    3eec:	9c 01       	movw	r18, r24
    3eee:	ad 01       	movw	r20, r26
    3ef0:	81 2f       	mov	r24, r17
    3ef2:	09 95       	icall
    3ef4:	a1 c0       	rjmp	.+322    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
					else
						M2M_ERR("WIFI callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    3ef6:	88 85       	ldd	r24, Y+8	; 0x08
    3ef8:	82 30       	cpi	r24, 0x02	; 2
    3efa:	e9 f4       	brne	.+58     	; 0x3f36 <hif_isr+0x1f2>
				{
					if(gstrHifCxt.pfIpCb)
    3efc:	80 91 e4 29 	lds	r24, 0x29E4	; 0x8029e4 <gstrHifCxt+0xe>
    3f00:	90 91 e5 29 	lds	r25, 0x29E5	; 0x8029e5 <gstrHifCxt+0xf>
    3f04:	89 2b       	or	r24, r25
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <hif_isr+0x1c6>
    3f08:	97 c0       	rjmp	.+302    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3f0a:	e0 91 e4 29 	lds	r30, 0x29E4	; 0x8029e4 <gstrHifCxt+0xe>
    3f0e:	f0 91 e5 29 	lds	r31, 0x29E5	; 0x8029e5 <gstrHifCxt+0xf>
    3f12:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f14:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f16:	ae 85       	ldd	r26, Y+14	; 0x0e
    3f18:	bf 85       	ldd	r27, Y+15	; 0x0f
    3f1a:	08 96       	adiw	r24, 0x08	; 8
    3f1c:	a1 1d       	adc	r26, r1
    3f1e:	b1 1d       	adc	r27, r1
    3f20:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f22:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f24:	b9 01       	movw	r22, r18
    3f26:	68 50       	subi	r22, 0x08	; 8
    3f28:	71 09       	sbc	r23, r1
    3f2a:	19 85       	ldd	r17, Y+9	; 0x09
    3f2c:	9c 01       	movw	r18, r24
    3f2e:	ad 01       	movw	r20, r26
    3f30:	81 2f       	mov	r24, r17
    3f32:	09 95       	icall
    3f34:	81 c0       	rjmp	.+258    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
					else
						M2M_ERR("Scoket callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    3f36:	88 85       	ldd	r24, Y+8	; 0x08
    3f38:	84 30       	cpi	r24, 0x04	; 4
    3f3a:	e9 f4       	brne	.+58     	; 0x3f76 <hif_isr+0x232>
				{
					if(gstrHifCxt.pfOtaCb)
    3f3c:	80 91 e6 29 	lds	r24, 0x29E6	; 0x8029e6 <gstrHifCxt+0x10>
    3f40:	90 91 e7 29 	lds	r25, 0x29E7	; 0x8029e7 <gstrHifCxt+0x11>
    3f44:	89 2b       	or	r24, r25
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <hif_isr+0x206>
    3f48:	77 c0       	rjmp	.+238    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3f4a:	e0 91 e6 29 	lds	r30, 0x29E6	; 0x8029e6 <gstrHifCxt+0x10>
    3f4e:	f0 91 e7 29 	lds	r31, 0x29E7	; 0x8029e7 <gstrHifCxt+0x11>
    3f52:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f54:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f56:	ae 85       	ldd	r26, Y+14	; 0x0e
    3f58:	bf 85       	ldd	r27, Y+15	; 0x0f
    3f5a:	08 96       	adiw	r24, 0x08	; 8
    3f5c:	a1 1d       	adc	r26, r1
    3f5e:	b1 1d       	adc	r27, r1
    3f60:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f62:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f64:	b9 01       	movw	r22, r18
    3f66:	68 50       	subi	r22, 0x08	; 8
    3f68:	71 09       	sbc	r23, r1
    3f6a:	19 85       	ldd	r17, Y+9	; 0x09
    3f6c:	9c 01       	movw	r18, r24
    3f6e:	ad 01       	movw	r20, r26
    3f70:	81 2f       	mov	r24, r17
    3f72:	09 95       	icall
    3f74:	61 c0       	rjmp	.+194    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
					else
						M2M_ERR("Ota callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    3f76:	88 85       	ldd	r24, Y+8	; 0x08
    3f78:	86 30       	cpi	r24, 0x06	; 6
    3f7a:	e9 f4       	brne	.+58     	; 0x3fb6 <hif_isr+0x272>
				{
					if(gstrHifCxt.pfCryptoCb)
    3f7c:	80 91 ec 29 	lds	r24, 0x29EC	; 0x8029ec <gstrHifCxt+0x16>
    3f80:	90 91 ed 29 	lds	r25, 0x29ED	; 0x8029ed <gstrHifCxt+0x17>
    3f84:	89 2b       	or	r24, r25
    3f86:	09 f4       	brne	.+2      	; 0x3f8a <hif_isr+0x246>
    3f88:	57 c0       	rjmp	.+174    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3f8a:	e0 91 ec 29 	lds	r30, 0x29EC	; 0x8029ec <gstrHifCxt+0x16>
    3f8e:	f0 91 ed 29 	lds	r31, 0x29ED	; 0x8029ed <gstrHifCxt+0x17>
    3f92:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f94:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f96:	ae 85       	ldd	r26, Y+14	; 0x0e
    3f98:	bf 85       	ldd	r27, Y+15	; 0x0f
    3f9a:	08 96       	adiw	r24, 0x08	; 8
    3f9c:	a1 1d       	adc	r26, r1
    3f9e:	b1 1d       	adc	r27, r1
    3fa0:	2a 85       	ldd	r18, Y+10	; 0x0a
    3fa2:	3b 85       	ldd	r19, Y+11	; 0x0b
    3fa4:	b9 01       	movw	r22, r18
    3fa6:	68 50       	subi	r22, 0x08	; 8
    3fa8:	71 09       	sbc	r23, r1
    3faa:	19 85       	ldd	r17, Y+9	; 0x09
    3fac:	9c 01       	movw	r18, r24
    3fae:	ad 01       	movw	r20, r26
    3fb0:	81 2f       	mov	r24, r17
    3fb2:	09 95       	icall
    3fb4:	41 c0       	rjmp	.+130    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>

					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    3fb6:	88 85       	ldd	r24, Y+8	; 0x08
    3fb8:	87 30       	cpi	r24, 0x07	; 7
    3fba:	e1 f4       	brne	.+56     	; 0x3ff4 <hif_isr+0x2b0>
				{
					if(gstrHifCxt.pfSigmaCb)
    3fbc:	80 91 e8 29 	lds	r24, 0x29E8	; 0x8029e8 <gstrHifCxt+0x12>
    3fc0:	90 91 e9 29 	lds	r25, 0x29E9	; 0x8029e9 <gstrHifCxt+0x13>
    3fc4:	89 2b       	or	r24, r25
    3fc6:	c1 f1       	breq	.+112    	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3fc8:	e0 91 e8 29 	lds	r30, 0x29E8	; 0x8029e8 <gstrHifCxt+0x12>
    3fcc:	f0 91 e9 29 	lds	r31, 0x29E9	; 0x8029e9 <gstrHifCxt+0x13>
    3fd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fd4:	ae 85       	ldd	r26, Y+14	; 0x0e
    3fd6:	bf 85       	ldd	r27, Y+15	; 0x0f
    3fd8:	08 96       	adiw	r24, 0x08	; 8
    3fda:	a1 1d       	adc	r26, r1
    3fdc:	b1 1d       	adc	r27, r1
    3fde:	2a 85       	ldd	r18, Y+10	; 0x0a
    3fe0:	3b 85       	ldd	r19, Y+11	; 0x0b
    3fe2:	b9 01       	movw	r22, r18
    3fe4:	68 50       	subi	r22, 0x08	; 8
    3fe6:	71 09       	sbc	r23, r1
    3fe8:	19 85       	ldd	r17, Y+9	; 0x09
    3fea:	9c 01       	movw	r18, r24
    3fec:	ad 01       	movw	r20, r26
    3fee:	81 2f       	mov	r24, r17
    3ff0:	09 95       	icall
    3ff2:	22 c0       	rjmp	.+68     	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    3ff4:	88 85       	ldd	r24, Y+8	; 0x08
    3ff6:	85 30       	cpi	r24, 0x05	; 5
    3ff8:	e1 f4       	brne	.+56     	; 0x4032 <__RODATA_PM_OFFSET__+0x32>
				{
				    if(gstrHifCxt.pfSslCb)
    3ffa:	80 91 ee 29 	lds	r24, 0x29EE	; 0x8029ee <gstrHifCxt+0x18>
    3ffe:	90 91 ef 29 	lds	r25, 0x29EF	; 0x8029ef <gstrHifCxt+0x19>
    4002:	89 2b       	or	r24, r25
    4004:	c9 f0       	breq	.+50     	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4006:	e0 91 ee 29 	lds	r30, 0x29EE	; 0x8029ee <gstrHifCxt+0x18>
    400a:	f0 91 ef 29 	lds	r31, 0x29EF	; 0x8029ef <gstrHifCxt+0x19>
    400e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4010:	9d 85       	ldd	r25, Y+13	; 0x0d
    4012:	ae 85       	ldd	r26, Y+14	; 0x0e
    4014:	bf 85       	ldd	r27, Y+15	; 0x0f
    4016:	08 96       	adiw	r24, 0x08	; 8
    4018:	a1 1d       	adc	r26, r1
    401a:	b1 1d       	adc	r27, r1
    401c:	2a 85       	ldd	r18, Y+10	; 0x0a
    401e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4020:	b9 01       	movw	r22, r18
    4022:	68 50       	subi	r22, 0x08	; 8
    4024:	71 09       	sbc	r23, r1
    4026:	19 85       	ldd	r17, Y+9	; 0x09
    4028:	9c 01       	movw	r18, r24
    402a:	ad 01       	movw	r20, r26
    402c:	81 2f       	mov	r24, r17
    402e:	09 95       	icall
    4030:	03 c0       	rjmp	.+6      	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
    4032:	8a ef       	ldi	r24, 0xFA	; 250
    4034:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    4036:	11 c0       	rjmp	.+34     	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
				}
				if(gstrHifCxt.u8HifRXDone)
    4038:	80 91 d8 29 	lds	r24, 0x29D8	; 0x8029d8 <gstrHifCxt+0x2>
    403c:	88 23       	and	r24, r24
    403e:	69 f0       	breq	.+26     	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    4040:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <hif_set_rx_done>
    4044:	89 83       	std	Y+1, r24	; 0x01
    4046:	09 c0       	rjmp	.+18     	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
    4048:	8e ef       	ldi	r24, 0xFE	; 254
    404a:	89 83       	std	Y+1, r24	; 0x01
				goto ERR1;
    404c:	06 c0       	rjmp	.+12     	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
    404e:	84 ef       	ldi	r24, 0xF4	; 244
    4050:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    4052:	03 c0       	rjmp	.+6      	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
    4054:	00 00       	nop
    4056:	01 c0       	rjmp	.+2      	; 0x405a <__RODATA_PM_OFFSET__+0x5a>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    4058:	00 00       	nop
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    405a:	89 81       	ldd	r24, Y+1	; 0x01
}
    405c:	2f 96       	adiw	r28, 0x0f	; 15
    405e:	cd bf       	out	0x3d, r28	; 61
    4060:	de bf       	out	0x3e, r29	; 62
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	1f 91       	pop	r17
    4068:	0f 91       	pop	r16
    406a:	08 95       	ret

0000406c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	1f 92       	push	r1
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
	sint8 ret = M2M_SUCCESS;	
    4076:	19 82       	std	Y+1, r1	; 0x01
	while (gstrHifCxt.u8Interrupt) {
    4078:	0b c0       	rjmp	.+22     	; 0x4090 <hif_handle_isr+0x24>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    407a:	80 91 d9 29 	lds	r24, 0x29D9	; 0x8029d9 <gstrHifCxt+0x3>
    407e:	81 50       	subi	r24, 0x01	; 1
    4080:	80 93 d9 29 	sts	0x29D9, r24	; 0x8029d9 <gstrHifCxt+0x3>
		while(1)
		{
			ret = hif_isr();
    4084:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <hif_isr>
    4088:	89 83       	std	Y+1, r24	; 0x01
			if(ret == M2M_SUCCESS) {
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	88 23       	and	r24, r24
    408e:	d1 f7       	brne	.-12     	; 0x4084 <hif_handle_isr+0x18>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    4090:	80 91 d9 29 	lds	r24, 0x29D9	; 0x8029d9 <gstrHifCxt+0x3>
    4094:	88 23       	and	r24, r24
    4096:	89 f7       	brne	.-30     	; 0x407a <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    4098:	89 81       	ldd	r24, Y+1	; 0x01
}
    409a:	0f 90       	pop	r0
    409c:	df 91       	pop	r29
    409e:	cf 91       	pop	r28
    40a0:	08 95       	ret

000040a2 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    40a2:	ef 92       	push	r14
    40a4:	ff 92       	push	r15
    40a6:	0f 93       	push	r16
    40a8:	1f 93       	push	r17
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62
    40b2:	2a 97       	sbiw	r28, 0x0a	; 10
    40b4:	cd bf       	out	0x3d, r28	; 61
    40b6:	de bf       	out	0x3e, r29	; 62
    40b8:	6a 83       	std	Y+2, r22	; 0x02
    40ba:	7b 83       	std	Y+3, r23	; 0x03
    40bc:	8c 83       	std	Y+4, r24	; 0x04
    40be:	9d 83       	std	Y+5, r25	; 0x05
    40c0:	4e 83       	std	Y+6, r20	; 0x06
    40c2:	5f 83       	std	Y+7, r21	; 0x07
    40c4:	28 87       	std	Y+8, r18	; 0x08
    40c6:	39 87       	std	Y+9, r19	; 0x09
    40c8:	0a 87       	std	Y+10, r16	; 0x0a
	sint8 ret = M2M_SUCCESS;
    40ca:	19 82       	std	Y+1, r1	; 0x01
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    40cc:	8a 81       	ldd	r24, Y+2	; 0x02
    40ce:	9b 81       	ldd	r25, Y+3	; 0x03
    40d0:	ac 81       	ldd	r26, Y+4	; 0x04
    40d2:	bd 81       	ldd	r27, Y+5	; 0x05
    40d4:	89 2b       	or	r24, r25
    40d6:	8a 2b       	or	r24, r26
    40d8:	8b 2b       	or	r24, r27
    40da:	41 f0       	breq	.+16     	; 0x40ec <hif_receive+0x4a>
    40dc:	8e 81       	ldd	r24, Y+6	; 0x06
    40de:	9f 81       	ldd	r25, Y+7	; 0x07
    40e0:	89 2b       	or	r24, r25
    40e2:	21 f0       	breq	.+8      	; 0x40ec <hif_receive+0x4a>
    40e4:	88 85       	ldd	r24, Y+8	; 0x08
    40e6:	99 85       	ldd	r25, Y+9	; 0x09
    40e8:	89 2b       	or	r24, r25
    40ea:	51 f4       	brne	.+20     	; 0x4100 <hif_receive+0x5e>
	{
		if(isDone)
    40ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    40ee:	88 23       	and	r24, r24
    40f0:	21 f0       	breq	.+8      	; 0x40fa <hif_receive+0x58>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    40f2:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <hif_set_rx_done>
    40f6:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    40f8:	96 c0       	rjmp	.+300    	; 0x4226 <hif_receive+0x184>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    40fa:	84 ef       	ldi	r24, 0xF4	; 244
    40fc:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    40fe:	93 c0       	rjmp	.+294    	; 0x4226 <hif_receive+0x184>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    4100:	88 85       	ldd	r24, Y+8	; 0x08
    4102:	99 85       	ldd	r25, Y+9	; 0x09
    4104:	9c 01       	movw	r18, r24
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <gstrHifCxt+0x8>
    410e:	90 91 df 29 	lds	r25, 0x29DF	; 0x8029df <gstrHifCxt+0x9>
    4112:	a0 91 e0 29 	lds	r26, 0x29E0	; 0x8029e0 <gstrHifCxt+0xa>
    4116:	b0 91 e1 29 	lds	r27, 0x29E1	; 0x8029e1 <gstrHifCxt+0xb>
    411a:	82 17       	cp	r24, r18
    411c:	93 07       	cpc	r25, r19
    411e:	a4 07       	cpc	r26, r20
    4120:	b5 07       	cpc	r27, r21
    4122:	18 f4       	brcc	.+6      	; 0x412a <hif_receive+0x88>
	{
		ret = M2M_ERR_FAIL;
    4124:	84 ef       	ldi	r24, 0xF4	; 244
    4126:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
    4128:	7e c0       	rjmp	.+252    	; 0x4226 <hif_receive+0x184>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    412a:	20 91 da 29 	lds	r18, 0x29DA	; 0x8029da <gstrHifCxt+0x4>
    412e:	30 91 db 29 	lds	r19, 0x29DB	; 0x8029db <gstrHifCxt+0x5>
    4132:	40 91 dc 29 	lds	r20, 0x29DC	; 0x8029dc <gstrHifCxt+0x6>
    4136:	50 91 dd 29 	lds	r21, 0x29DD	; 0x8029dd <gstrHifCxt+0x7>
    413a:	8a 81       	ldd	r24, Y+2	; 0x02
    413c:	9b 81       	ldd	r25, Y+3	; 0x03
    413e:	ac 81       	ldd	r26, Y+4	; 0x04
    4140:	bd 81       	ldd	r27, Y+5	; 0x05
    4142:	82 17       	cp	r24, r18
    4144:	93 07       	cpc	r25, r19
    4146:	a4 07       	cpc	r26, r20
    4148:	b5 07       	cpc	r27, r21
    414a:	30 f1       	brcs	.+76     	; 0x4198 <hif_receive+0xf6>
    414c:	88 85       	ldd	r24, Y+8	; 0x08
    414e:	99 85       	ldd	r25, Y+9	; 0x09
    4150:	9c 01       	movw	r18, r24
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	8a 81       	ldd	r24, Y+2	; 0x02
    4158:	9b 81       	ldd	r25, Y+3	; 0x03
    415a:	ac 81       	ldd	r26, Y+4	; 0x04
    415c:	bd 81       	ldd	r27, Y+5	; 0x05
    415e:	28 0f       	add	r18, r24
    4160:	39 1f       	adc	r19, r25
    4162:	4a 1f       	adc	r20, r26
    4164:	5b 1f       	adc	r21, r27
    4166:	e0 90 da 29 	lds	r14, 0x29DA	; 0x8029da <gstrHifCxt+0x4>
    416a:	f0 90 db 29 	lds	r15, 0x29DB	; 0x8029db <gstrHifCxt+0x5>
    416e:	00 91 dc 29 	lds	r16, 0x29DC	; 0x8029dc <gstrHifCxt+0x6>
    4172:	10 91 dd 29 	lds	r17, 0x29DD	; 0x8029dd <gstrHifCxt+0x7>
    4176:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <gstrHifCxt+0x8>
    417a:	90 91 df 29 	lds	r25, 0x29DF	; 0x8029df <gstrHifCxt+0x9>
    417e:	a0 91 e0 29 	lds	r26, 0x29E0	; 0x8029e0 <gstrHifCxt+0xa>
    4182:	b0 91 e1 29 	lds	r27, 0x29E1	; 0x8029e1 <gstrHifCxt+0xb>
    4186:	8e 0d       	add	r24, r14
    4188:	9f 1d       	adc	r25, r15
    418a:	a0 1f       	adc	r26, r16
    418c:	b1 1f       	adc	r27, r17
    418e:	82 17       	cp	r24, r18
    4190:	93 07       	cpc	r25, r19
    4192:	a4 07       	cpc	r26, r20
    4194:	b5 07       	cpc	r27, r21
    4196:	18 f4       	brcc	.+6      	; 0x419e <hif_receive+0xfc>
	{
		ret = M2M_ERR_FAIL;
    4198:	84 ef       	ldi	r24, 0xF4	; 244
    419a:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    419c:	44 c0       	rjmp	.+136    	; 0x4226 <hif_receive+0x184>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    419e:	88 85       	ldd	r24, Y+8	; 0x08
    41a0:	99 85       	ldd	r25, Y+9	; 0x09
    41a2:	9c 01       	movw	r18, r24
    41a4:	40 e0       	ldi	r20, 0x00	; 0
    41a6:	50 e0       	ldi	r21, 0x00	; 0
    41a8:	6e 81       	ldd	r22, Y+6	; 0x06
    41aa:	7f 81       	ldd	r23, Y+7	; 0x07
    41ac:	8a 81       	ldd	r24, Y+2	; 0x02
    41ae:	9b 81       	ldd	r25, Y+3	; 0x03
    41b0:	ac 81       	ldd	r26, Y+4	; 0x04
    41b2:	bd 81       	ldd	r27, Y+5	; 0x05
    41b4:	89 01       	movw	r16, r18
    41b6:	9a 01       	movw	r18, r20
    41b8:	ab 01       	movw	r20, r22
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	0e 94 15 2c 	call	0x582a	; 0x582a <nm_read_block>
    41c2:	89 83       	std	Y+1, r24	; 0x01
	if(ret != M2M_SUCCESS)goto ERR1;
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	88 23       	and	r24, r24
    41c8:	69 f5       	brne	.+90     	; 0x4224 <hif_receive+0x182>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    41ca:	20 91 da 29 	lds	r18, 0x29DA	; 0x8029da <gstrHifCxt+0x4>
    41ce:	30 91 db 29 	lds	r19, 0x29DB	; 0x8029db <gstrHifCxt+0x5>
    41d2:	40 91 dc 29 	lds	r20, 0x29DC	; 0x8029dc <gstrHifCxt+0x6>
    41d6:	50 91 dd 29 	lds	r21, 0x29DD	; 0x8029dd <gstrHifCxt+0x7>
    41da:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <gstrHifCxt+0x8>
    41de:	90 91 df 29 	lds	r25, 0x29DF	; 0x8029df <gstrHifCxt+0x9>
    41e2:	a0 91 e0 29 	lds	r26, 0x29E0	; 0x8029e0 <gstrHifCxt+0xa>
    41e6:	b0 91 e1 29 	lds	r27, 0x29E1	; 0x8029e1 <gstrHifCxt+0xb>
    41ea:	28 0f       	add	r18, r24
    41ec:	39 1f       	adc	r19, r25
    41ee:	4a 1f       	adc	r20, r26
    41f0:	5b 1f       	adc	r21, r27
    41f2:	88 85       	ldd	r24, Y+8	; 0x08
    41f4:	99 85       	ldd	r25, Y+9	; 0x09
    41f6:	7c 01       	movw	r14, r24
    41f8:	00 e0       	ldi	r16, 0x00	; 0
    41fa:	10 e0       	ldi	r17, 0x00	; 0
    41fc:	8a 81       	ldd	r24, Y+2	; 0x02
    41fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4200:	ac 81       	ldd	r26, Y+4	; 0x04
    4202:	bd 81       	ldd	r27, Y+5	; 0x05
    4204:	8e 0d       	add	r24, r14
    4206:	9f 1d       	adc	r25, r15
    4208:	a0 1f       	adc	r26, r16
    420a:	b1 1f       	adc	r27, r17
    420c:	28 17       	cp	r18, r24
    420e:	39 07       	cpc	r19, r25
    4210:	4a 07       	cpc	r20, r26
    4212:	5b 07       	cpc	r21, r27
    4214:	19 f0       	breq	.+6      	; 0x421c <hif_receive+0x17a>
    4216:	8a 85       	ldd	r24, Y+10	; 0x0a
    4218:	88 23       	and	r24, r24
    421a:	29 f0       	breq	.+10     	; 0x4226 <hif_receive+0x184>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    421c:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <hif_set_rx_done>
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	01 c0       	rjmp	.+2      	; 0x4226 <hif_receive+0x184>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    4224:	00 00       	nop
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    4226:	89 81       	ldd	r24, Y+1	; 0x01
}
    4228:	2a 96       	adiw	r28, 0x0a	; 10
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	de bf       	out	0x3e, r29	; 62
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	ff 90       	pop	r15
    4238:	ef 90       	pop	r14
    423a:	08 95       	ret

0000423c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    423c:	cf 93       	push	r28
    423e:	df 93       	push	r29
    4240:	00 d0       	rcall	.+0      	; 0x4242 <hif_register_cb+0x6>
    4242:	00 d0       	rcall	.+0      	; 0x4244 <hif_register_cb+0x8>
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	8a 83       	std	Y+2, r24	; 0x02
    424a:	6b 83       	std	Y+3, r22	; 0x03
    424c:	7c 83       	std	Y+4, r23	; 0x04
	sint8 ret = M2M_SUCCESS;
    424e:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Grp)
    4250:	8a 81       	ldd	r24, Y+2	; 0x02
    4252:	88 2f       	mov	r24, r24
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	09 2e       	mov	r0, r25
    4258:	00 0c       	add	r0, r0
    425a:	aa 0b       	sbc	r26, r26
    425c:	bb 0b       	sbc	r27, r27
    425e:	41 e0       	ldi	r20, 0x01	; 1
    4260:	50 e0       	ldi	r21, 0x00	; 0
    4262:	26 e0       	ldi	r18, 0x06	; 6
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	84 1b       	sub	r24, r20
    4268:	95 0b       	sbc	r25, r21
    426a:	28 17       	cp	r18, r24
    426c:	39 07       	cpc	r19, r25
    426e:	b0 f1       	brcs	.+108    	; 0x42dc <hif_register_cb+0xa0>
    4270:	88 5a       	subi	r24, 0xA8	; 168
    4272:	9f 4f       	sbci	r25, 0xFF	; 255
    4274:	fc 01       	movw	r30, r24
    4276:	0c 94 71 42 	jmp	0x84e2	; 0x84e2 <__tablejump2__>
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    427a:	8b 81       	ldd	r24, Y+3	; 0x03
    427c:	9c 81       	ldd	r25, Y+4	; 0x04
    427e:	80 93 e4 29 	sts	0x29E4, r24	; 0x8029e4 <gstrHifCxt+0xe>
    4282:	90 93 e5 29 	sts	0x29E5, r25	; 0x8029e5 <gstrHifCxt+0xf>
			break;
    4286:	2d c0       	rjmp	.+90     	; 0x42e2 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    4288:	8b 81       	ldd	r24, Y+3	; 0x03
    428a:	9c 81       	ldd	r25, Y+4	; 0x04
    428c:	80 93 e2 29 	sts	0x29E2, r24	; 0x8029e2 <gstrHifCxt+0xc>
    4290:	90 93 e3 29 	sts	0x29E3, r25	; 0x8029e3 <gstrHifCxt+0xd>
			break;
    4294:	26 c0       	rjmp	.+76     	; 0x42e2 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    4296:	8b 81       	ldd	r24, Y+3	; 0x03
    4298:	9c 81       	ldd	r25, Y+4	; 0x04
    429a:	80 93 e6 29 	sts	0x29E6, r24	; 0x8029e6 <gstrHifCxt+0x10>
    429e:	90 93 e7 29 	sts	0x29E7, r25	; 0x8029e7 <gstrHifCxt+0x11>
			break;
    42a2:	1f c0       	rjmp	.+62     	; 0x42e2 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	9c 81       	ldd	r25, Y+4	; 0x04
    42a8:	80 93 ea 29 	sts	0x29EA, r24	; 0x8029ea <gstrHifCxt+0x14>
    42ac:	90 93 eb 29 	sts	0x29EB, r25	; 0x8029eb <gstrHifCxt+0x15>
			break;
    42b0:	18 c0       	rjmp	.+48     	; 0x42e2 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    42b2:	8b 81       	ldd	r24, Y+3	; 0x03
    42b4:	9c 81       	ldd	r25, Y+4	; 0x04
    42b6:	80 93 ec 29 	sts	0x29EC, r24	; 0x8029ec <gstrHifCxt+0x16>
    42ba:	90 93 ed 29 	sts	0x29ED, r25	; 0x8029ed <gstrHifCxt+0x17>
			break;
    42be:	11 c0       	rjmp	.+34     	; 0x42e2 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    42c0:	8b 81       	ldd	r24, Y+3	; 0x03
    42c2:	9c 81       	ldd	r25, Y+4	; 0x04
    42c4:	80 93 e8 29 	sts	0x29E8, r24	; 0x8029e8 <gstrHifCxt+0x12>
    42c8:	90 93 e9 29 	sts	0x29E9, r25	; 0x8029e9 <gstrHifCxt+0x13>
			break;
    42cc:	0a c0       	rjmp	.+20     	; 0x42e2 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    42ce:	8b 81       	ldd	r24, Y+3	; 0x03
    42d0:	9c 81       	ldd	r25, Y+4	; 0x04
    42d2:	80 93 ee 29 	sts	0x29EE, r24	; 0x8029ee <gstrHifCxt+0x18>
    42d6:	90 93 ef 29 	sts	0x29EF, r25	; 0x8029ef <gstrHifCxt+0x19>
			break;
    42da:	03 c0       	rjmp	.+6      	; 0x42e2 <hif_register_cb+0xa6>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
    42dc:	84 ef       	ldi	r24, 0xF4	; 244
    42de:	89 83       	std	Y+1, r24	; 0x01
			break;
    42e0:	00 00       	nop
	}
	return ret;
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    42e4:	24 96       	adiw	r28, 0x04	; 4
    42e6:	cd bf       	out	0x3d, r28	; 61
    42e8:	de bf       	out	0x3e, r29	; 62
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	08 95       	ret

000042f0 <m2m_wifi_cb>:
}

sint8 m2m_wifi_default_connect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}
    42f0:	0f 93       	push	r16
    42f2:	cf 93       	push	r28
    42f4:	df 93       	push	r29
    42f6:	cd b7       	in	r28, 0x3d	; 61
    42f8:	de b7       	in	r29, 0x3e	; 62
    42fa:	c5 5a       	subi	r28, 0xA5	; 165
    42fc:	d1 09       	sbc	r29, r1
    42fe:	cd bf       	out	0x3d, r28	; 61
    4300:	de bf       	out	0x3e, r29	; 62
    4302:	fe 01       	movw	r30, r28
    4304:	e1 56       	subi	r30, 0x61	; 97
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	80 83       	st	Z, r24
    430a:	ce 01       	movw	r24, r28
    430c:	80 56       	subi	r24, 0x60	; 96
    430e:	9f 4f       	sbci	r25, 0xFF	; 255
    4310:	fc 01       	movw	r30, r24
    4312:	60 83       	st	Z, r22
    4314:	71 83       	std	Z+1, r23	; 0x01
    4316:	ce 01       	movw	r24, r28
    4318:	8e 55       	subi	r24, 0x5E	; 94
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	fc 01       	movw	r30, r24
    431e:	20 83       	st	Z, r18
    4320:	31 83       	std	Z+1, r19	; 0x01
    4322:	42 83       	std	Z+2, r20	; 0x02
    4324:	53 83       	std	Z+3, r21	; 0x03
    4326:	ce 01       	movw	r24, r28
    4328:	81 56       	subi	r24, 0x61	; 97
    432a:	9f 4f       	sbci	r25, 0xFF	; 255
    432c:	fc 01       	movw	r30, r24
    432e:	80 81       	ld	r24, Z
    4330:	8c 32       	cpi	r24, 0x2C	; 44
    4332:	39 f5       	brne	.+78     	; 0x4382 <m2m_wifi_cb+0x92>
    4334:	ae 01       	movw	r20, r28
    4336:	47 5f       	subi	r20, 0xF7	; 247
    4338:	5f 4f       	sbci	r21, 0xFF	; 255
    433a:	ce 01       	movw	r24, r28
    433c:	8e 55       	subi	r24, 0x5E	; 94
    433e:	9f 4f       	sbci	r25, 0xFF	; 255
    4340:	fc 01       	movw	r30, r24
    4342:	80 81       	ld	r24, Z
    4344:	91 81       	ldd	r25, Z+1	; 0x01
    4346:	a2 81       	ldd	r26, Z+2	; 0x02
    4348:	b3 81       	ldd	r27, Z+3	; 0x03
    434a:	00 e0       	ldi	r16, 0x00	; 0
    434c:	24 e0       	ldi	r18, 0x04	; 4
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	bc 01       	movw	r22, r24
    4352:	cd 01       	movw	r24, r26
    4354:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    4358:	88 23       	and	r24, r24
    435a:	09 f0       	breq	.+2      	; 0x435e <m2m_wifi_cb+0x6e>
    435c:	62 c2       	rjmp	.+1220   	; 0x4822 <m2m_wifi_cb+0x532>
    435e:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4362:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4366:	89 2b       	or	r24, r25
    4368:	09 f4       	brne	.+2      	; 0x436c <m2m_wifi_cb+0x7c>
    436a:	5b c2       	rjmp	.+1206   	; 0x4822 <m2m_wifi_cb+0x532>
    436c:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4370:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4374:	ce 01       	movw	r24, r28
    4376:	09 96       	adiw	r24, 0x09	; 9
    4378:	bc 01       	movw	r22, r24
    437a:	8c e2       	ldi	r24, 0x2C	; 44
    437c:	f9 01       	movw	r30, r18
    437e:	09 95       	icall
    4380:	50 c2       	rjmp	.+1184   	; 0x4822 <m2m_wifi_cb+0x532>
    4382:	ce 01       	movw	r24, r28
    4384:	81 56       	subi	r24, 0x61	; 97
    4386:	9f 4f       	sbci	r25, 0xFF	; 255
    4388:	fc 01       	movw	r30, r24
    438a:	80 81       	ld	r24, Z
    438c:	8b 31       	cpi	r24, 0x1B	; 27
    438e:	39 f5       	brne	.+78     	; 0x43de <m2m_wifi_cb+0xee>
    4390:	ae 01       	movw	r20, r28
    4392:	43 5f       	subi	r20, 0xF3	; 243
    4394:	5f 4f       	sbci	r21, 0xFF	; 255
    4396:	ce 01       	movw	r24, r28
    4398:	8e 55       	subi	r24, 0x5E	; 94
    439a:	9f 4f       	sbci	r25, 0xFF	; 255
    439c:	fc 01       	movw	r30, r24
    439e:	80 81       	ld	r24, Z
    43a0:	91 81       	ldd	r25, Z+1	; 0x01
    43a2:	a2 81       	ldd	r26, Z+2	; 0x02
    43a4:	b3 81       	ldd	r27, Z+3	; 0x03
    43a6:	00 e0       	ldi	r16, 0x00	; 0
    43a8:	28 e0       	ldi	r18, 0x08	; 8
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	bc 01       	movw	r22, r24
    43ae:	cd 01       	movw	r24, r26
    43b0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    43b4:	88 23       	and	r24, r24
    43b6:	09 f0       	breq	.+2      	; 0x43ba <m2m_wifi_cb+0xca>
    43b8:	34 c2       	rjmp	.+1128   	; 0x4822 <m2m_wifi_cb+0x532>
    43ba:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    43be:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    43c2:	89 2b       	or	r24, r25
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <m2m_wifi_cb+0xd8>
    43c6:	2d c2       	rjmp	.+1114   	; 0x4822 <m2m_wifi_cb+0x532>
    43c8:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    43cc:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    43d0:	ce 01       	movw	r24, r28
    43d2:	0d 96       	adiw	r24, 0x0d	; 13
    43d4:	bc 01       	movw	r22, r24
    43d6:	8b e1       	ldi	r24, 0x1B	; 27
    43d8:	f9 01       	movw	r30, r18
    43da:	09 95       	icall
    43dc:	22 c2       	rjmp	.+1092   	; 0x4822 <m2m_wifi_cb+0x532>
    43de:	ce 01       	movw	r24, r28
    43e0:	81 56       	subi	r24, 0x61	; 97
    43e2:	9f 4f       	sbci	r25, 0xFF	; 255
    43e4:	fc 01       	movw	r30, r24
    43e6:	80 81       	ld	r24, Z
    43e8:	86 30       	cpi	r24, 0x06	; 6
    43ea:	39 f5       	brne	.+78     	; 0x443a <m2m_wifi_cb+0x14a>
    43ec:	ae 01       	movw	r20, r28
    43ee:	45 5c       	subi	r20, 0xC5	; 197
    43f0:	5f 4f       	sbci	r21, 0xFF	; 255
    43f2:	ce 01       	movw	r24, r28
    43f4:	8e 55       	subi	r24, 0x5E	; 94
    43f6:	9f 4f       	sbci	r25, 0xFF	; 255
    43f8:	fc 01       	movw	r30, r24
    43fa:	80 81       	ld	r24, Z
    43fc:	91 81       	ldd	r25, Z+1	; 0x01
    43fe:	a2 81       	ldd	r26, Z+2	; 0x02
    4400:	b3 81       	ldd	r27, Z+3	; 0x03
    4402:	01 e0       	ldi	r16, 0x01	; 1
    4404:	20 e3       	ldi	r18, 0x30	; 48
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	bc 01       	movw	r22, r24
    440a:	cd 01       	movw	r24, r26
    440c:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    4410:	88 23       	and	r24, r24
    4412:	09 f0       	breq	.+2      	; 0x4416 <m2m_wifi_cb+0x126>
    4414:	06 c2       	rjmp	.+1036   	; 0x4822 <m2m_wifi_cb+0x532>
    4416:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    441a:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    441e:	89 2b       	or	r24, r25
    4420:	09 f4       	brne	.+2      	; 0x4424 <m2m_wifi_cb+0x134>
    4422:	ff c1       	rjmp	.+1022   	; 0x4822 <m2m_wifi_cb+0x532>
    4424:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4428:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    442c:	ce 01       	movw	r24, r28
    442e:	cb 96       	adiw	r24, 0x3b	; 59
    4430:	bc 01       	movw	r22, r24
    4432:	86 e0       	ldi	r24, 0x06	; 6
    4434:	f9 01       	movw	r30, r18
    4436:	09 95       	icall
    4438:	f4 c1       	rjmp	.+1000   	; 0x4822 <m2m_wifi_cb+0x532>
    443a:	ce 01       	movw	r24, r28
    443c:	81 56       	subi	r24, 0x61	; 97
    443e:	9f 4f       	sbci	r25, 0xFF	; 255
    4440:	fc 01       	movw	r30, r24
    4442:	80 81       	ld	r24, Z
    4444:	8e 30       	cpi	r24, 0x0E	; 14
    4446:	09 f4       	brne	.+2      	; 0x444a <m2m_wifi_cb+0x15a>
    4448:	ec c1       	rjmp	.+984    	; 0x4822 <m2m_wifi_cb+0x532>
    444a:	ce 01       	movw	r24, r28
    444c:	81 56       	subi	r24, 0x61	; 97
    444e:	9f 4f       	sbci	r25, 0xFF	; 255
    4450:	fc 01       	movw	r30, r24
    4452:	80 81       	ld	r24, Z
    4454:	82 33       	cpi	r24, 0x32	; 50
    4456:	39 f5       	brne	.+78     	; 0x44a6 <m2m_wifi_cb+0x1b6>
    4458:	ae 01       	movw	r20, r28
    445a:	4b 5e       	subi	r20, 0xEB	; 235
    445c:	5f 4f       	sbci	r21, 0xFF	; 255
    445e:	ce 01       	movw	r24, r28
    4460:	8e 55       	subi	r24, 0x5E	; 94
    4462:	9f 4f       	sbci	r25, 0xFF	; 255
    4464:	fc 01       	movw	r30, r24
    4466:	80 81       	ld	r24, Z
    4468:	91 81       	ldd	r25, Z+1	; 0x01
    446a:	a2 81       	ldd	r26, Z+2	; 0x02
    446c:	b3 81       	ldd	r27, Z+3	; 0x03
    446e:	00 e0       	ldi	r16, 0x00	; 0
    4470:	24 e1       	ldi	r18, 0x14	; 20
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	bc 01       	movw	r22, r24
    4476:	cd 01       	movw	r24, r26
    4478:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    447c:	88 23       	and	r24, r24
    447e:	09 f0       	breq	.+2      	; 0x4482 <m2m_wifi_cb+0x192>
    4480:	d0 c1       	rjmp	.+928    	; 0x4822 <m2m_wifi_cb+0x532>
    4482:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4486:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    448a:	89 2b       	or	r24, r25
    448c:	09 f4       	brne	.+2      	; 0x4490 <m2m_wifi_cb+0x1a0>
    448e:	c9 c1       	rjmp	.+914    	; 0x4822 <m2m_wifi_cb+0x532>
    4490:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4494:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4498:	ce 01       	movw	r24, r28
    449a:	45 96       	adiw	r24, 0x15	; 21
    449c:	bc 01       	movw	r22, r24
    449e:	82 e3       	ldi	r24, 0x32	; 50
    44a0:	f9 01       	movw	r30, r18
    44a2:	09 95       	icall
    44a4:	be c1       	rjmp	.+892    	; 0x4822 <m2m_wifi_cb+0x532>
    44a6:	ce 01       	movw	r24, r28
    44a8:	81 56       	subi	r24, 0x61	; 97
    44aa:	9f 4f       	sbci	r25, 0xFF	; 255
    44ac:	fc 01       	movw	r30, r24
    44ae:	80 81       	ld	r24, Z
    44b0:	8f 32       	cpi	r24, 0x2F	; 47
    44b2:	81 f5       	brne	.+96     	; 0x4514 <m2m_wifi_cb+0x224>
    44b4:	ce 01       	movw	r24, r28
    44b6:	cb 96       	adiw	r24, 0x3b	; 59
    44b8:	24 e6       	ldi	r18, 0x64	; 100
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e0       	ldi	r20, 0x00	; 0
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	60 e0       	ldi	r22, 0x00	; 0
    44c2:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <m2m_memset>
    44c6:	ae 01       	movw	r20, r28
    44c8:	45 5c       	subi	r20, 0xC5	; 197
    44ca:	5f 4f       	sbci	r21, 0xFF	; 255
    44cc:	ce 01       	movw	r24, r28
    44ce:	8e 55       	subi	r24, 0x5E	; 94
    44d0:	9f 4f       	sbci	r25, 0xFF	; 255
    44d2:	fc 01       	movw	r30, r24
    44d4:	80 81       	ld	r24, Z
    44d6:	91 81       	ldd	r25, Z+1	; 0x01
    44d8:	a2 81       	ldd	r26, Z+2	; 0x02
    44da:	b3 81       	ldd	r27, Z+3	; 0x03
    44dc:	00 e0       	ldi	r16, 0x00	; 0
    44de:	24 e6       	ldi	r18, 0x64	; 100
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	bc 01       	movw	r22, r24
    44e4:	cd 01       	movw	r24, r26
    44e6:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    44ea:	88 23       	and	r24, r24
    44ec:	09 f0       	breq	.+2      	; 0x44f0 <m2m_wifi_cb+0x200>
    44ee:	99 c1       	rjmp	.+818    	; 0x4822 <m2m_wifi_cb+0x532>
    44f0:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    44f4:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    44f8:	89 2b       	or	r24, r25
    44fa:	09 f4       	brne	.+2      	; 0x44fe <m2m_wifi_cb+0x20e>
    44fc:	92 c1       	rjmp	.+804    	; 0x4822 <m2m_wifi_cb+0x532>
    44fe:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4502:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4506:	ce 01       	movw	r24, r28
    4508:	cb 96       	adiw	r24, 0x3b	; 59
    450a:	bc 01       	movw	r22, r24
    450c:	8f e2       	ldi	r24, 0x2F	; 47
    450e:	f9 01       	movw	r30, r18
    4510:	09 95       	icall
    4512:	87 c1       	rjmp	.+782    	; 0x4822 <m2m_wifi_cb+0x532>
    4514:	ce 01       	movw	r24, r28
    4516:	81 56       	subi	r24, 0x61	; 97
    4518:	9f 4f       	sbci	r25, 0xFF	; 255
    451a:	fc 01       	movw	r30, r24
    451c:	80 81       	ld	r24, Z
    451e:	84 33       	cpi	r24, 0x34	; 52
    4520:	31 f5       	brne	.+76     	; 0x456e <m2m_wifi_cb+0x27e>
    4522:	ae 01       	movw	r20, r28
    4524:	47 5d       	subi	r20, 0xD7	; 215
    4526:	5f 4f       	sbci	r21, 0xFF	; 255
    4528:	ce 01       	movw	r24, r28
    452a:	8e 55       	subi	r24, 0x5E	; 94
    452c:	9f 4f       	sbci	r25, 0xFF	; 255
    452e:	fc 01       	movw	r30, r24
    4530:	80 81       	ld	r24, Z
    4532:	91 81       	ldd	r25, Z+1	; 0x01
    4534:	a2 81       	ldd	r26, Z+2	; 0x02
    4536:	b3 81       	ldd	r27, Z+3	; 0x03
    4538:	00 e0       	ldi	r16, 0x00	; 0
    453a:	24 e0       	ldi	r18, 0x04	; 4
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	bc 01       	movw	r22, r24
    4540:	cd 01       	movw	r24, r26
    4542:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    4546:	88 23       	and	r24, r24
    4548:	09 f0       	breq	.+2      	; 0x454c <m2m_wifi_cb+0x25c>
    454a:	6b c1       	rjmp	.+726    	; 0x4822 <m2m_wifi_cb+0x532>
    454c:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4550:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4554:	89 2b       	or	r24, r25
    4556:	09 f4       	brne	.+2      	; 0x455a <m2m_wifi_cb+0x26a>
    4558:	64 c1       	rjmp	.+712    	; 0x4822 <m2m_wifi_cb+0x532>
    455a:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    455e:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4562:	60 e0       	ldi	r22, 0x00	; 0
    4564:	70 e0       	ldi	r23, 0x00	; 0
    4566:	84 e3       	ldi	r24, 0x34	; 52
    4568:	f9 01       	movw	r30, r18
    456a:	09 95       	icall
    456c:	5a c1       	rjmp	.+692    	; 0x4822 <m2m_wifi_cb+0x532>
    456e:	ce 01       	movw	r24, r28
    4570:	81 56       	subi	r24, 0x61	; 97
    4572:	9f 4f       	sbci	r25, 0xFF	; 255
    4574:	fc 01       	movw	r30, r24
    4576:	80 81       	ld	r24, Z
    4578:	81 31       	cpi	r24, 0x11	; 17
    457a:	61 f5       	brne	.+88     	; 0x45d4 <m2m_wifi_cb+0x2e4>
    457c:	10 92 e1 28 	sts	0x28E1, r1	; 0x8028e1 <gu8scanInProgress>
    4580:	ae 01       	movw	r20, r28
    4582:	43 5d       	subi	r20, 0xD3	; 211
    4584:	5f 4f       	sbci	r21, 0xFF	; 255
    4586:	ce 01       	movw	r24, r28
    4588:	8e 55       	subi	r24, 0x5E	; 94
    458a:	9f 4f       	sbci	r25, 0xFF	; 255
    458c:	fc 01       	movw	r30, r24
    458e:	80 81       	ld	r24, Z
    4590:	91 81       	ldd	r25, Z+1	; 0x01
    4592:	a2 81       	ldd	r26, Z+2	; 0x02
    4594:	b3 81       	ldd	r27, Z+3	; 0x03
    4596:	00 e0       	ldi	r16, 0x00	; 0
    4598:	24 e0       	ldi	r18, 0x04	; 4
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	bc 01       	movw	r22, r24
    459e:	cd 01       	movw	r24, r26
    45a0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    45a4:	88 23       	and	r24, r24
    45a6:	09 f0       	breq	.+2      	; 0x45aa <m2m_wifi_cb+0x2ba>
    45a8:	3c c1       	rjmp	.+632    	; 0x4822 <m2m_wifi_cb+0x532>
    45aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    45ac:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <gu8ChNum>
    45b0:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    45b4:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    45b8:	89 2b       	or	r24, r25
    45ba:	09 f4       	brne	.+2      	; 0x45be <m2m_wifi_cb+0x2ce>
    45bc:	32 c1       	rjmp	.+612    	; 0x4822 <m2m_wifi_cb+0x532>
    45be:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    45c2:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    45c6:	ce 01       	movw	r24, r28
    45c8:	8d 96       	adiw	r24, 0x2d	; 45
    45ca:	bc 01       	movw	r22, r24
    45cc:	81 e1       	ldi	r24, 0x11	; 17
    45ce:	f9 01       	movw	r30, r18
    45d0:	09 95       	icall
    45d2:	27 c1       	rjmp	.+590    	; 0x4822 <m2m_wifi_cb+0x532>
    45d4:	ce 01       	movw	r24, r28
    45d6:	81 56       	subi	r24, 0x61	; 97
    45d8:	9f 4f       	sbci	r25, 0xFF	; 255
    45da:	fc 01       	movw	r30, r24
    45dc:	80 81       	ld	r24, Z
    45de:	83 31       	cpi	r24, 0x13	; 19
    45e0:	39 f5       	brne	.+78     	; 0x4630 <m2m_wifi_cb+0x340>
    45e2:	ae 01       	movw	r20, r28
    45e4:	45 5c       	subi	r20, 0xC5	; 197
    45e6:	5f 4f       	sbci	r21, 0xFF	; 255
    45e8:	ce 01       	movw	r24, r28
    45ea:	8e 55       	subi	r24, 0x5E	; 94
    45ec:	9f 4f       	sbci	r25, 0xFF	; 255
    45ee:	fc 01       	movw	r30, r24
    45f0:	80 81       	ld	r24, Z
    45f2:	91 81       	ldd	r25, Z+1	; 0x01
    45f4:	a2 81       	ldd	r26, Z+2	; 0x02
    45f6:	b3 81       	ldd	r27, Z+3	; 0x03
    45f8:	00 e0       	ldi	r16, 0x00	; 0
    45fa:	2c e2       	ldi	r18, 0x2C	; 44
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	bc 01       	movw	r22, r24
    4600:	cd 01       	movw	r24, r26
    4602:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    4606:	88 23       	and	r24, r24
    4608:	09 f0       	breq	.+2      	; 0x460c <m2m_wifi_cb+0x31c>
    460a:	0b c1       	rjmp	.+534    	; 0x4822 <m2m_wifi_cb+0x532>
    460c:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4610:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4614:	89 2b       	or	r24, r25
    4616:	09 f4       	brne	.+2      	; 0x461a <m2m_wifi_cb+0x32a>
    4618:	04 c1       	rjmp	.+520    	; 0x4822 <m2m_wifi_cb+0x532>
    461a:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    461e:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4622:	ce 01       	movw	r24, r28
    4624:	cb 96       	adiw	r24, 0x3b	; 59
    4626:	bc 01       	movw	r22, r24
    4628:	83 e1       	ldi	r24, 0x13	; 19
    462a:	f9 01       	movw	r30, r18
    462c:	09 95       	icall
    462e:	f9 c0       	rjmp	.+498    	; 0x4822 <m2m_wifi_cb+0x532>
    4630:	ce 01       	movw	r24, r28
    4632:	81 56       	subi	r24, 0x61	; 97
    4634:	9f 4f       	sbci	r25, 0xFF	; 255
    4636:	fc 01       	movw	r30, r24
    4638:	80 81       	ld	r24, Z
    463a:	84 30       	cpi	r24, 0x04	; 4
    463c:	39 f5       	brne	.+78     	; 0x468c <m2m_wifi_cb+0x39c>
    463e:	ce 01       	movw	r24, r28
    4640:	8e 55       	subi	r24, 0x5E	; 94
    4642:	9f 4f       	sbci	r25, 0xFF	; 255
    4644:	fc 01       	movw	r30, r24
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	a2 81       	ldd	r26, Z+2	; 0x02
    464c:	b3 81       	ldd	r27, Z+3	; 0x03
    464e:	00 e0       	ldi	r16, 0x00	; 0
    4650:	24 e0       	ldi	r18, 0x04	; 4
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	ae 01       	movw	r20, r28
    4656:	4f 5f       	subi	r20, 0xFF	; 255
    4658:	5f 4f       	sbci	r21, 0xFF	; 255
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    4662:	88 23       	and	r24, r24
    4664:	09 f0       	breq	.+2      	; 0x4668 <m2m_wifi_cb+0x378>
    4666:	dd c0       	rjmp	.+442    	; 0x4822 <m2m_wifi_cb+0x532>
    4668:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    466c:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4670:	89 2b       	or	r24, r25
    4672:	09 f4       	brne	.+2      	; 0x4676 <m2m_wifi_cb+0x386>
    4674:	d6 c0       	rjmp	.+428    	; 0x4822 <m2m_wifi_cb+0x532>
    4676:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    467a:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    467e:	ce 01       	movw	r24, r28
    4680:	01 96       	adiw	r24, 0x01	; 1
    4682:	bc 01       	movw	r22, r24
    4684:	84 e0       	ldi	r24, 0x04	; 4
    4686:	f9 01       	movw	r30, r18
    4688:	09 95       	icall
    468a:	cb c0       	rjmp	.+406    	; 0x4822 <m2m_wifi_cb+0x532>
    468c:	ce 01       	movw	r24, r28
    468e:	81 56       	subi	r24, 0x61	; 97
    4690:	9f 4f       	sbci	r25, 0xFF	; 255
    4692:	fc 01       	movw	r30, r24
    4694:	80 81       	ld	r24, Z
    4696:	85 36       	cpi	r24, 0x65	; 101
    4698:	39 f5       	brne	.+78     	; 0x46e8 <m2m_wifi_cb+0x3f8>
    469a:	ce 01       	movw	r24, r28
    469c:	8e 55       	subi	r24, 0x5E	; 94
    469e:	9f 4f       	sbci	r25, 0xFF	; 255
    46a0:	fc 01       	movw	r30, r24
    46a2:	80 81       	ld	r24, Z
    46a4:	91 81       	ldd	r25, Z+1	; 0x01
    46a6:	a2 81       	ldd	r26, Z+2	; 0x02
    46a8:	b3 81       	ldd	r27, Z+3	; 0x03
    46aa:	00 e0       	ldi	r16, 0x00	; 0
    46ac:	24 e0       	ldi	r18, 0x04	; 4
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	ae 01       	movw	r20, r28
    46b2:	4f 5f       	subi	r20, 0xFF	; 255
    46b4:	5f 4f       	sbci	r21, 0xFF	; 255
    46b6:	bc 01       	movw	r22, r24
    46b8:	cd 01       	movw	r24, r26
    46ba:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    46be:	88 23       	and	r24, r24
    46c0:	09 f0       	breq	.+2      	; 0x46c4 <m2m_wifi_cb+0x3d4>
    46c2:	af c0       	rjmp	.+350    	; 0x4822 <m2m_wifi_cb+0x532>
    46c4:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    46c8:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    46cc:	89 2b       	or	r24, r25
    46ce:	09 f4       	brne	.+2      	; 0x46d2 <m2m_wifi_cb+0x3e2>
    46d0:	a8 c0       	rjmp	.+336    	; 0x4822 <m2m_wifi_cb+0x532>
    46d2:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    46d6:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    46da:	ce 01       	movw	r24, r28
    46dc:	01 96       	adiw	r24, 0x01	; 1
    46de:	bc 01       	movw	r22, r24
    46e0:	85 e6       	ldi	r24, 0x65	; 101
    46e2:	f9 01       	movw	r30, r18
    46e4:	09 95       	icall
    46e6:	9d c0       	rjmp	.+314    	; 0x4822 <m2m_wifi_cb+0x532>
    46e8:	ce 01       	movw	r24, r28
    46ea:	81 56       	subi	r24, 0x61	; 97
    46ec:	9f 4f       	sbci	r25, 0xFF	; 255
    46ee:	fc 01       	movw	r30, r24
    46f0:	80 81       	ld	r24, Z
    46f2:	89 30       	cpi	r24, 0x09	; 9
    46f4:	39 f5       	brne	.+78     	; 0x4744 <m2m_wifi_cb+0x454>
    46f6:	ae 01       	movw	r20, r28
    46f8:	45 5c       	subi	r20, 0xC5	; 197
    46fa:	5f 4f       	sbci	r21, 0xFF	; 255
    46fc:	ce 01       	movw	r24, r28
    46fe:	8e 55       	subi	r24, 0x5E	; 94
    4700:	9f 4f       	sbci	r25, 0xFF	; 255
    4702:	fc 01       	movw	r30, r24
    4704:	80 81       	ld	r24, Z
    4706:	91 81       	ldd	r25, Z+1	; 0x01
    4708:	a2 81       	ldd	r26, Z+2	; 0x02
    470a:	b3 81       	ldd	r27, Z+3	; 0x03
    470c:	01 e0       	ldi	r16, 0x01	; 1
    470e:	24 e6       	ldi	r18, 0x64	; 100
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	bc 01       	movw	r22, r24
    4714:	cd 01       	movw	r24, r26
    4716:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    471a:	88 23       	and	r24, r24
    471c:	09 f0       	breq	.+2      	; 0x4720 <m2m_wifi_cb+0x430>
    471e:	81 c0       	rjmp	.+258    	; 0x4822 <m2m_wifi_cb+0x532>
    4720:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4724:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4728:	89 2b       	or	r24, r25
    472a:	09 f4       	brne	.+2      	; 0x472e <m2m_wifi_cb+0x43e>
    472c:	7a c0       	rjmp	.+244    	; 0x4822 <m2m_wifi_cb+0x532>
    472e:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4732:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4736:	ce 01       	movw	r24, r28
    4738:	cb 96       	adiw	r24, 0x3b	; 59
    473a:	bc 01       	movw	r22, r24
    473c:	89 e0       	ldi	r24, 0x09	; 9
    473e:	f9 01       	movw	r30, r18
    4740:	09 95       	icall
    4742:	6f c0       	rjmp	.+222    	; 0x4822 <m2m_wifi_cb+0x532>
    4744:	ce 01       	movw	r24, r28
    4746:	81 56       	subi	r24, 0x61	; 97
    4748:	9f 4f       	sbci	r25, 0xFF	; 255
    474a:	fc 01       	movw	r30, r24
    474c:	80 81       	ld	r24, Z
    474e:	8a 32       	cpi	r24, 0x2A	; 42
    4750:	39 f5       	brne	.+78     	; 0x47a0 <m2m_wifi_cb+0x4b0>
    4752:	ae 01       	movw	r20, r28
    4754:	4f 5c       	subi	r20, 0xCF	; 207
    4756:	5f 4f       	sbci	r21, 0xFF	; 255
    4758:	ce 01       	movw	r24, r28
    475a:	8e 55       	subi	r24, 0x5E	; 94
    475c:	9f 4f       	sbci	r25, 0xFF	; 255
    475e:	fc 01       	movw	r30, r24
    4760:	80 81       	ld	r24, Z
    4762:	91 81       	ldd	r25, Z+1	; 0x01
    4764:	a2 81       	ldd	r26, Z+2	; 0x02
    4766:	b3 81       	ldd	r27, Z+3	; 0x03
    4768:	01 e0       	ldi	r16, 0x01	; 1
    476a:	24 e0       	ldi	r18, 0x04	; 4
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    4776:	88 23       	and	r24, r24
    4778:	09 f0       	breq	.+2      	; 0x477c <m2m_wifi_cb+0x48c>
    477a:	53 c0       	rjmp	.+166    	; 0x4822 <m2m_wifi_cb+0x532>
    477c:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4780:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4784:	89 2b       	or	r24, r25
    4786:	09 f4       	brne	.+2      	; 0x478a <m2m_wifi_cb+0x49a>
    4788:	4c c0       	rjmp	.+152    	; 0x4822 <m2m_wifi_cb+0x532>
    478a:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    478e:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4792:	ce 01       	movw	r24, r28
    4794:	c1 96       	adiw	r24, 0x31	; 49
    4796:	bc 01       	movw	r22, r24
    4798:	8a e2       	ldi	r24, 0x2A	; 42
    479a:	f9 01       	movw	r30, r18
    479c:	09 95       	icall
    479e:	41 c0       	rjmp	.+130    	; 0x4822 <m2m_wifi_cb+0x532>
    47a0:	ce 01       	movw	r24, r28
    47a2:	81 56       	subi	r24, 0x61	; 97
    47a4:	9f 4f       	sbci	r25, 0xFF	; 255
    47a6:	fc 01       	movw	r30, r24
    47a8:	80 81       	ld	r24, Z
    47aa:	80 32       	cpi	r24, 0x20	; 32
    47ac:	d1 f5       	brne	.+116    	; 0x4822 <m2m_wifi_cb+0x532>
    47ae:	ae 01       	movw	r20, r28
    47b0:	4b 5c       	subi	r20, 0xCB	; 203
    47b2:	5f 4f       	sbci	r21, 0xFF	; 255
    47b4:	ce 01       	movw	r24, r28
    47b6:	8e 55       	subi	r24, 0x5E	; 94
    47b8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ba:	fc 01       	movw	r30, r24
    47bc:	80 81       	ld	r24, Z
    47be:	91 81       	ldd	r25, Z+1	; 0x01
    47c0:	a2 81       	ldd	r26, Z+2	; 0x02
    47c2:	b3 81       	ldd	r27, Z+3	; 0x03
    47c4:	00 e0       	ldi	r16, 0x00	; 0
    47c6:	26 e0       	ldi	r18, 0x06	; 6
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	bc 01       	movw	r22, r24
    47cc:	cd 01       	movw	r24, r26
    47ce:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    47d2:	88 23       	and	r24, r24
    47d4:	31 f5       	brne	.+76     	; 0x4822 <m2m_wifi_cb+0x532>
    47d6:	2f a9       	ldd	r18, Y+55	; 0x37
    47d8:	38 ad       	ldd	r19, Y+56	; 0x38
    47da:	4d a9       	ldd	r20, Y+53	; 0x35
    47dc:	5e a9       	ldd	r21, Y+54	; 0x36
    47de:	ce 01       	movw	r24, r28
    47e0:	8e 55       	subi	r24, 0x5E	; 94
    47e2:	9f 4f       	sbci	r25, 0xFF	; 255
    47e4:	fc 01       	movw	r30, r24
    47e6:	80 81       	ld	r24, Z
    47e8:	91 81       	ldd	r25, Z+1	; 0x01
    47ea:	a2 81       	ldd	r26, Z+2	; 0x02
    47ec:	b3 81       	ldd	r27, Z+3	; 0x03
    47ee:	06 96       	adiw	r24, 0x06	; 6
    47f0:	a1 1d       	adc	r26, r1
    47f2:	b1 1d       	adc	r27, r1
    47f4:	01 e0       	ldi	r16, 0x01	; 1
    47f6:	bc 01       	movw	r22, r24
    47f8:	cd 01       	movw	r24, r26
    47fa:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    47fe:	88 23       	and	r24, r24
    4800:	81 f4       	brne	.+32     	; 0x4822 <m2m_wifi_cb+0x532>
    4802:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4806:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    480a:	89 2b       	or	r24, r25
    480c:	51 f0       	breq	.+20     	; 0x4822 <m2m_wifi_cb+0x532>
    480e:	20 91 e2 28 	lds	r18, 0x28E2	; 0x8028e2 <gpfAppWifiCb>
    4812:	30 91 e3 28 	lds	r19, 0x28E3	; 0x8028e3 <gpfAppWifiCb+0x1>
    4816:	ce 01       	movw	r24, r28
    4818:	c5 96       	adiw	r24, 0x35	; 53
    481a:	bc 01       	movw	r22, r24
    481c:	80 e2       	ldi	r24, 0x20	; 32
    481e:	f9 01       	movw	r30, r18
    4820:	09 95       	icall
    4822:	00 00       	nop
    4824:	cb 55       	subi	r28, 0x5B	; 91
    4826:	df 4f       	sbci	r29, 0xFF	; 255
    4828:	cd bf       	out	0x3d, r28	; 61
    482a:	de bf       	out	0x3e, r29	; 62
    482c:	df 91       	pop	r29
    482e:	cf 91       	pop	r28
    4830:	0f 91       	pop	r16
    4832:	08 95       	ret

00004834 <m2m_wifi_init>:
    4834:	cf 93       	push	r28
    4836:	df 93       	push	r29
    4838:	cd b7       	in	r28, 0x3d	; 61
    483a:	de b7       	in	r29, 0x3e	; 62
    483c:	aa 97       	sbiw	r28, 0x2a	; 42
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	89 a7       	std	Y+41, r24	; 0x29
    4844:	9a a7       	std	Y+42, r25	; 0x2a
    4846:	19 82       	std	Y+1, r1	; 0x01
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	88 a7       	std	Y+40, r24	; 0x28
    484c:	89 a5       	ldd	r24, Y+41	; 0x29
    484e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4850:	89 2b       	or	r24, r25
    4852:	19 f4       	brne	.+6      	; 0x485a <m2m_wifi_init+0x26>
    4854:	84 ef       	ldi	r24, 0xF4	; 244
    4856:	89 83       	std	Y+1, r24	; 0x01
    4858:	2d c0       	rjmp	.+90     	; 0x48b4 <m2m_wifi_init+0x80>
    485a:	89 a5       	ldd	r24, Y+41	; 0x29
    485c:	9a a5       	ldd	r25, Y+42	; 0x2a
    485e:	fc 01       	movw	r30, r24
    4860:	80 81       	ld	r24, Z
    4862:	91 81       	ldd	r25, Z+1	; 0x01
    4864:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <gpfAppWifiCb>
    4868:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <gpfAppWifiCb+0x1>
    486c:	10 92 e1 28 	sts	0x28E1, r1	; 0x8028e1 <gu8scanInProgress>
    4870:	ce 01       	movw	r24, r28
    4872:	88 96       	adiw	r24, 0x28	; 40
    4874:	0e 94 76 2e 	call	0x5cec	; 0x5cec <nm_drv_init>
    4878:	89 83       	std	Y+1, r24	; 0x01
    487a:	89 81       	ldd	r24, Y+1	; 0x01
    487c:	88 23       	and	r24, r24
    487e:	c9 f4       	brne	.+50     	; 0x48b2 <m2m_wifi_init+0x7e>
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 94 8b 1c 	call	0x3916	; 0x3916 <hif_init>
    4888:	89 83       	std	Y+1, r24	; 0x01
    488a:	89 81       	ldd	r24, Y+1	; 0x01
    488c:	88 23       	and	r24, r24
    488e:	59 f4       	brne	.+22     	; 0x48a6 <m2m_wifi_init+0x72>
    4890:	68 e7       	ldi	r22, 0x78	; 120
    4892:	71 e2       	ldi	r23, 0x21	; 33
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	0e 94 1e 21 	call	0x423c	; 0x423c <hif_register_cb>
    489a:	ce 01       	movw	r24, r28
    489c:	02 96       	adiw	r24, 0x02	; 2
    489e:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <nm_get_firmware_full_info>
    48a2:	89 83       	std	Y+1, r24	; 0x01
    48a4:	07 c0       	rjmp	.+14     	; 0x48b4 <m2m_wifi_init+0x80>
    48a6:	00 00       	nop
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <nm_drv_deinit>
    48b0:	01 c0       	rjmp	.+2      	; 0x48b4 <m2m_wifi_init+0x80>
    48b2:	00 00       	nop
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
    48b6:	aa 96       	adiw	r28, 0x2a	; 42
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	08 95       	ret

000048c2 <m2m_wifi_handle_events>:
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <m2m_wifi_handle_events+0x6>
    48c8:	cd b7       	in	r28, 0x3d	; 61
    48ca:	de b7       	in	r29, 0x3e	; 62
    48cc:	89 83       	std	Y+1, r24	; 0x01
    48ce:	9a 83       	std	Y+2, r25	; 0x02
    48d0:	0e 94 36 20 	call	0x406c	; 0x406c <hif_handle_isr>
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	df 91       	pop	r29
    48da:	cf 91       	pop	r28
    48dc:	08 95       	ret

000048de <m2m_wifi_connect>:

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    48de:	ef 92       	push	r14
    48e0:	0f 93       	push	r16
    48e2:	1f 93       	push	r17
    48e4:	cf 93       	push	r28
    48e6:	df 93       	push	r29
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	28 97       	sbiw	r28, 0x08	; 8
    48ee:	cd bf       	out	0x3d, r28	; 61
    48f0:	de bf       	out	0x3e, r29	; 62
    48f2:	89 83       	std	Y+1, r24	; 0x01
    48f4:	9a 83       	std	Y+2, r25	; 0x02
    48f6:	6b 83       	std	Y+3, r22	; 0x03
    48f8:	4c 83       	std	Y+4, r20	; 0x04
    48fa:	2d 83       	std	Y+5, r18	; 0x05
    48fc:	3e 83       	std	Y+6, r19	; 0x06
    48fe:	0f 83       	std	Y+7, r16	; 0x07
    4900:	18 87       	std	Y+8, r17	; 0x08
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    4902:	4f 81       	ldd	r20, Y+7	; 0x07
    4904:	58 85       	ldd	r21, Y+8	; 0x08
    4906:	2d 81       	ldd	r18, Y+5	; 0x05
    4908:	3e 81       	ldd	r19, Y+6	; 0x06
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	9a 81       	ldd	r25, Y+2	; 0x02
    490e:	e1 2c       	mov	r14, r1
    4910:	8a 01       	movw	r16, r20
    4912:	4c 81       	ldd	r20, Y+4	; 0x04
    4914:	6b 81       	ldd	r22, Y+3	; 0x03
    4916:	0e 94 96 24 	call	0x492c	; 0x492c <m2m_wifi_connect_sc>
}
    491a:	28 96       	adiw	r28, 0x08	; 8
    491c:	cd bf       	out	0x3d, r28	; 61
    491e:	de bf       	out	0x3e, r29	; 62
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
    4924:	1f 91       	pop	r17
    4926:	0f 91       	pop	r16
    4928:	ef 90       	pop	r14
    492a:	08 95       	ret

0000492c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    492c:	cf 92       	push	r12
    492e:	df 92       	push	r13
    4930:	ef 92       	push	r14
    4932:	ff 92       	push	r15
    4934:	0f 93       	push	r16
    4936:	1f 93       	push	r17
    4938:	cf 93       	push	r28
    493a:	df 93       	push	r29
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    4940:	c3 58       	subi	r28, 0x83	; 131
    4942:	d1 09       	sbc	r29, r1
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	fe 01       	movw	r30, r28
    494a:	e7 58       	subi	r30, 0x87	; 135
    494c:	ff 4f       	sbci	r31, 0xFF	; 255
    494e:	80 83       	st	Z, r24
    4950:	91 83       	std	Z+1, r25	; 0x01
    4952:	ce 01       	movw	r24, r28
    4954:	85 58       	subi	r24, 0x85	; 133
    4956:	9f 4f       	sbci	r25, 0xFF	; 255
    4958:	dc 01       	movw	r26, r24
    495a:	6c 93       	st	X, r22
    495c:	ce 01       	movw	r24, r28
    495e:	84 58       	subi	r24, 0x84	; 132
    4960:	9f 4f       	sbci	r25, 0xFF	; 255
    4962:	fc 01       	movw	r30, r24
    4964:	40 83       	st	Z, r20
    4966:	ce 01       	movw	r24, r28
    4968:	83 58       	subi	r24, 0x83	; 131
    496a:	9f 4f       	sbci	r25, 0xFF	; 255
    496c:	dc 01       	movw	r26, r24
    496e:	2d 93       	st	X+, r18
    4970:	3c 93       	st	X, r19
    4972:	ce 01       	movw	r24, r28
    4974:	81 58       	subi	r24, 0x81	; 129
    4976:	9f 4f       	sbci	r25, 0xFF	; 255
    4978:	fc 01       	movw	r30, r24
    497a:	00 83       	st	Z, r16
    497c:	11 83       	std	Z+1, r17	; 0x01
    497e:	ce 01       	movw	r24, r28
    4980:	8f 57       	subi	r24, 0x7F	; 127
    4982:	9f 4f       	sbci	r25, 0xFF	; 255
    4984:	dc 01       	movw	r26, r24
    4986:	ec 92       	st	X, r14
	sint8				ret = M2M_SUCCESS;
    4988:	19 82       	std	Y+1, r1	; 0x01
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    498a:	ce 01       	movw	r24, r28
    498c:	84 58       	subi	r24, 0x84	; 132
    498e:	9f 4f       	sbci	r25, 0xFF	; 255
    4990:	fc 01       	movw	r30, r24
    4992:	80 81       	ld	r24, Z
    4994:	81 30       	cpi	r24, 0x01	; 1
    4996:	09 f4       	brne	.+2      	; 0x499a <m2m_wifi_connect_sc+0x6e>
    4998:	75 c0       	rjmp	.+234    	; 0x4a84 <m2m_wifi_connect_sc+0x158>
	{
		if(pvAuthInfo == NULL)
    499a:	ce 01       	movw	r24, r28
    499c:	83 58       	subi	r24, 0x83	; 131
    499e:	9f 4f       	sbci	r25, 0xFF	; 255
    49a0:	dc 01       	movw	r26, r24
    49a2:	8d 91       	ld	r24, X+
    49a4:	9c 91       	ld	r25, X
    49a6:	89 2b       	or	r24, r25
    49a8:	19 f4       	brne	.+6      	; 0x49b0 <m2m_wifi_connect_sc+0x84>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
    49aa:	84 ef       	ldi	r24, 0xF4	; 244
    49ac:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    49ae:	bd c1       	rjmp	.+890    	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    49b0:	ce 01       	movw	r24, r28
    49b2:	84 58       	subi	r24, 0x84	; 132
    49b4:	9f 4f       	sbci	r25, 0xFF	; 255
    49b6:	fc 01       	movw	r30, r24
    49b8:	80 81       	ld	r24, Z
    49ba:	82 30       	cpi	r24, 0x02	; 2
    49bc:	09 f0       	breq	.+2      	; 0x49c0 <m2m_wifi_connect_sc+0x94>
    49be:	62 c0       	rjmp	.+196    	; 0x4a84 <m2m_wifi_connect_sc+0x158>
    49c0:	ce 01       	movw	r24, r28
    49c2:	83 58       	subi	r24, 0x83	; 131
    49c4:	9f 4f       	sbci	r25, 0xFF	; 255
    49c6:	dc 01       	movw	r26, r24
    49c8:	8d 91       	ld	r24, X+
    49ca:	9c 91       	ld	r25, X
    49cc:	0e 94 b7 1b 	call	0x376e	; 0x376e <m2m_strlen>
    49d0:	80 34       	cpi	r24, 0x40	; 64
    49d2:	91 05       	cpc	r25, r1
    49d4:	09 f0       	breq	.+2      	; 0x49d8 <m2m_wifi_connect_sc+0xac>
    49d6:	56 c0       	rjmp	.+172    	; 0x4a84 <m2m_wifi_connect_sc+0x158>
		{
			uint8 i = 0;
    49d8:	1a 82       	std	Y+2, r1	; 0x02
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    49da:	ce 01       	movw	r24, r28
    49dc:	83 58       	subi	r24, 0x83	; 131
    49de:	9f 4f       	sbci	r25, 0xFF	; 255
    49e0:	fc 01       	movw	r30, r24
    49e2:	80 81       	ld	r24, Z
    49e4:	91 81       	ldd	r25, Z+1	; 0x01
    49e6:	8b 83       	std	Y+3, r24	; 0x03
    49e8:	9c 83       	std	Y+4, r25	; 0x04
			while(i < (M2M_MAX_PSK_LEN-1))
    49ea:	48 c0       	rjmp	.+144    	; 0x4a7c <m2m_wifi_connect_sc+0x150>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    49ec:	8a 81       	ldd	r24, Y+2	; 0x02
    49ee:	88 2f       	mov	r24, r24
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	2b 81       	ldd	r18, Y+3	; 0x03
    49f4:	3c 81       	ldd	r19, Y+4	; 0x04
    49f6:	82 0f       	add	r24, r18
    49f8:	93 1f       	adc	r25, r19
    49fa:	dc 01       	movw	r26, r24
    49fc:	8c 91       	ld	r24, X
    49fe:	80 33       	cpi	r24, 0x30	; 48
    4a00:	b8 f1       	brcs	.+110    	; 0x4a70 <m2m_wifi_connect_sc+0x144>
    4a02:	8a 81       	ldd	r24, Y+2	; 0x02
    4a04:	88 2f       	mov	r24, r24
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	2b 81       	ldd	r18, Y+3	; 0x03
    4a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    4a0c:	82 0f       	add	r24, r18
    4a0e:	93 1f       	adc	r25, r19
    4a10:	fc 01       	movw	r30, r24
    4a12:	80 81       	ld	r24, Z
    4a14:	8a 33       	cpi	r24, 0x3A	; 58
    4a16:	58 f0       	brcs	.+22     	; 0x4a2e <m2m_wifi_connect_sc+0x102>
    4a18:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1a:	88 2f       	mov	r24, r24
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    4a20:	3c 81       	ldd	r19, Y+4	; 0x04
    4a22:	82 0f       	add	r24, r18
    4a24:	93 1f       	adc	r25, r19
    4a26:	dc 01       	movw	r26, r24
    4a28:	8c 91       	ld	r24, X
    4a2a:	81 34       	cpi	r24, 0x41	; 65
    4a2c:	08 f1       	brcs	.+66     	; 0x4a70 <m2m_wifi_connect_sc+0x144>
    4a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a30:	88 2f       	mov	r24, r24
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	2b 81       	ldd	r18, Y+3	; 0x03
    4a36:	3c 81       	ldd	r19, Y+4	; 0x04
    4a38:	82 0f       	add	r24, r18
    4a3a:	93 1f       	adc	r25, r19
    4a3c:	fc 01       	movw	r30, r24
    4a3e:	80 81       	ld	r24, Z
    4a40:	87 34       	cpi	r24, 0x47	; 71
    4a42:	58 f0       	brcs	.+22     	; 0x4a5a <m2m_wifi_connect_sc+0x12e>
    4a44:	8a 81       	ldd	r24, Y+2	; 0x02
    4a46:	88 2f       	mov	r24, r24
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    4a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    4a4e:	82 0f       	add	r24, r18
    4a50:	93 1f       	adc	r25, r19
    4a52:	dc 01       	movw	r26, r24
    4a54:	8c 91       	ld	r24, X
    4a56:	81 36       	cpi	r24, 0x61	; 97
    4a58:	58 f0       	brcs	.+22     	; 0x4a70 <m2m_wifi_connect_sc+0x144>
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5c:	88 2f       	mov	r24, r24
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	2b 81       	ldd	r18, Y+3	; 0x03
    4a62:	3c 81       	ldd	r19, Y+4	; 0x04
    4a64:	82 0f       	add	r24, r18
    4a66:	93 1f       	adc	r25, r19
    4a68:	fc 01       	movw	r30, r24
    4a6a:	80 81       	ld	r24, Z
    4a6c:	87 36       	cpi	r24, 0x67	; 103
    4a6e:	18 f0       	brcs	.+6      	; 0x4a76 <m2m_wifi_connect_sc+0x14a>
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
    4a70:	84 ef       	ldi	r24, 0xF4	; 244
    4a72:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    4a74:	5a c1       	rjmp	.+692    	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
				}
				i++;
    4a76:	8a 81       	ldd	r24, Y+2	; 0x02
    4a78:	8f 5f       	subi	r24, 0xFF	; 255
    4a7a:	8a 83       	std	Y+2, r24	; 0x02
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    4a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7e:	80 34       	cpi	r24, 0x40	; 64
    4a80:	08 f4       	brcc	.+2      	; 0x4a84 <m2m_wifi_connect_sc+0x158>
    4a82:	b4 cf       	rjmp	.-152    	; 0x49ec <m2m_wifi_connect_sc+0xc0>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    4a84:	ce 01       	movw	r24, r28
    4a86:	85 58       	subi	r24, 0x85	; 133
    4a88:	9f 4f       	sbci	r25, 0xFF	; 255
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	8c 91       	ld	r24, X
    4a8e:	88 23       	and	r24, r24
    4a90:	39 f0       	breq	.+14     	; 0x4aa0 <m2m_wifi_connect_sc+0x174>
    4a92:	ce 01       	movw	r24, r28
    4a94:	85 58       	subi	r24, 0x85	; 133
    4a96:	9f 4f       	sbci	r25, 0xFF	; 255
    4a98:	fc 01       	movw	r30, r24
    4a9a:	80 81       	ld	r24, Z
    4a9c:	81 32       	cpi	r24, 0x21	; 33
    4a9e:	18 f0       	brcs	.+6      	; 0x4aa6 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
    4aa0:	84 ef       	ldi	r24, 0xF4	; 244
    4aa2:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    4aa4:	42 c1       	rjmp	.+644    	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    4aa6:	ce 01       	movw	r24, r28
    4aa8:	81 58       	subi	r24, 0x81	; 129
    4aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    4aac:	dc 01       	movw	r26, r24
    4aae:	8d 91       	ld	r24, X+
    4ab0:	9c 91       	ld	r25, X
    4ab2:	89 2b       	or	r24, r25
    4ab4:	41 f0       	breq	.+16     	; 0x4ac6 <m2m_wifi_connect_sc+0x19a>
    4ab6:	ce 01       	movw	r24, r28
    4ab8:	81 58       	subi	r24, 0x81	; 129
    4aba:	9f 4f       	sbci	r25, 0xFF	; 255
    4abc:	fc 01       	movw	r30, r24
    4abe:	80 81       	ld	r24, Z
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
    4ac2:	0f 97       	sbiw	r24, 0x0f	; 15
    4ac4:	60 f0       	brcs	.+24     	; 0x4ade <m2m_wifi_connect_sc+0x1b2>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    4ac6:	ce 01       	movw	r24, r28
    4ac8:	81 58       	subi	r24, 0x81	; 129
    4aca:	9f 4f       	sbci	r25, 0xFF	; 255
    4acc:	dc 01       	movw	r26, r24
    4ace:	8d 91       	ld	r24, X+
    4ad0:	9c 91       	ld	r25, X
    4ad2:	8f 3f       	cpi	r24, 0xFF	; 255
    4ad4:	91 05       	cpc	r25, r1
    4ad6:	19 f0       	breq	.+6      	; 0x4ade <m2m_wifi_connect_sc+0x1b2>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
    4ad8:	84 ef       	ldi	r24, 0xF4	; 244
    4ada:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    4adc:	26 c1       	rjmp	.+588    	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    4ade:	ce 01       	movw	r24, r28
    4ae0:	85 58       	subi	r24, 0x85	; 133
    4ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	80 81       	ld	r24, Z
    4ae8:	88 2f       	mov	r24, r24
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	a0 e0       	ldi	r26, 0x00	; 0
    4aee:	b0 e0       	ldi	r27, 0x00	; 0
    4af0:	9e 01       	movw	r18, r28
    4af2:	27 58       	subi	r18, 0x87	; 135
    4af4:	3f 4f       	sbci	r19, 0xFF	; 255
    4af6:	f9 01       	movw	r30, r18
    4af8:	60 81       	ld	r22, Z
    4afa:	71 81       	ldd	r23, Z+1	; 0x01
    4afc:	9e 01       	movw	r18, r28
    4afe:	23 5f       	subi	r18, 0xF3	; 243
    4b00:	3f 4f       	sbci	r19, 0xFF	; 255
    4b02:	f9 01       	movw	r30, r18
    4b04:	ea 5b       	subi	r30, 0xBA	; 186
    4b06:	ff 4f       	sbci	r31, 0xFF	; 255
    4b08:	9c 01       	movw	r18, r24
    4b0a:	ad 01       	movw	r20, r26
    4b0c:	cf 01       	movw	r24, r30
    4b0e:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
    4b12:	ce 01       	movw	r24, r28
    4b14:	85 58       	subi	r24, 0x85	; 133
    4b16:	9f 4f       	sbci	r25, 0xFF	; 255
    4b18:	dc 01       	movw	r26, r24
    4b1a:	8c 91       	ld	r24, X
    4b1c:	88 2f       	mov	r24, r24
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	9e 01       	movw	r18, r28
    4b22:	2d 5a       	subi	r18, 0xAD	; 173
    4b24:	3f 4f       	sbci	r19, 0xFF	; 255
    4b26:	82 0f       	add	r24, r18
    4b28:	93 1f       	adc	r25, r19
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	10 82       	st	Z, r1
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    4b2e:	ce 01       	movw	r24, r28
    4b30:	8f 5a       	subi	r24, 0xAF	; 175
    4b32:	9f 4f       	sbci	r25, 0xFF	; 255
    4b34:	9e 01       	movw	r18, r28
    4b36:	21 58       	subi	r18, 0x81	; 129
    4b38:	3f 4f       	sbci	r19, 0xFF	; 255
    4b3a:	d9 01       	movw	r26, r18
    4b3c:	2d 91       	ld	r18, X+
    4b3e:	3c 91       	ld	r19, X
    4b40:	fc 01       	movw	r30, r24
    4b42:	20 83       	st	Z, r18
    4b44:	31 83       	std	Z+1, r19	; 0x01
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    4b46:	ce 01       	movw	r24, r28
    4b48:	8f 57       	subi	r24, 0x7F	; 127
    4b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b4c:	21 e0       	ldi	r18, 0x01	; 1
    4b4e:	dc 01       	movw	r26, r24
    4b50:	8c 91       	ld	r24, X
    4b52:	88 23       	and	r24, r24
    4b54:	09 f4       	brne	.+2      	; 0x4b58 <m2m_wifi_connect_sc+0x22c>
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	ce 01       	movw	r24, r28
    4b5a:	8c 58       	subi	r24, 0x8C	; 140
    4b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b5e:	fc 01       	movw	r30, r24
    4b60:	20 83       	st	Z, r18
	pstrAuthInfo = &strConnect.strSec;
    4b62:	ce 01       	movw	r24, r28
    4b64:	0d 96       	adiw	r24, 0x0d	; 13
    4b66:	8d 83       	std	Y+5, r24	; 0x05
    4b68:	9e 83       	std	Y+6, r25	; 0x06
	pstrAuthInfo->u8SecType		= u8SecType;
    4b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b6e:	8f 5b       	subi	r24, 0xBF	; 191
    4b70:	9f 4f       	sbci	r25, 0xFF	; 255
    4b72:	9e 01       	movw	r18, r28
    4b74:	24 58       	subi	r18, 0x84	; 132
    4b76:	3f 4f       	sbci	r19, 0xFF	; 255
    4b78:	d9 01       	movw	r26, r18
    4b7a:	2c 91       	ld	r18, X
    4b7c:	fc 01       	movw	r30, r24
    4b7e:	20 83       	st	Z, r18

	if(u8SecType == M2M_WIFI_SEC_WEP)
    4b80:	ce 01       	movw	r24, r28
    4b82:	84 58       	subi	r24, 0x84	; 132
    4b84:	9f 4f       	sbci	r25, 0xFF	; 255
    4b86:	dc 01       	movw	r26, r24
    4b88:	8c 91       	ld	r24, X
    4b8a:	83 30       	cpi	r24, 0x03	; 3
    4b8c:	09 f0       	breq	.+2      	; 0x4b90 <m2m_wifi_connect_sc+0x264>
    4b8e:	5f c0       	rjmp	.+190    	; 0x4c4e <m2m_wifi_connect_sc+0x322>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    4b90:	ce 01       	movw	r24, r28
    4b92:	83 58       	subi	r24, 0x83	; 131
    4b94:	9f 4f       	sbci	r25, 0xFF	; 255
    4b96:	fc 01       	movw	r30, r24
    4b98:	80 81       	ld	r24, Z
    4b9a:	91 81       	ldd	r25, Z+1	; 0x01
    4b9c:	8f 83       	std	Y+7, r24	; 0x07
    4b9e:	98 87       	std	Y+8, r25	; 0x08
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    4ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ba4:	89 87       	std	Y+9, r24	; 0x09
    4ba6:	9a 87       	std	Y+10, r25	; 0x0a
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    4ba8:	8f 81       	ldd	r24, Y+7	; 0x07
    4baa:	98 85       	ldd	r25, Y+8	; 0x08
    4bac:	dc 01       	movw	r26, r24
    4bae:	8c 91       	ld	r24, X
    4bb0:	2f ef       	ldi	r18, 0xFF	; 255
    4bb2:	28 0f       	add	r18, r24
    4bb4:	89 85       	ldd	r24, Y+9	; 0x09
    4bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb8:	fc 01       	movw	r30, r24
    4bba:	20 83       	st	Z, r18

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    4bbc:	89 85       	ldd	r24, Y+9	; 0x09
    4bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	8c 91       	ld	r24, X
    4bc4:	84 30       	cpi	r24, 0x04	; 4
    4bc6:	18 f0       	brcs	.+6      	; 0x4bce <m2m_wifi_connect_sc+0x2a2>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
    4bc8:	84 ef       	ldi	r24, 0xF4	; 244
    4bca:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    4bcc:	ae c0       	rjmp	.+348    	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    4bce:	8f 81       	ldd	r24, Y+7	; 0x07
    4bd0:	98 85       	ldd	r25, Y+8	; 0x08
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	81 81       	ldd	r24, Z+1	; 0x01
    4bd6:	2f ef       	ldi	r18, 0xFF	; 255
    4bd8:	28 0f       	add	r18, r24
    4bda:	89 85       	ldd	r24, Y+9	; 0x09
    4bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bde:	dc 01       	movw	r26, r24
    4be0:	11 96       	adiw	r26, 0x01	; 1
    4be2:	2c 93       	st	X, r18
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    4be4:	89 85       	ldd	r24, Y+9	; 0x09
    4be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be8:	fc 01       	movw	r30, r24
    4bea:	81 81       	ldd	r24, Z+1	; 0x01
    4bec:	8a 30       	cpi	r24, 0x0A	; 10
    4bee:	51 f0       	breq	.+20     	; 0x4c04 <m2m_wifi_connect_sc+0x2d8>
    4bf0:	89 85       	ldd	r24, Y+9	; 0x09
    4bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf4:	dc 01       	movw	r26, r24
    4bf6:	11 96       	adiw	r26, 0x01	; 1
    4bf8:	8c 91       	ld	r24, X
    4bfa:	8a 31       	cpi	r24, 0x1A	; 26
    4bfc:	19 f0       	breq	.+6      	; 0x4c04 <m2m_wifi_connect_sc+0x2d8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
    4bfe:	84 ef       	ldi	r24, 0xF4	; 244
    4c00:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    4c02:	93 c0       	rjmp	.+294    	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    4c04:	8f 81       	ldd	r24, Y+7	; 0x07
    4c06:	98 85       	ldd	r25, Y+8	; 0x08
    4c08:	fc 01       	movw	r30, r24
    4c0a:	81 81       	ldd	r24, Z+1	; 0x01
    4c0c:	88 2f       	mov	r24, r24
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	a0 e0       	ldi	r26, 0x00	; 0
    4c12:	b0 e0       	ldi	r27, 0x00	; 0
    4c14:	2f 81       	ldd	r18, Y+7	; 0x07
    4c16:	38 85       	ldd	r19, Y+8	; 0x08
    4c18:	b9 01       	movw	r22, r18
    4c1a:	6e 5f       	subi	r22, 0xFE	; 254
    4c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c1e:	29 85       	ldd	r18, Y+9	; 0x09
    4c20:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c22:	f9 01       	movw	r30, r18
    4c24:	32 96       	adiw	r30, 0x02	; 2
    4c26:	9c 01       	movw	r18, r24
    4c28:	ad 01       	movw	r20, r26
    4c2a:	cf 01       	movw	r24, r30
    4c2c:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    4c30:	8f 81       	ldd	r24, Y+7	; 0x07
    4c32:	98 85       	ldd	r25, Y+8	; 0x08
    4c34:	dc 01       	movw	r26, r24
    4c36:	11 96       	adiw	r26, 0x01	; 1
    4c38:	8c 91       	ld	r24, X
    4c3a:	88 2f       	mov	r24, r24
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	29 85       	ldd	r18, Y+9	; 0x09
    4c40:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c42:	82 0f       	add	r24, r18
    4c44:	93 1f       	adc	r25, r19
    4c46:	02 96       	adiw	r24, 0x02	; 2
    4c48:	fc 01       	movw	r30, r24
    4c4a:	10 82       	st	Z, r1
    4c4c:	5e c0       	rjmp	.+188    	; 0x4d0a <m2m_wifi_connect_sc+0x3de>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    4c4e:	ce 01       	movw	r24, r28
    4c50:	84 58       	subi	r24, 0x84	; 132
    4c52:	9f 4f       	sbci	r25, 0xFF	; 255
    4c54:	dc 01       	movw	r26, r24
    4c56:	8c 91       	ld	r24, X
    4c58:	82 30       	cpi	r24, 0x02	; 2
    4c5a:	a9 f5       	brne	.+106    	; 0x4cc6 <m2m_wifi_connect_sc+0x39a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    4c5c:	ce 01       	movw	r24, r28
    4c5e:	83 58       	subi	r24, 0x83	; 131
    4c60:	9f 4f       	sbci	r25, 0xFF	; 255
    4c62:	fc 01       	movw	r30, r24
    4c64:	80 81       	ld	r24, Z
    4c66:	91 81       	ldd	r25, Z+1	; 0x01
    4c68:	0e 94 b7 1b 	call	0x376e	; 0x376e <m2m_strlen>
    4c6c:	8b 87       	std	Y+11, r24	; 0x0b
    4c6e:	9c 87       	std	Y+12, r25	; 0x0c
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    4c70:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c74:	89 2b       	or	r24, r25
    4c76:	29 f0       	breq	.+10     	; 0x4c82 <m2m_wifi_connect_sc+0x356>
    4c78:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c7c:	81 34       	cpi	r24, 0x41	; 65
    4c7e:	91 05       	cpc	r25, r1
    4c80:	18 f0       	brcs	.+6      	; 0x4c88 <m2m_wifi_connect_sc+0x35c>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
    4c82:	84 ef       	ldi	r24, 0xF4	; 244
    4c84:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    4c86:	51 c0       	rjmp	.+162    	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    4c88:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c8c:	01 96       	adiw	r24, 0x01	; 1
    4c8e:	cc 01       	movw	r24, r24
    4c90:	a0 e0       	ldi	r26, 0x00	; 0
    4c92:	b0 e0       	ldi	r27, 0x00	; 0
    4c94:	ed 81       	ldd	r30, Y+5	; 0x05
    4c96:	fe 81       	ldd	r31, Y+6	; 0x06
    4c98:	ce 57       	subi	r28, 0x7E	; 126
    4c9a:	df 4f       	sbci	r29, 0xFF	; 255
    4c9c:	e8 83       	st	Y, r30
    4c9e:	f9 83       	std	Y+1, r31	; 0x01
    4ca0:	c2 58       	subi	r28, 0x82	; 130
    4ca2:	d0 40       	sbci	r29, 0x00	; 0
    4ca4:	9e 01       	movw	r18, r28
    4ca6:	23 58       	subi	r18, 0x83	; 131
    4ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    4caa:	f9 01       	movw	r30, r18
    4cac:	60 81       	ld	r22, Z
    4cae:	71 81       	ldd	r23, Z+1	; 0x01
    4cb0:	9c 01       	movw	r18, r24
    4cb2:	ad 01       	movw	r20, r26
    4cb4:	ce 57       	subi	r28, 0x7E	; 126
    4cb6:	df 4f       	sbci	r29, 0xFF	; 255
    4cb8:	88 81       	ld	r24, Y
    4cba:	99 81       	ldd	r25, Y+1	; 0x01
    4cbc:	c2 58       	subi	r28, 0x82	; 130
    4cbe:	d0 40       	sbci	r29, 0x00	; 0
    4cc0:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memcpy>
    4cc4:	22 c0       	rjmp	.+68     	; 0x4d0a <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	84 58       	subi	r24, 0x84	; 132
    4cca:	9f 4f       	sbci	r25, 0xFF	; 255
    4ccc:	dc 01       	movw	r26, r24
    4cce:	8c 91       	ld	r24, X
    4cd0:	84 30       	cpi	r24, 0x04	; 4
    4cd2:	89 f4       	brne	.+34     	; 0x4cf6 <m2m_wifi_connect_sc+0x3ca>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    4cd4:	ed 81       	ldd	r30, Y+5	; 0x05
    4cd6:	fe 81       	ldd	r31, Y+6	; 0x06
    4cd8:	ce 01       	movw	r24, r28
    4cda:	83 58       	subi	r24, 0x83	; 131
    4cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cde:	dc 01       	movw	r26, r24
    4ce0:	8d 91       	ld	r24, X+
    4ce2:	9c 91       	ld	r25, X
    4ce4:	2e e3       	ldi	r18, 0x3E	; 62
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e0       	ldi	r20, 0x00	; 0
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	bc 01       	movw	r22, r24
    4cee:	cf 01       	movw	r24, r30
    4cf0:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memcpy>
    4cf4:	0a c0       	rjmp	.+20     	; 0x4d0a <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    4cf6:	ce 01       	movw	r24, r28
    4cf8:	84 58       	subi	r24, 0x84	; 132
    4cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	80 81       	ld	r24, Z
    4d00:	81 30       	cpi	r24, 0x01	; 1
    4d02:	19 f0       	breq	.+6      	; 0x4d0a <m2m_wifi_connect_sc+0x3de>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
    4d04:	84 ef       	ldi	r24, 0xF4	; 244
    4d06:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    4d08:	10 c0       	rjmp	.+32     	; 0x4d2a <m2m_wifi_connect_sc+0x3fe>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    4d0a:	ce 01       	movw	r24, r28
    4d0c:	0d 96       	adiw	r24, 0x0d	; 13
    4d0e:	c1 2c       	mov	r12, r1
    4d10:	d1 2c       	mov	r13, r1
    4d12:	e1 2c       	mov	r14, r1
    4d14:	f1 2c       	mov	r15, r1
    4d16:	00 e0       	ldi	r16, 0x00	; 0
    4d18:	10 e0       	ldi	r17, 0x00	; 0
    4d1a:	2c e6       	ldi	r18, 0x6C	; 108
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	ac 01       	movw	r20, r24
    4d20:	68 e2       	ldi	r22, 0x28	; 40
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    4d28:	89 83       	std	Y+1, r24	; 0x01

ERR1:
	return ret;
    4d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d2c:	cd 57       	subi	r28, 0x7D	; 125
    4d2e:	df 4f       	sbci	r29, 0xFF	; 255
    4d30:	cd bf       	out	0x3d, r28	; 61
    4d32:	de bf       	out	0x3e, r29	; 62
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	ef 90       	pop	r14
    4d40:	df 90       	pop	r13
    4d42:	cf 90       	pop	r12
    4d44:	08 95       	ret

00004d46 <chip_apply_conf>:
{
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
	nm_bsp_sleep(50);
	return ret;
}
    4d46:	cf 93       	push	r28
    4d48:	df 93       	push	r29
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
    4d4e:	2d 97       	sbiw	r28, 0x0d	; 13
    4d50:	cd bf       	out	0x3d, r28	; 61
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	6a 87       	std	Y+10, r22	; 0x0a
    4d56:	7b 87       	std	Y+11, r23	; 0x0b
    4d58:	8c 87       	std	Y+12, r24	; 0x0c
    4d5a:	9d 87       	std	Y+13, r25	; 0x0d
    4d5c:	19 82       	std	Y+1, r1	; 0x01
    4d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d60:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d62:	ac 85       	ldd	r26, Y+12	; 0x0c
    4d64:	bd 85       	ldd	r27, Y+13	; 0x0d
    4d66:	8a 83       	std	Y+2, r24	; 0x02
    4d68:	9b 83       	std	Y+3, r25	; 0x03
    4d6a:	ac 83       	std	Y+4, r26	; 0x04
    4d6c:	bd 83       	std	Y+5, r27	; 0x05
    4d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d70:	9b 81       	ldd	r25, Y+3	; 0x03
    4d72:	ac 81       	ldd	r26, Y+4	; 0x04
    4d74:	bd 81       	ldd	r27, Y+5	; 0x05
    4d76:	91 60       	ori	r25, 0x01	; 1
    4d78:	8a 83       	std	Y+2, r24	; 0x02
    4d7a:	9b 83       	std	Y+3, r25	; 0x03
    4d7c:	ac 83       	std	Y+4, r26	; 0x04
    4d7e:	bd 83       	std	Y+5, r27	; 0x05
    4d80:	8a 81       	ldd	r24, Y+2	; 0x02
    4d82:	9b 81       	ldd	r25, Y+3	; 0x03
    4d84:	ac 81       	ldd	r26, Y+4	; 0x04
    4d86:	bd 81       	ldd	r27, Y+5	; 0x05
    4d88:	9c 01       	movw	r18, r24
    4d8a:	ad 01       	movw	r20, r26
    4d8c:	60 ea       	ldi	r22, 0xA0	; 160
    4d8e:	74 e1       	ldi	r23, 0x14	; 20
    4d90:	80 e0       	ldi	r24, 0x00	; 0
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    4d98:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d9c:	ac 81       	ldd	r26, Y+4	; 0x04
    4d9e:	bd 81       	ldd	r27, Y+5	; 0x05
    4da0:	89 2b       	or	r24, r25
    4da2:	8a 2b       	or	r24, r26
    4da4:	8b 2b       	or	r24, r27
    4da6:	f9 f0       	breq	.+62     	; 0x4de6 <chip_apply_conf+0xa0>
    4da8:	1e 82       	std	Y+6, r1	; 0x06
    4daa:	1f 82       	std	Y+7, r1	; 0x07
    4dac:	18 86       	std	Y+8, r1	; 0x08
    4dae:	19 86       	std	Y+9, r1	; 0x09
    4db0:	ce 01       	movw	r24, r28
    4db2:	06 96       	adiw	r24, 0x06	; 6
    4db4:	ac 01       	movw	r20, r24
    4db6:	60 ea       	ldi	r22, 0xA0	; 160
    4db8:	74 e1       	ldi	r23, 0x14	; 20
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    4dc2:	89 83       	std	Y+1, r24	; 0x01
    4dc4:	89 81       	ldd	r24, Y+1	; 0x01
    4dc6:	88 23       	and	r24, r24
    4dc8:	d9 f6       	brne	.-74     	; 0x4d80 <chip_apply_conf+0x3a>
    4dca:	2e 81       	ldd	r18, Y+6	; 0x06
    4dcc:	3f 81       	ldd	r19, Y+7	; 0x07
    4dce:	48 85       	ldd	r20, Y+8	; 0x08
    4dd0:	59 85       	ldd	r21, Y+9	; 0x09
    4dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd6:	ac 81       	ldd	r26, Y+4	; 0x04
    4dd8:	bd 81       	ldd	r27, Y+5	; 0x05
    4dda:	28 17       	cp	r18, r24
    4ddc:	39 07       	cpc	r19, r25
    4dde:	4a 07       	cpc	r20, r26
    4de0:	5b 07       	cpc	r21, r27
    4de2:	19 f0       	breq	.+6      	; 0x4dea <chip_apply_conf+0xa4>
    4de4:	cd cf       	rjmp	.-102    	; 0x4d80 <chip_apply_conf+0x3a>
    4de6:	00 00       	nop
    4de8:	01 c0       	rjmp	.+2      	; 0x4dec <chip_apply_conf+0xa6>
    4dea:	00 00       	nop
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	2d 96       	adiw	r28, 0x0d	; 13
    4df0:	cd bf       	out	0x3d, r28	; 61
    4df2:	de bf       	out	0x3e, r29	; 62
    4df4:	df 91       	pop	r29
    4df6:	cf 91       	pop	r28
    4df8:	08 95       	ret

00004dfa <enable_interrupts>:
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	25 97       	sbiw	r28, 0x05	; 5
    4e04:	cd bf       	out	0x3d, r28	; 61
    4e06:	de bf       	out	0x3e, r29	; 62
    4e08:	1a 82       	std	Y+2, r1	; 0x02
    4e0a:	1b 82       	std	Y+3, r1	; 0x03
    4e0c:	1c 82       	std	Y+4, r1	; 0x04
    4e0e:	1d 82       	std	Y+5, r1	; 0x05
    4e10:	19 82       	std	Y+1, r1	; 0x01
    4e12:	ce 01       	movw	r24, r28
    4e14:	02 96       	adiw	r24, 0x02	; 2
    4e16:	ac 01       	movw	r20, r24
    4e18:	68 e0       	ldi	r22, 0x08	; 8
    4e1a:	74 e1       	ldi	r23, 0x14	; 20
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    4e24:	89 83       	std	Y+1, r24	; 0x01
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
    4e28:	88 23       	and	r24, r24
    4e2a:	e9 f5       	brne	.+122    	; 0x4ea6 <enable_interrupts+0xac>
    4e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e30:	ac 81       	ldd	r26, Y+4	; 0x04
    4e32:	bd 81       	ldd	r27, Y+5	; 0x05
    4e34:	91 60       	ori	r25, 0x01	; 1
    4e36:	8a 83       	std	Y+2, r24	; 0x02
    4e38:	9b 83       	std	Y+3, r25	; 0x03
    4e3a:	ac 83       	std	Y+4, r26	; 0x04
    4e3c:	bd 83       	std	Y+5, r27	; 0x05
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	9b 81       	ldd	r25, Y+3	; 0x03
    4e42:	ac 81       	ldd	r26, Y+4	; 0x04
    4e44:	bd 81       	ldd	r27, Y+5	; 0x05
    4e46:	9c 01       	movw	r18, r24
    4e48:	ad 01       	movw	r20, r26
    4e4a:	68 e0       	ldi	r22, 0x08	; 8
    4e4c:	74 e1       	ldi	r23, 0x14	; 20
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    4e56:	89 83       	std	Y+1, r24	; 0x01
    4e58:	89 81       	ldd	r24, Y+1	; 0x01
    4e5a:	88 23       	and	r24, r24
    4e5c:	31 f5       	brne	.+76     	; 0x4eaa <enable_interrupts+0xb0>
    4e5e:	ce 01       	movw	r24, r28
    4e60:	02 96       	adiw	r24, 0x02	; 2
    4e62:	ac 01       	movw	r20, r24
    4e64:	60 e0       	ldi	r22, 0x00	; 0
    4e66:	7a e1       	ldi	r23, 0x1A	; 26
    4e68:	80 e0       	ldi	r24, 0x00	; 0
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    4e70:	89 83       	std	Y+1, r24	; 0x01
    4e72:	89 81       	ldd	r24, Y+1	; 0x01
    4e74:	88 23       	and	r24, r24
    4e76:	d9 f4       	brne	.+54     	; 0x4eae <enable_interrupts+0xb4>
    4e78:	8a 81       	ldd	r24, Y+2	; 0x02
    4e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e7c:	ac 81       	ldd	r26, Y+4	; 0x04
    4e7e:	bd 81       	ldd	r27, Y+5	; 0x05
    4e80:	a1 60       	ori	r26, 0x01	; 1
    4e82:	8a 83       	std	Y+2, r24	; 0x02
    4e84:	9b 83       	std	Y+3, r25	; 0x03
    4e86:	ac 83       	std	Y+4, r26	; 0x04
    4e88:	bd 83       	std	Y+5, r27	; 0x05
    4e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8e:	ac 81       	ldd	r26, Y+4	; 0x04
    4e90:	bd 81       	ldd	r27, Y+5	; 0x05
    4e92:	9c 01       	movw	r18, r24
    4e94:	ad 01       	movw	r20, r26
    4e96:	60 e0       	ldi	r22, 0x00	; 0
    4e98:	7a e1       	ldi	r23, 0x1A	; 26
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    4ea2:	89 83       	std	Y+1, r24	; 0x01
    4ea4:	05 c0       	rjmp	.+10     	; 0x4eb0 <enable_interrupts+0xb6>
    4ea6:	00 00       	nop
    4ea8:	03 c0       	rjmp	.+6      	; 0x4eb0 <enable_interrupts+0xb6>
    4eaa:	00 00       	nop
    4eac:	01 c0       	rjmp	.+2      	; 0x4eb0 <enable_interrupts+0xb6>
    4eae:	00 00       	nop
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
    4eb2:	25 96       	adiw	r28, 0x05	; 5
    4eb4:	cd bf       	out	0x3d, r28	; 61
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	08 95       	ret

00004ebe <nmi_get_chipid>:
    4ebe:	cf 93       	push	r28
    4ec0:	df 93       	push	r29
    4ec2:	00 d0       	rcall	.+0      	; 0x4ec4 <nmi_get_chipid+0x6>
    4ec4:	00 d0       	rcall	.+0      	; 0x4ec6 <nmi_get_chipid+0x8>
    4ec6:	cd b7       	in	r28, 0x3d	; 61
    4ec8:	de b7       	in	r29, 0x3e	; 62
    4eca:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <chipid.2327>
    4ece:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <chipid.2327+0x1>
    4ed2:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <chipid.2327+0x2>
    4ed6:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <chipid.2327+0x3>
    4eda:	89 2b       	or	r24, r25
    4edc:	8a 2b       	or	r24, r26
    4ede:	8b 2b       	or	r24, r27
    4ee0:	09 f0       	breq	.+2      	; 0x4ee4 <nmi_get_chipid+0x26>
    4ee2:	cd c0       	rjmp	.+410    	; 0x507e <nmi_get_chipid+0x1c0>
    4ee4:	44 ee       	ldi	r20, 0xE4	; 228
    4ee6:	58 e2       	ldi	r21, 0x28	; 40
    4ee8:	60 e0       	ldi	r22, 0x00	; 0
    4eea:	70 e1       	ldi	r23, 0x10	; 16
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    4ef4:	88 23       	and	r24, r24
    4ef6:	61 f0       	breq	.+24     	; 0x4f10 <nmi_get_chipid+0x52>
    4ef8:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <chipid.2327>
    4efc:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <chipid.2327+0x1>
    4f00:	10 92 e6 28 	sts	0x28E6, r1	; 0x8028e6 <chipid.2327+0x2>
    4f04:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <chipid.2327+0x3>
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	bf c0       	rjmp	.+382    	; 0x508e <nmi_get_chipid+0x1d0>
    4f10:	ce 01       	movw	r24, r28
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	ac 01       	movw	r20, r24
    4f16:	64 ef       	ldi	r22, 0xF4	; 244
    4f18:	73 e1       	ldi	r23, 0x13	; 19
    4f1a:	80 e0       	ldi	r24, 0x00	; 0
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    4f22:	88 23       	and	r24, r24
    4f24:	61 f0       	breq	.+24     	; 0x4f3e <nmi_get_chipid+0x80>
    4f26:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <chipid.2327>
    4f2a:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <chipid.2327+0x1>
    4f2e:	10 92 e6 28 	sts	0x28E6, r1	; 0x8028e6 <chipid.2327+0x2>
    4f32:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <chipid.2327+0x3>
    4f36:	80 e0       	ldi	r24, 0x00	; 0
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	a8 c0       	rjmp	.+336    	; 0x508e <nmi_get_chipid+0x1d0>
    4f3e:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <chipid.2327>
    4f42:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <chipid.2327+0x1>
    4f46:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <chipid.2327+0x2>
    4f4a:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <chipid.2327+0x3>
    4f4e:	80 3a       	cpi	r24, 0xA0	; 160
    4f50:	92 40       	sbci	r25, 0x02	; 2
    4f52:	a0 41       	sbci	r26, 0x10	; 16
    4f54:	b1 05       	cpc	r27, r1
    4f56:	b1 f4       	brne	.+44     	; 0x4f84 <nmi_get_chipid+0xc6>
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5c:	ab 81       	ldd	r26, Y+3	; 0x03
    4f5e:	bc 81       	ldd	r27, Y+4	; 0x04
    4f60:	01 97       	sbiw	r24, 0x01	; 1
    4f62:	a1 05       	cpc	r26, r1
    4f64:	b1 05       	cpc	r27, r1
    4f66:	09 f4       	brne	.+2      	; 0x4f6a <nmi_get_chipid+0xac>
    4f68:	68 c0       	rjmp	.+208    	; 0x503a <nmi_get_chipid+0x17c>
    4f6a:	81 ea       	ldi	r24, 0xA1	; 161
    4f6c:	92 e0       	ldi	r25, 0x02	; 2
    4f6e:	a0 e1       	ldi	r26, 0x10	; 16
    4f70:	b0 e0       	ldi	r27, 0x00	; 0
    4f72:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <chipid.2327>
    4f76:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <chipid.2327+0x1>
    4f7a:	a0 93 e6 28 	sts	0x28E6, r26	; 0x8028e6 <chipid.2327+0x2>
    4f7e:	b0 93 e7 28 	sts	0x28E7, r27	; 0x8028e7 <chipid.2327+0x3>
    4f82:	5b c0       	rjmp	.+182    	; 0x503a <nmi_get_chipid+0x17c>
    4f84:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <chipid.2327>
    4f88:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <chipid.2327+0x1>
    4f8c:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <chipid.2327+0x2>
    4f90:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <chipid.2327+0x3>
    4f94:	80 3b       	cpi	r24, 0xB0	; 176
    4f96:	92 40       	sbci	r25, 0x02	; 2
    4f98:	a0 41       	sbci	r26, 0x10	; 16
    4f9a:	b1 05       	cpc	r27, r1
    4f9c:	59 f5       	brne	.+86     	; 0x4ff4 <nmi_get_chipid+0x136>
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa2:	ab 81       	ldd	r26, Y+3	; 0x03
    4fa4:	bc 81       	ldd	r27, Y+4	; 0x04
    4fa6:	03 97       	sbiw	r24, 0x03	; 3
    4fa8:	a1 05       	cpc	r26, r1
    4faa:	b1 05       	cpc	r27, r1
    4fac:	09 f4       	brne	.+2      	; 0x4fb0 <nmi_get_chipid+0xf2>
    4fae:	45 c0       	rjmp	.+138    	; 0x503a <nmi_get_chipid+0x17c>
    4fb0:	89 81       	ldd	r24, Y+1	; 0x01
    4fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    4fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    4fb8:	04 97       	sbiw	r24, 0x04	; 4
    4fba:	a1 05       	cpc	r26, r1
    4fbc:	b1 05       	cpc	r27, r1
    4fbe:	69 f4       	brne	.+26     	; 0x4fda <nmi_get_chipid+0x11c>
    4fc0:	81 eb       	ldi	r24, 0xB1	; 177
    4fc2:	92 e0       	ldi	r25, 0x02	; 2
    4fc4:	a0 e1       	ldi	r26, 0x10	; 16
    4fc6:	b0 e0       	ldi	r27, 0x00	; 0
    4fc8:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <chipid.2327>
    4fcc:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <chipid.2327+0x1>
    4fd0:	a0 93 e6 28 	sts	0x28E6, r26	; 0x8028e6 <chipid.2327+0x2>
    4fd4:	b0 93 e7 28 	sts	0x28E7, r27	; 0x8028e7 <chipid.2327+0x3>
    4fd8:	30 c0       	rjmp	.+96     	; 0x503a <nmi_get_chipid+0x17c>
    4fda:	82 eb       	ldi	r24, 0xB2	; 178
    4fdc:	92 e0       	ldi	r25, 0x02	; 2
    4fde:	a0 e1       	ldi	r26, 0x10	; 16
    4fe0:	b0 e0       	ldi	r27, 0x00	; 0
    4fe2:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <chipid.2327>
    4fe6:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <chipid.2327+0x1>
    4fea:	a0 93 e6 28 	sts	0x28E6, r26	; 0x8028e6 <chipid.2327+0x2>
    4fee:	b0 93 e7 28 	sts	0x28E7, r27	; 0x8028e7 <chipid.2327+0x3>
    4ff2:	23 c0       	rjmp	.+70     	; 0x503a <nmi_get_chipid+0x17c>
    4ff4:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <chipid.2327>
    4ff8:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <chipid.2327+0x1>
    4ffc:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <chipid.2327+0x2>
    5000:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <chipid.2327+0x3>
    5004:	80 3f       	cpi	r24, 0xF0	; 240
    5006:	91 05       	cpc	r25, r1
    5008:	a0 41       	sbci	r26, 0x10	; 16
    500a:	b1 05       	cpc	r27, r1
    500c:	b1 f4       	brne	.+44     	; 0x503a <nmi_get_chipid+0x17c>
    500e:	44 ee       	ldi	r20, 0xE4	; 228
    5010:	58 e2       	ldi	r21, 0x28	; 40
    5012:	60 e0       	ldi	r22, 0x00	; 0
    5014:	70 e0       	ldi	r23, 0x00	; 0
    5016:	8b e3       	ldi	r24, 0x3B	; 59
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    501e:	88 23       	and	r24, r24
    5020:	61 f0       	breq	.+24     	; 0x503a <nmi_get_chipid+0x17c>
    5022:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <chipid.2327>
    5026:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <chipid.2327+0x1>
    502a:	10 92 e6 28 	sts	0x28E6, r1	; 0x8028e6 <chipid.2327+0x2>
    502e:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <chipid.2327+0x3>
    5032:	80 e0       	ldi	r24, 0x00	; 0
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	dc 01       	movw	r26, r24
    5038:	2a c0       	rjmp	.+84     	; 0x508e <nmi_get_chipid+0x1d0>
    503a:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <chipid.2327>
    503e:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <chipid.2327+0x1>
    5042:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <chipid.2327+0x2>
    5046:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <chipid.2327+0x3>
    504a:	a0 7f       	andi	r26, 0xF0	; 240
    504c:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <chipid.2327>
    5050:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <chipid.2327+0x1>
    5054:	a0 93 e6 28 	sts	0x28E6, r26	; 0x8028e6 <chipid.2327+0x2>
    5058:	b0 93 e7 28 	sts	0x28E7, r27	; 0x8028e7 <chipid.2327+0x3>
    505c:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <chipid.2327>
    5060:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <chipid.2327+0x1>
    5064:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <chipid.2327+0x2>
    5068:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <chipid.2327+0x3>
    506c:	a5 60       	ori	r26, 0x05	; 5
    506e:	80 93 e4 28 	sts	0x28E4, r24	; 0x8028e4 <chipid.2327>
    5072:	90 93 e5 28 	sts	0x28E5, r25	; 0x8028e5 <chipid.2327+0x1>
    5076:	a0 93 e6 28 	sts	0x28E6, r26	; 0x8028e6 <chipid.2327+0x2>
    507a:	b0 93 e7 28 	sts	0x28E7, r27	; 0x8028e7 <chipid.2327+0x3>
    507e:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <chipid.2327>
    5082:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <chipid.2327+0x1>
    5086:	a0 91 e6 28 	lds	r26, 0x28E6	; 0x8028e6 <chipid.2327+0x2>
    508a:	b0 91 e7 28 	lds	r27, 0x28E7	; 0x8028e7 <chipid.2327+0x3>
    508e:	bc 01       	movw	r22, r24
    5090:	cd 01       	movw	r24, r26
    5092:	24 96       	adiw	r28, 0x04	; 4
    5094:	cd bf       	out	0x3d, r28	; 61
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	df 91       	pop	r29
    509a:	cf 91       	pop	r28
    509c:	08 95       	ret

0000509e <chip_sleep>:
    509e:	cf 93       	push	r28
    50a0:	df 93       	push	r29
    50a2:	cd b7       	in	r28, 0x3d	; 61
    50a4:	de b7       	in	r29, 0x3e	; 62
    50a6:	25 97       	sbiw	r28, 0x05	; 5
    50a8:	cd bf       	out	0x3d, r28	; 61
    50aa:	de bf       	out	0x3e, r29	; 62
    50ac:	19 82       	std	Y+1, r1	; 0x01
    50ae:	ce 01       	movw	r24, r28
    50b0:	02 96       	adiw	r24, 0x02	; 2
    50b2:	ac 01       	movw	r20, r24
    50b4:	60 e1       	ldi	r22, 0x10	; 16
    50b6:	70 e0       	ldi	r23, 0x00	; 0
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    50c0:	89 83       	std	Y+1, r24	; 0x01
    50c2:	89 81       	ldd	r24, Y+1	; 0x01
    50c4:	88 23       	and	r24, r24
    50c6:	09 f0       	breq	.+2      	; 0x50ca <chip_sleep+0x2c>
    50c8:	71 c0       	rjmp	.+226    	; 0x51ac <chip_sleep+0x10e>
    50ca:	8a 81       	ldd	r24, Y+2	; 0x02
    50cc:	9b 81       	ldd	r25, Y+3	; 0x03
    50ce:	ac 81       	ldd	r26, Y+4	; 0x04
    50d0:	bd 81       	ldd	r27, Y+5	; 0x05
    50d2:	81 70       	andi	r24, 0x01	; 1
    50d4:	99 27       	eor	r25, r25
    50d6:	aa 27       	eor	r26, r26
    50d8:	bb 27       	eor	r27, r27
    50da:	89 2b       	or	r24, r25
    50dc:	8a 2b       	or	r24, r26
    50de:	8b 2b       	or	r24, r27
    50e0:	09 f0       	breq	.+2      	; 0x50e4 <chip_sleep+0x46>
    50e2:	e5 cf       	rjmp	.-54     	; 0x50ae <chip_sleep+0x10>
    50e4:	00 00       	nop
    50e6:	ce 01       	movw	r24, r28
    50e8:	02 96       	adiw	r24, 0x02	; 2
    50ea:	ac 01       	movw	r20, r24
    50ec:	61 e0       	ldi	r22, 0x01	; 1
    50ee:	70 e0       	ldi	r23, 0x00	; 0
    50f0:	80 e0       	ldi	r24, 0x00	; 0
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    50f8:	89 83       	std	Y+1, r24	; 0x01
    50fa:	89 81       	ldd	r24, Y+1	; 0x01
    50fc:	88 23       	and	r24, r24
    50fe:	09 f0       	breq	.+2      	; 0x5102 <chip_sleep+0x64>
    5100:	57 c0       	rjmp	.+174    	; 0x51b0 <chip_sleep+0x112>
    5102:	8a 81       	ldd	r24, Y+2	; 0x02
    5104:	9b 81       	ldd	r25, Y+3	; 0x03
    5106:	ac 81       	ldd	r26, Y+4	; 0x04
    5108:	bd 81       	ldd	r27, Y+5	; 0x05
    510a:	82 70       	andi	r24, 0x02	; 2
    510c:	99 27       	eor	r25, r25
    510e:	aa 27       	eor	r26, r26
    5110:	bb 27       	eor	r27, r27
    5112:	89 2b       	or	r24, r25
    5114:	8a 2b       	or	r24, r26
    5116:	8b 2b       	or	r24, r27
    5118:	c9 f0       	breq	.+50     	; 0x514c <chip_sleep+0xae>
    511a:	8a 81       	ldd	r24, Y+2	; 0x02
    511c:	9b 81       	ldd	r25, Y+3	; 0x03
    511e:	ac 81       	ldd	r26, Y+4	; 0x04
    5120:	bd 81       	ldd	r27, Y+5	; 0x05
    5122:	8d 7f       	andi	r24, 0xFD	; 253
    5124:	8a 83       	std	Y+2, r24	; 0x02
    5126:	9b 83       	std	Y+3, r25	; 0x03
    5128:	ac 83       	std	Y+4, r26	; 0x04
    512a:	bd 83       	std	Y+5, r27	; 0x05
    512c:	8a 81       	ldd	r24, Y+2	; 0x02
    512e:	9b 81       	ldd	r25, Y+3	; 0x03
    5130:	ac 81       	ldd	r26, Y+4	; 0x04
    5132:	bd 81       	ldd	r27, Y+5	; 0x05
    5134:	9c 01       	movw	r18, r24
    5136:	ad 01       	movw	r20, r26
    5138:	61 e0       	ldi	r22, 0x01	; 1
    513a:	70 e0       	ldi	r23, 0x00	; 0
    513c:	80 e0       	ldi	r24, 0x00	; 0
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    5144:	89 83       	std	Y+1, r24	; 0x01
    5146:	89 81       	ldd	r24, Y+1	; 0x01
    5148:	88 23       	and	r24, r24
    514a:	a1 f5       	brne	.+104    	; 0x51b4 <chip_sleep+0x116>
    514c:	ce 01       	movw	r24, r28
    514e:	02 96       	adiw	r24, 0x02	; 2
    5150:	ac 01       	movw	r20, r24
    5152:	6b e0       	ldi	r22, 0x0B	; 11
    5154:	70 e0       	ldi	r23, 0x00	; 0
    5156:	80 e0       	ldi	r24, 0x00	; 0
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    515e:	89 83       	std	Y+1, r24	; 0x01
    5160:	89 81       	ldd	r24, Y+1	; 0x01
    5162:	88 23       	and	r24, r24
    5164:	49 f5       	brne	.+82     	; 0x51b8 <chip_sleep+0x11a>
    5166:	8a 81       	ldd	r24, Y+2	; 0x02
    5168:	9b 81       	ldd	r25, Y+3	; 0x03
    516a:	ac 81       	ldd	r26, Y+4	; 0x04
    516c:	bd 81       	ldd	r27, Y+5	; 0x05
    516e:	81 70       	andi	r24, 0x01	; 1
    5170:	99 27       	eor	r25, r25
    5172:	aa 27       	eor	r26, r26
    5174:	bb 27       	eor	r27, r27
    5176:	89 2b       	or	r24, r25
    5178:	8a 2b       	or	r24, r26
    517a:	8b 2b       	or	r24, r27
    517c:	f1 f0       	breq	.+60     	; 0x51ba <chip_sleep+0x11c>
    517e:	8a 81       	ldd	r24, Y+2	; 0x02
    5180:	9b 81       	ldd	r25, Y+3	; 0x03
    5182:	ac 81       	ldd	r26, Y+4	; 0x04
    5184:	bd 81       	ldd	r27, Y+5	; 0x05
    5186:	8e 7f       	andi	r24, 0xFE	; 254
    5188:	8a 83       	std	Y+2, r24	; 0x02
    518a:	9b 83       	std	Y+3, r25	; 0x03
    518c:	ac 83       	std	Y+4, r26	; 0x04
    518e:	bd 83       	std	Y+5, r27	; 0x05
    5190:	8a 81       	ldd	r24, Y+2	; 0x02
    5192:	9b 81       	ldd	r25, Y+3	; 0x03
    5194:	ac 81       	ldd	r26, Y+4	; 0x04
    5196:	bd 81       	ldd	r27, Y+5	; 0x05
    5198:	9c 01       	movw	r18, r24
    519a:	ad 01       	movw	r20, r26
    519c:	6b e0       	ldi	r22, 0x0B	; 11
    519e:	70 e0       	ldi	r23, 0x00	; 0
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    51a8:	89 83       	std	Y+1, r24	; 0x01
    51aa:	07 c0       	rjmp	.+14     	; 0x51ba <chip_sleep+0x11c>
    51ac:	00 00       	nop
    51ae:	05 c0       	rjmp	.+10     	; 0x51ba <chip_sleep+0x11c>
    51b0:	00 00       	nop
    51b2:	03 c0       	rjmp	.+6      	; 0x51ba <chip_sleep+0x11c>
    51b4:	00 00       	nop
    51b6:	01 c0       	rjmp	.+2      	; 0x51ba <chip_sleep+0x11c>
    51b8:	00 00       	nop
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	25 96       	adiw	r28, 0x05	; 5
    51be:	cd bf       	out	0x3d, r28	; 61
    51c0:	de bf       	out	0x3e, r29	; 62
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	08 95       	ret

000051c8 <chip_wake>:
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
    51d0:	2d 97       	sbiw	r28, 0x0d	; 13
    51d2:	cd bf       	out	0x3d, r28	; 61
    51d4:	de bf       	out	0x3e, r29	; 62
    51d6:	19 82       	std	Y+1, r1	; 0x01
    51d8:	1e 82       	std	Y+6, r1	; 0x06
    51da:	1f 82       	std	Y+7, r1	; 0x07
    51dc:	18 86       	std	Y+8, r1	; 0x08
    51de:	19 86       	std	Y+9, r1	; 0x09
    51e0:	1a 86       	std	Y+10, r1	; 0x0a
    51e2:	1b 86       	std	Y+11, r1	; 0x0b
    51e4:	1c 86       	std	Y+12, r1	; 0x0c
    51e6:	1d 86       	std	Y+13, r1	; 0x0d
    51e8:	1a 82       	std	Y+2, r1	; 0x02
    51ea:	1b 82       	std	Y+3, r1	; 0x03
    51ec:	1c 82       	std	Y+4, r1	; 0x04
    51ee:	1d 82       	std	Y+5, r1	; 0x05
    51f0:	ce 01       	movw	r24, r28
    51f2:	06 96       	adiw	r24, 0x06	; 6
    51f4:	ac 01       	movw	r20, r24
    51f6:	6b e0       	ldi	r22, 0x0B	; 11
    51f8:	70 e0       	ldi	r23, 0x00	; 0
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    5202:	89 83       	std	Y+1, r24	; 0x01
    5204:	89 81       	ldd	r24, Y+1	; 0x01
    5206:	88 23       	and	r24, r24
    5208:	09 f0       	breq	.+2      	; 0x520c <chip_wake+0x44>
    520a:	83 c0       	rjmp	.+262    	; 0x5312 <chip_wake+0x14a>
    520c:	8e 81       	ldd	r24, Y+6	; 0x06
    520e:	9f 81       	ldd	r25, Y+7	; 0x07
    5210:	a8 85       	ldd	r26, Y+8	; 0x08
    5212:	b9 85       	ldd	r27, Y+9	; 0x09
    5214:	81 70       	andi	r24, 0x01	; 1
    5216:	99 27       	eor	r25, r25
    5218:	aa 27       	eor	r26, r26
    521a:	bb 27       	eor	r27, r27
    521c:	89 2b       	or	r24, r25
    521e:	8a 2b       	or	r24, r26
    5220:	8b 2b       	or	r24, r27
    5222:	91 f4       	brne	.+36     	; 0x5248 <chip_wake+0x80>
    5224:	8e 81       	ldd	r24, Y+6	; 0x06
    5226:	9f 81       	ldd	r25, Y+7	; 0x07
    5228:	a8 85       	ldd	r26, Y+8	; 0x08
    522a:	b9 85       	ldd	r27, Y+9	; 0x09
    522c:	81 60       	ori	r24, 0x01	; 1
    522e:	9c 01       	movw	r18, r24
    5230:	ad 01       	movw	r20, r26
    5232:	6b e0       	ldi	r22, 0x0B	; 11
    5234:	70 e0       	ldi	r23, 0x00	; 0
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    523e:	89 83       	std	Y+1, r24	; 0x01
    5240:	89 81       	ldd	r24, Y+1	; 0x01
    5242:	88 23       	and	r24, r24
    5244:	09 f0       	breq	.+2      	; 0x5248 <chip_wake+0x80>
    5246:	67 c0       	rjmp	.+206    	; 0x5316 <chip_wake+0x14e>
    5248:	ce 01       	movw	r24, r28
    524a:	06 96       	adiw	r24, 0x06	; 6
    524c:	ac 01       	movw	r20, r24
    524e:	61 e0       	ldi	r22, 0x01	; 1
    5250:	70 e0       	ldi	r23, 0x00	; 0
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    525a:	89 83       	std	Y+1, r24	; 0x01
    525c:	89 81       	ldd	r24, Y+1	; 0x01
    525e:	88 23       	and	r24, r24
    5260:	09 f0       	breq	.+2      	; 0x5264 <chip_wake+0x9c>
    5262:	5b c0       	rjmp	.+182    	; 0x531a <chip_wake+0x152>
    5264:	8e 81       	ldd	r24, Y+6	; 0x06
    5266:	9f 81       	ldd	r25, Y+7	; 0x07
    5268:	a8 85       	ldd	r26, Y+8	; 0x08
    526a:	b9 85       	ldd	r27, Y+9	; 0x09
    526c:	82 70       	andi	r24, 0x02	; 2
    526e:	99 27       	eor	r25, r25
    5270:	aa 27       	eor	r26, r26
    5272:	bb 27       	eor	r27, r27
    5274:	89 2b       	or	r24, r25
    5276:	8a 2b       	or	r24, r26
    5278:	8b 2b       	or	r24, r27
    527a:	91 f4       	brne	.+36     	; 0x52a0 <chip_wake+0xd8>
    527c:	8e 81       	ldd	r24, Y+6	; 0x06
    527e:	9f 81       	ldd	r25, Y+7	; 0x07
    5280:	a8 85       	ldd	r26, Y+8	; 0x08
    5282:	b9 85       	ldd	r27, Y+9	; 0x09
    5284:	82 60       	ori	r24, 0x02	; 2
    5286:	9c 01       	movw	r18, r24
    5288:	ad 01       	movw	r20, r26
    528a:	61 e0       	ldi	r22, 0x01	; 1
    528c:	70 e0       	ldi	r23, 0x00	; 0
    528e:	80 e0       	ldi	r24, 0x00	; 0
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    5296:	89 83       	std	Y+1, r24	; 0x01
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	88 23       	and	r24, r24
    529c:	09 f0       	breq	.+2      	; 0x52a0 <chip_wake+0xd8>
    529e:	3f c0       	rjmp	.+126    	; 0x531e <chip_wake+0x156>
    52a0:	ce 01       	movw	r24, r28
    52a2:	0a 96       	adiw	r24, 0x0a	; 10
    52a4:	ac 01       	movw	r20, r24
    52a6:	6f e0       	ldi	r22, 0x0F	; 15
    52a8:	70 e0       	ldi	r23, 0x00	; 0
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    52b2:	89 83       	std	Y+1, r24	; 0x01
    52b4:	89 81       	ldd	r24, Y+1	; 0x01
    52b6:	88 23       	and	r24, r24
    52b8:	a1 f5       	brne	.+104    	; 0x5322 <chip_wake+0x15a>
    52ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    52bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    52be:	ac 85       	ldd	r26, Y+12	; 0x0c
    52c0:	bd 85       	ldd	r27, Y+13	; 0x0d
    52c2:	84 70       	andi	r24, 0x04	; 4
    52c4:	99 27       	eor	r25, r25
    52c6:	aa 27       	eor	r26, r26
    52c8:	bb 27       	eor	r27, r27
    52ca:	89 2b       	or	r24, r25
    52cc:	8a 2b       	or	r24, r26
    52ce:	8b 2b       	or	r24, r27
    52d0:	e1 f4       	brne	.+56     	; 0x530a <chip_wake+0x142>
    52d2:	62 e0       	ldi	r22, 0x02	; 2
    52d4:	70 e0       	ldi	r23, 0x00	; 0
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	9b 81       	ldd	r25, Y+3	; 0x03
    52e2:	ac 81       	ldd	r26, Y+4	; 0x04
    52e4:	bd 81       	ldd	r27, Y+5	; 0x05
    52e6:	01 96       	adiw	r24, 0x01	; 1
    52e8:	a1 1d       	adc	r26, r1
    52ea:	b1 1d       	adc	r27, r1
    52ec:	8a 83       	std	Y+2, r24	; 0x02
    52ee:	9b 83       	std	Y+3, r25	; 0x03
    52f0:	ac 83       	std	Y+4, r26	; 0x04
    52f2:	bd 83       	std	Y+5, r27	; 0x05
    52f4:	8a 81       	ldd	r24, Y+2	; 0x02
    52f6:	9b 81       	ldd	r25, Y+3	; 0x03
    52f8:	ac 81       	ldd	r26, Y+4	; 0x04
    52fa:	bd 81       	ldd	r27, Y+5	; 0x05
    52fc:	05 97       	sbiw	r24, 0x05	; 5
    52fe:	a1 05       	cpc	r26, r1
    5300:	b1 05       	cpc	r27, r1
    5302:	70 f2       	brcs	.-100    	; 0x52a0 <chip_wake+0xd8>
    5304:	8c ef       	ldi	r24, 0xFC	; 252
    5306:	89 83       	std	Y+1, r24	; 0x01
    5308:	0d c0       	rjmp	.+26     	; 0x5324 <chip_wake+0x15c>
    530a:	00 00       	nop
    530c:	0e 94 8d 2b 	call	0x571a	; 0x571a <nm_bus_reset>
    5310:	09 c0       	rjmp	.+18     	; 0x5324 <chip_wake+0x15c>
    5312:	00 00       	nop
    5314:	07 c0       	rjmp	.+14     	; 0x5324 <chip_wake+0x15c>
    5316:	00 00       	nop
    5318:	05 c0       	rjmp	.+10     	; 0x5324 <chip_wake+0x15c>
    531a:	00 00       	nop
    531c:	03 c0       	rjmp	.+6      	; 0x5324 <chip_wake+0x15c>
    531e:	00 00       	nop
    5320:	01 c0       	rjmp	.+2      	; 0x5324 <chip_wake+0x15c>
    5322:	00 00       	nop
    5324:	89 81       	ldd	r24, Y+1	; 0x01
    5326:	2d 96       	adiw	r28, 0x0d	; 13
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	de bf       	out	0x3e, r29	; 62
    532c:	df 91       	pop	r29
    532e:	cf 91       	pop	r28
    5330:	08 95       	ret

00005332 <wait_for_bootrom>:

sint8 wait_for_bootrom(uint8 arg)
{
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	cd b7       	in	r28, 0x3d	; 61
    5338:	de b7       	in	r29, 0x3e	; 62
    533a:	62 97       	sbiw	r28, 0x12	; 18
    533c:	cd bf       	out	0x3d, r28	; 61
    533e:	de bf       	out	0x3e, r29	; 62
    5340:	8a 8b       	std	Y+18, r24	; 0x12
	sint8 ret = M2M_SUCCESS;
    5342:	1d 86       	std	Y+13, r1	; 0x0d
	uint32 reg = 0, cnt = 0;
    5344:	19 82       	std	Y+1, r1	; 0x01
    5346:	1a 82       	std	Y+2, r1	; 0x02
    5348:	1b 82       	std	Y+3, r1	; 0x03
    534a:	1c 82       	std	Y+4, r1	; 0x04
    534c:	1d 82       	std	Y+5, r1	; 0x05
    534e:	1e 82       	std	Y+6, r1	; 0x06
    5350:	1f 82       	std	Y+7, r1	; 0x07
    5352:	18 86       	std	Y+8, r1	; 0x08
	uint32 u32GpReg1 = 0;
    5354:	19 86       	std	Y+9, r1	; 0x09
    5356:	1a 86       	std	Y+10, r1	; 0x0a
    5358:	1b 86       	std	Y+11, r1	; 0x0b
    535a:	1c 86       	std	Y+12, r1	; 0x0c
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    535c:	82 e5       	ldi	r24, 0x52	; 82
    535e:	93 e1       	ldi	r25, 0x13	; 19
    5360:	dc 01       	movw	r26, r24
    5362:	8e 87       	std	Y+14, r24	; 0x0e
    5364:	9f 87       	std	Y+15, r25	; 0x0f
    5366:	a8 8b       	std	Y+16, r26	; 0x10
    5368:	b9 8b       	std	Y+17, r27	; 0x11
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    536a:	19 82       	std	Y+1, r1	; 0x01
    536c:	1a 82       	std	Y+2, r1	; 0x02
    536e:	1b 82       	std	Y+3, r1	; 0x03
    5370:	1c 82       	std	Y+4, r1	; 0x04
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    5372:	64 e1       	ldi	r22, 0x14	; 20
    5374:	70 e1       	ldi	r23, 0x10	; 16
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	0e 94 99 2b 	call	0x5732	; 0x5732 <nm_read_reg>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	89 83       	std	Y+1, r24	; 0x01
    5384:	9a 83       	std	Y+2, r25	; 0x02
    5386:	ab 83       	std	Y+3, r26	; 0x03
    5388:	bc 83       	std	Y+4, r27	; 0x04
		if (reg & 0x80000000) {
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	9a 81       	ldd	r25, Y+2	; 0x02
    538e:	ab 81       	ldd	r26, Y+3	; 0x03
    5390:	bc 81       	ldd	r27, Y+4	; 0x04
    5392:	bb 23       	and	r27, r27
    5394:	3c f0       	brlt	.+14     	; 0x53a4 <wait_for_bootrom+0x72>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    5396:	61 e0       	ldi	r22, 0x01	; 1
    5398:	70 e0       	ldi	r23, 0x00	; 0
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
	}
    53a2:	e7 cf       	rjmp	.-50     	; 0x5372 <wait_for_bootrom+0x40>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    53a4:	00 00       	nop
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    53a6:	6c eb       	ldi	r22, 0xBC	; 188
    53a8:	77 e0       	ldi	r23, 0x07	; 7
    53aa:	82 e0       	ldi	r24, 0x02	; 2
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	0e 94 99 2b 	call	0x5732	; 0x5732 <nm_read_reg>
    53b2:	dc 01       	movw	r26, r24
    53b4:	cb 01       	movw	r24, r22
    53b6:	89 83       	std	Y+1, r24	; 0x01
    53b8:	9a 83       	std	Y+2, r25	; 0x02
    53ba:	ab 83       	std	Y+3, r26	; 0x03
    53bc:	bc 83       	std	Y+4, r27	; 0x04
	reg &= 0x1;
    53be:	89 81       	ldd	r24, Y+1	; 0x01
    53c0:	9a 81       	ldd	r25, Y+2	; 0x02
    53c2:	ab 81       	ldd	r26, Y+3	; 0x03
    53c4:	bc 81       	ldd	r27, Y+4	; 0x04
    53c6:	81 70       	andi	r24, 0x01	; 1
    53c8:	99 27       	eor	r25, r25
    53ca:	aa 27       	eor	r26, r26
    53cc:	bb 27       	eor	r27, r27
    53ce:	89 83       	std	Y+1, r24	; 0x01
    53d0:	9a 83       	std	Y+2, r25	; 0x02
    53d2:	ab 83       	std	Y+3, r26	; 0x03
    53d4:	bc 83       	std	Y+4, r27	; 0x04

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    53d6:	89 81       	ldd	r24, Y+1	; 0x01
    53d8:	9a 81       	ldd	r25, Y+2	; 0x02
    53da:	ab 81       	ldd	r26, Y+3	; 0x03
    53dc:	bc 81       	ldd	r27, Y+4	; 0x04
    53de:	89 2b       	or	r24, r25
    53e0:	8a 2b       	or	r24, r26
    53e2:	8b 2b       	or	r24, r27
    53e4:	51 f5       	brne	.+84     	; 0x543a <wait_for_bootrom+0x108>
	{
		reg = 0;
    53e6:	19 82       	std	Y+1, r1	; 0x01
    53e8:	1a 82       	std	Y+2, r1	; 0x02
    53ea:	1b 82       	std	Y+3, r1	; 0x03
    53ec:	1c 82       	std	Y+4, r1	; 0x04
		while(reg != M2M_FINISH_BOOT_ROM)
    53ee:	1c c0       	rjmp	.+56     	; 0x5428 <wait_for_bootrom+0xf6>
		{
			nm_bsp_sleep(1);
    53f0:	61 e0       	ldi	r22, 0x01	; 1
    53f2:	70 e0       	ldi	r23, 0x00	; 0
    53f4:	80 e0       	ldi	r24, 0x00	; 0
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    53fc:	6c e0       	ldi	r22, 0x0C	; 12
    53fe:	70 e0       	ldi	r23, 0x00	; 0
    5400:	cb 01       	movw	r24, r22
    5402:	0e 94 99 2b 	call	0x5732	; 0x5732 <nm_read_reg>
    5406:	dc 01       	movw	r26, r24
    5408:	cb 01       	movw	r24, r22
    540a:	89 83       	std	Y+1, r24	; 0x01
    540c:	9a 83       	std	Y+2, r25	; 0x02
    540e:	ab 83       	std	Y+3, r26	; 0x03
    5410:	bc 83       	std	Y+4, r27	; 0x04

			if(++cnt > TIMEOUT)
    5412:	8d 81       	ldd	r24, Y+5	; 0x05
    5414:	9e 81       	ldd	r25, Y+6	; 0x06
    5416:	af 81       	ldd	r26, Y+7	; 0x07
    5418:	b8 85       	ldd	r27, Y+8	; 0x08
    541a:	01 96       	adiw	r24, 0x01	; 1
    541c:	a1 1d       	adc	r26, r1
    541e:	b1 1d       	adc	r27, r1
    5420:	8d 83       	std	Y+5, r24	; 0x05
    5422:	9e 83       	std	Y+6, r25	; 0x06
    5424:	af 83       	std	Y+7, r26	; 0x07
    5426:	b8 87       	std	Y+8, r27	; 0x08

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    5428:	89 81       	ldd	r24, Y+1	; 0x01
    542a:	9a 81       	ldd	r25, Y+2	; 0x02
    542c:	ab 81       	ldd	r26, Y+3	; 0x03
    542e:	bc 81       	ldd	r27, Y+4	; 0x04
    5430:	8e 39       	cpi	r24, 0x9E	; 158
    5432:	90 4d       	sbci	r25, 0xD0	; 208
    5434:	ad 4a       	sbci	r26, 0xAD	; 173
    5436:	b0 41       	sbci	r27, 0x10	; 16
    5438:	d9 f6       	brne	.-74     	; 0x53f0 <wait_for_bootrom+0xbe>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    543a:	8a 89       	ldd	r24, Y+18	; 0x12
    543c:	82 30       	cpi	r24, 0x02	; 2
    543e:	a9 f4       	brne	.+42     	; 0x546a <wait_for_bootrom+0x138>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    5440:	2d e7       	ldi	r18, 0x7D	; 125
    5442:	35 ed       	ldi	r19, 0xD5	; 213
    5444:	4c e1       	ldi	r20, 0x1C	; 28
    5446:	5c e3       	ldi	r21, 0x3C	; 60
    5448:	6c ea       	ldi	r22, 0xAC	; 172
    544a:	77 e0       	ldi	r23, 0x07	; 7
    544c:	82 e0       	ldi	r24, 0x02	; 2
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	40 e1       	ldi	r20, 0x10	; 16
    545a:	50 e0       	ldi	r21, 0x00	; 0
    545c:	6c e8       	ldi	r22, 0x8C	; 140
    545e:	70 e1       	ldi	r23, 0x10	; 16
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    5468:	3b c0       	rjmp	.+118    	; 0x54e0 <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    546a:	8a 89       	ldd	r24, Y+18	; 0x12
    546c:	83 30       	cpi	r24, 0x03	; 3
    546e:	a1 f4       	brne	.+40     	; 0x5498 <wait_for_bootrom+0x166>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    5470:	2d e7       	ldi	r18, 0x7D	; 125
    5472:	35 ed       	ldi	r19, 0xD5	; 213
    5474:	4c e1       	ldi	r20, 0x1C	; 28
    5476:	5c e3       	ldi	r21, 0x3C	; 60
    5478:	6c ea       	ldi	r22, 0xAC	; 172
    547a:	77 e0       	ldi	r23, 0x07	; 7
    547c:	82 e0       	ldi	r24, 0x02	; 2
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	a9 01       	movw	r20, r18
    548a:	6c e8       	ldi	r22, 0x8C	; 140
    548c:	70 e1       	ldi	r23, 0x10	; 16
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    5496:	24 c0       	rjmp	.+72     	; 0x54e0 <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    5498:	8a 89       	ldd	r24, Y+18	; 0x12
    549a:	84 30       	cpi	r24, 0x04	; 4
    549c:	a9 f4       	brne	.+42     	; 0x54c8 <wait_for_bootrom+0x196>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    549e:	80 e8       	ldi	r24, 0x80	; 128
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	a0 e0       	ldi	r26, 0x00	; 0
    54a4:	b0 e0       	ldi	r27, 0x00	; 0
    54a6:	89 87       	std	Y+9, r24	; 0x09
    54a8:	9a 87       	std	Y+10, r25	; 0x0a
    54aa:	ab 87       	std	Y+11, r26	; 0x0b
    54ac:	bc 87       	std	Y+12, r27	; 0x0c
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    54ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    54b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    54b2:	a8 89       	ldd	r26, Y+16	; 0x10
    54b4:	b9 89       	ldd	r27, Y+17	; 0x11
    54b6:	9c 01       	movw	r18, r24
    54b8:	ad 01       	movw	r20, r26
    54ba:	6c e8       	ldi	r22, 0x8C	; 140
    54bc:	70 e1       	ldi	r23, 0x10	; 16
    54be:	80 e0       	ldi	r24, 0x00	; 0
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    54c6:	0c c0       	rjmp	.+24     	; 0x54e0 <wait_for_bootrom+0x1ae>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    54c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    54ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    54cc:	a8 89       	ldd	r26, Y+16	; 0x10
    54ce:	b9 89       	ldd	r27, Y+17	; 0x11
    54d0:	9c 01       	movw	r18, r24
    54d2:	ad 01       	movw	r20, r26
    54d4:	6c e8       	ldi	r22, 0x8C	; 140
    54d6:	70 e1       	ldi	r23, 0x10	; 16
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    54e0:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <nmi_get_chipid>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	9f 70       	andi	r25, 0x0F	; 15
    54ea:	aa 27       	eor	r26, r26
    54ec:	bb 27       	eor	r27, r27
    54ee:	80 3a       	cpi	r24, 0xA0	; 160
    54f0:	93 40       	sbci	r25, 0x03	; 3
    54f2:	a1 05       	cpc	r26, r1
    54f4:	b1 05       	cpc	r27, r1
    54f6:	50 f0       	brcs	.+20     	; 0x550c <wait_for_bootrom+0x1da>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    54f8:	89 85       	ldd	r24, Y+9	; 0x09
    54fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    54fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    54fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    5500:	82 60       	ori	r24, 0x02	; 2
    5502:	bc 01       	movw	r22, r24
    5504:	cd 01       	movw	r24, r26
    5506:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <chip_apply_conf>
    550a:	08 c0       	rjmp	.+16     	; 0x551c <wait_for_bootrom+0x1ea>
	} else {
		chip_apply_conf(u32GpReg1);
    550c:	89 85       	ldd	r24, Y+9	; 0x09
    550e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5510:	ab 85       	ldd	r26, Y+11	; 0x0b
    5512:	bc 85       	ldd	r27, Y+12	; 0x0c
    5514:	bc 01       	movw	r22, r24
    5516:	cd 01       	movw	r24, r26
    5518:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    551c:	21 e6       	ldi	r18, 0x61	; 97
    551e:	3f e2       	ldi	r19, 0x2F	; 47
    5520:	42 e5       	ldi	r20, 0x52	; 82
    5522:	5f ee       	ldi	r21, 0xEF	; 239
    5524:	6c e0       	ldi	r22, 0x0C	; 12
    5526:	70 e0       	ldi	r23, 0x00	; 0
    5528:	cb 01       	movw	r24, r22
    552a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    552e:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    5530:	62 96       	adiw	r28, 0x12	; 18
    5532:	cd bf       	out	0x3d, r28	; 61
    5534:	de bf       	out	0x3e, r29	; 62
    5536:	df 91       	pop	r29
    5538:	cf 91       	pop	r28
    553a:	08 95       	ret

0000553c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
    5540:	cd b7       	in	r28, 0x3d	; 61
    5542:	de b7       	in	r29, 0x3e	; 62
    5544:	66 97       	sbiw	r28, 0x16	; 22
    5546:	cd bf       	out	0x3d, r28	; 61
    5548:	de bf       	out	0x3e, r29	; 62
    554a:	8e 8b       	std	Y+22, r24	; 0x16
	sint8 ret = M2M_SUCCESS;
    554c:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg = 0, cnt = 0;
    554e:	1a 82       	std	Y+2, r1	; 0x02
    5550:	1b 82       	std	Y+3, r1	; 0x03
    5552:	1c 82       	std	Y+4, r1	; 0x04
    5554:	1d 82       	std	Y+5, r1	; 0x05
    5556:	1e 82       	std	Y+6, r1	; 0x06
    5558:	1f 82       	std	Y+7, r1	; 0x07
    555a:	18 86       	std	Y+8, r1	; 0x08
    555c:	19 86       	std	Y+9, r1	; 0x09
	uint32 u32Timeout = TIMEOUT;
    555e:	8f ef       	ldi	r24, 0xFF	; 255
    5560:	9f ef       	ldi	r25, 0xFF	; 255
    5562:	dc 01       	movw	r26, r24
    5564:	8a 87       	std	Y+10, r24	; 0x0a
    5566:	9b 87       	std	Y+11, r25	; 0x0b
    5568:	ac 87       	std	Y+12, r26	; 0x0c
    556a:	bd 87       	std	Y+13, r27	; 0x0d
	volatile uint32 regAddress = NMI_STATE_REG;
    556c:	8c e8       	ldi	r24, 0x8C	; 140
    556e:	90 e1       	ldi	r25, 0x10	; 16
    5570:	a0 e0       	ldi	r26, 0x00	; 0
    5572:	b0 e0       	ldi	r27, 0x00	; 0
    5574:	8e 87       	std	Y+14, r24	; 0x0e
    5576:	9f 87       	std	Y+15, r25	; 0x0f
    5578:	a8 8b       	std	Y+16, r26	; 0x10
    557a:	b9 8b       	std	Y+17, r27	; 0x11
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    557c:	86 e3       	ldi	r24, 0x36	; 54
    557e:	96 e2       	ldi	r25, 0x26	; 38
    5580:	a3 e5       	ldi	r26, 0x53	; 83
    5582:	b2 e0       	ldi	r27, 0x02	; 2
    5584:	8a 8b       	std	Y+18, r24	; 0x12
    5586:	9b 8b       	std	Y+19, r25	; 0x13
    5588:	ac 8b       	std	Y+20, r26	; 0x14
    558a:	bd 8b       	std	Y+21, r27	; 0x15
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    558c:	8e 89       	ldd	r24, Y+22	; 0x16
    558e:	82 30       	cpi	r24, 0x02	; 2
    5590:	21 f0       	breq	.+8      	; 0x559a <wait_for_firmware_start+0x5e>
    5592:	8e 89       	ldd	r24, Y+22	; 0x16
    5594:	83 30       	cpi	r24, 0x03	; 3
    5596:	09 f0       	breq	.+2      	; 0x559a <wait_for_firmware_start+0x5e>
    5598:	40 c0       	rjmp	.+128    	; 0x561a <wait_for_firmware_start+0xde>
		regAddress = NMI_REV_REG;
    559a:	8c ea       	ldi	r24, 0xAC	; 172
    559c:	97 e0       	ldi	r25, 0x07	; 7
    559e:	a2 e0       	ldi	r26, 0x02	; 2
    55a0:	b0 e0       	ldi	r27, 0x00	; 0
    55a2:	8e 87       	std	Y+14, r24	; 0x0e
    55a4:	9f 87       	std	Y+15, r25	; 0x0f
    55a6:	a8 8b       	std	Y+16, r26	; 0x10
    55a8:	b9 8b       	std	Y+17, r27	; 0x11
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    55aa:	83 ec       	ldi	r24, 0xC3	; 195
    55ac:	91 ec       	ldi	r25, 0xC1	; 193
    55ae:	ad e5       	ldi	r26, 0x5D	; 93
    55b0:	b7 ed       	ldi	r27, 0xD7	; 215
    55b2:	8a 8b       	std	Y+18, r24	; 0x12
    55b4:	9b 8b       	std	Y+19, r25	; 0x13
    55b6:	ac 8b       	std	Y+20, r26	; 0x14
    55b8:	bd 8b       	std	Y+21, r27	; 0x15
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    55ba:	2f c0       	rjmp	.+94     	; 0x561a <wait_for_firmware_start+0xde>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    55bc:	62 e0       	ldi	r22, 0x02	; 2
    55be:	70 e0       	ldi	r23, 0x00	; 0
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    55c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    55ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    55cc:	a8 89       	ldd	r26, Y+16	; 0x10
    55ce:	b9 89       	ldd	r27, Y+17	; 0x11
    55d0:	bc 01       	movw	r22, r24
    55d2:	cd 01       	movw	r24, r26
    55d4:	0e 94 99 2b 	call	0x5732	; 0x5732 <nm_read_reg>
    55d8:	dc 01       	movw	r26, r24
    55da:	cb 01       	movw	r24, r22
    55dc:	8a 83       	std	Y+2, r24	; 0x02
    55de:	9b 83       	std	Y+3, r25	; 0x03
    55e0:	ac 83       	std	Y+4, r26	; 0x04
    55e2:	bd 83       	std	Y+5, r27	; 0x05
		if(++cnt >= u32Timeout)
    55e4:	8e 81       	ldd	r24, Y+6	; 0x06
    55e6:	9f 81       	ldd	r25, Y+7	; 0x07
    55e8:	a8 85       	ldd	r26, Y+8	; 0x08
    55ea:	b9 85       	ldd	r27, Y+9	; 0x09
    55ec:	01 96       	adiw	r24, 0x01	; 1
    55ee:	a1 1d       	adc	r26, r1
    55f0:	b1 1d       	adc	r27, r1
    55f2:	8e 83       	std	Y+6, r24	; 0x06
    55f4:	9f 83       	std	Y+7, r25	; 0x07
    55f6:	a8 87       	std	Y+8, r26	; 0x08
    55f8:	b9 87       	std	Y+9, r27	; 0x09
    55fa:	2e 81       	ldd	r18, Y+6	; 0x06
    55fc:	3f 81       	ldd	r19, Y+7	; 0x07
    55fe:	48 85       	ldd	r20, Y+8	; 0x08
    5600:	59 85       	ldd	r21, Y+9	; 0x09
    5602:	8a 85       	ldd	r24, Y+10	; 0x0a
    5604:	9b 85       	ldd	r25, Y+11	; 0x0b
    5606:	ac 85       	ldd	r26, Y+12	; 0x0c
    5608:	bd 85       	ldd	r27, Y+13	; 0x0d
    560a:	28 17       	cp	r18, r24
    560c:	39 07       	cpc	r19, r25
    560e:	4a 07       	cpc	r20, r26
    5610:	5b 07       	cpc	r21, r27
    5612:	18 f0       	brcs	.+6      	; 0x561a <wait_for_firmware_start+0xde>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    5614:	8b ef       	ldi	r24, 0xFB	; 251
    5616:	89 83       	std	Y+1, r24	; 0x01
			goto ERR;
    5618:	1f c0       	rjmp	.+62     	; 0x5658 <wait_for_firmware_start+0x11c>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    561a:	2a 89       	ldd	r18, Y+18	; 0x12
    561c:	3b 89       	ldd	r19, Y+19	; 0x13
    561e:	4c 89       	ldd	r20, Y+20	; 0x14
    5620:	5d 89       	ldd	r21, Y+21	; 0x15
    5622:	8a 81       	ldd	r24, Y+2	; 0x02
    5624:	9b 81       	ldd	r25, Y+3	; 0x03
    5626:	ac 81       	ldd	r26, Y+4	; 0x04
    5628:	bd 81       	ldd	r27, Y+5	; 0x05
    562a:	28 17       	cp	r18, r24
    562c:	39 07       	cpc	r19, r25
    562e:	4a 07       	cpc	r20, r26
    5630:	5b 07       	cpc	r21, r27
    5632:	21 f6       	brne	.-120    	; 0x55bc <wait_for_firmware_start+0x80>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    5634:	8a 89       	ldd	r24, Y+18	; 0x12
    5636:	9b 89       	ldd	r25, Y+19	; 0x13
    5638:	ac 89       	ldd	r26, Y+20	; 0x14
    563a:	bd 89       	ldd	r27, Y+21	; 0x15
    563c:	86 33       	cpi	r24, 0x36	; 54
    563e:	96 42       	sbci	r25, 0x26	; 38
    5640:	a3 45       	sbci	r26, 0x53	; 83
    5642:	b2 40       	sbci	r27, 0x02	; 2
    5644:	49 f4       	brne	.+18     	; 0x5658 <wait_for_firmware_start+0x11c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    5646:	20 e0       	ldi	r18, 0x00	; 0
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	a9 01       	movw	r20, r18
    564c:	6c e8       	ldi	r22, 0x8C	; 140
    564e:	70 e1       	ldi	r23, 0x10	; 16
    5650:	80 e0       	ldi	r24, 0x00	; 0
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	}
ERR:
	return ret;
    5658:	89 81       	ldd	r24, Y+1	; 0x01
}
    565a:	66 96       	adiw	r28, 0x16	; 22
    565c:	cd bf       	out	0x3d, r28	; 61
    565e:	de bf       	out	0x3e, r29	; 62
    5660:	df 91       	pop	r29
    5662:	cf 91       	pop	r28
    5664:	08 95       	ret

00005666 <chip_deinit>:

sint8 chip_deinit(void)
{
    5666:	cf 93       	push	r28
    5668:	df 93       	push	r29
    566a:	cd b7       	in	r28, 0x3d	; 61
    566c:	de b7       	in	r29, 0x3e	; 62
    566e:	25 97       	sbiw	r28, 0x05	; 5
    5670:	cd bf       	out	0x3d, r28	; 61
    5672:	de bf       	out	0x3e, r29	; 62
	uint32 reg = 0;
    5674:	1a 82       	std	Y+2, r1	; 0x02
    5676:	1b 82       	std	Y+3, r1	; 0x03
    5678:	1c 82       	std	Y+4, r1	; 0x04
    567a:	1d 82       	std	Y+5, r1	; 0x05
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    567c:	ce 01       	movw	r24, r28
    567e:	02 96       	adiw	r24, 0x02	; 2
    5680:	ac 01       	movw	r20, r24
    5682:	60 e0       	ldi	r22, 0x00	; 0
    5684:	74 e1       	ldi	r23, 0x14	; 20
    5686:	80 e0       	ldi	r24, 0x00	; 0
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    568e:	89 83       	std	Y+1, r24	; 0x01
	if (ret != M2M_SUCCESS) {
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	88 23       	and	r24, r24
    5694:	b9 f4       	brne	.+46     	; 0x56c4 <chip_deinit+0x5e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    5696:	8a 81       	ldd	r24, Y+2	; 0x02
    5698:	9b 81       	ldd	r25, Y+3	; 0x03
    569a:	ac 81       	ldd	r26, Y+4	; 0x04
    569c:	bd 81       	ldd	r27, Y+5	; 0x05
    569e:	9b 7f       	andi	r25, 0xFB	; 251
    56a0:	8a 83       	std	Y+2, r24	; 0x02
    56a2:	9b 83       	std	Y+3, r25	; 0x03
    56a4:	ac 83       	std	Y+4, r26	; 0x04
    56a6:	bd 83       	std	Y+5, r27	; 0x05
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    56a8:	8a 81       	ldd	r24, Y+2	; 0x02
    56aa:	9b 81       	ldd	r25, Y+3	; 0x03
    56ac:	ac 81       	ldd	r26, Y+4	; 0x04
    56ae:	bd 81       	ldd	r27, Y+5	; 0x05
    56b0:	9c 01       	movw	r18, r24
    56b2:	ad 01       	movw	r20, r26
    56b4:	60 e0       	ldi	r22, 0x00	; 0
    56b6:	74 e1       	ldi	r23, 0x14	; 20
    56b8:	80 e0       	ldi	r24, 0x00	; 0
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    56c0:	89 83       	std	Y+1, r24	; 0x01
    56c2:	01 c0       	rjmp	.+2      	; 0x56c6 <chip_deinit+0x60>
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	if (ret != M2M_SUCCESS) {
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
    56c4:	00 00       	nop
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
	return ret;
    56c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    56c8:	25 96       	adiw	r28, 0x05	; 5
    56ca:	cd bf       	out	0x3d, r28	; 61
    56cc:	de bf       	out	0x3e, r29	; 62
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	08 95       	ret

000056d4 <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	00 d0       	rcall	.+0      	; 0x56da <nm_bus_iface_init+0x6>
    56da:	1f 92       	push	r1
    56dc:	cd b7       	in	r28, 0x3d	; 61
    56de:	de b7       	in	r29, 0x3e	; 62
    56e0:	8a 83       	std	Y+2, r24	; 0x02
    56e2:	9b 83       	std	Y+3, r25	; 0x03
    56e4:	19 82       	std	Y+1, r1	; 0x01
    56e6:	8a 81       	ldd	r24, Y+2	; 0x02
    56e8:	9b 81       	ldd	r25, Y+3	; 0x03
    56ea:	0e 94 cd 1a 	call	0x359a	; 0x359a <nm_bus_init>
    56ee:	89 83       	std	Y+1, r24	; 0x01
    56f0:	89 81       	ldd	r24, Y+1	; 0x01
    56f2:	23 96       	adiw	r28, 0x03	; 3
    56f4:	cd bf       	out	0x3d, r28	; 61
    56f6:	de bf       	out	0x3e, r29	; 62
    56f8:	df 91       	pop	r29
    56fa:	cf 91       	pop	r28
    56fc:	08 95       	ret

000056fe <nm_bus_iface_deinit>:
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	1f 92       	push	r1
    5704:	cd b7       	in	r28, 0x3d	; 61
    5706:	de b7       	in	r29, 0x3e	; 62
    5708:	19 82       	std	Y+1, r1	; 0x01
    570a:	0e 94 30 1b 	call	0x3660	; 0x3660 <nm_bus_deinit>
    570e:	89 83       	std	Y+1, r24	; 0x01
    5710:	89 81       	ldd	r24, Y+1	; 0x01
    5712:	0f 90       	pop	r0
    5714:	df 91       	pop	r29
    5716:	cf 91       	pop	r28
    5718:	08 95       	ret

0000571a <nm_bus_reset>:
    571a:	cf 93       	push	r28
    571c:	df 93       	push	r29
    571e:	1f 92       	push	r1
    5720:	cd b7       	in	r28, 0x3d	; 61
    5722:	de b7       	in	r29, 0x3e	; 62
    5724:	19 82       	std	Y+1, r1	; 0x01
    5726:	0e 94 31 35 	call	0x6a62	; 0x6a62 <nm_spi_reset>
    572a:	0f 90       	pop	r0
    572c:	df 91       	pop	r29
    572e:	cf 91       	pop	r28
    5730:	08 95       	ret

00005732 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	00 d0       	rcall	.+0      	; 0x5738 <nm_read_reg+0x6>
    5738:	00 d0       	rcall	.+0      	; 0x573a <nm_read_reg+0x8>
    573a:	cd b7       	in	r28, 0x3d	; 61
    573c:	de b7       	in	r29, 0x3e	; 62
    573e:	69 83       	std	Y+1, r22	; 0x01
    5740:	7a 83       	std	Y+2, r23	; 0x02
    5742:	8b 83       	std	Y+3, r24	; 0x03
    5744:	9c 83       	std	Y+4, r25	; 0x04
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    5746:	89 81       	ldd	r24, Y+1	; 0x01
    5748:	9a 81       	ldd	r25, Y+2	; 0x02
    574a:	ab 81       	ldd	r26, Y+3	; 0x03
    574c:	bc 81       	ldd	r27, Y+4	; 0x04
    574e:	bc 01       	movw	r22, r24
    5750:	cd 01       	movw	r24, r26
    5752:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <nm_spi_read_reg>
    5756:	dc 01       	movw	r26, r24
    5758:	cb 01       	movw	r24, r22
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    575a:	bc 01       	movw	r22, r24
    575c:	cd 01       	movw	r24, r26
    575e:	24 96       	adiw	r28, 0x04	; 4
    5760:	cd bf       	out	0x3d, r28	; 61
    5762:	de bf       	out	0x3e, r29	; 62
    5764:	df 91       	pop	r29
    5766:	cf 91       	pop	r28
    5768:	08 95       	ret

0000576a <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    576a:	cf 93       	push	r28
    576c:	df 93       	push	r29
    576e:	cd b7       	in	r28, 0x3d	; 61
    5770:	de b7       	in	r29, 0x3e	; 62
    5772:	26 97       	sbiw	r28, 0x06	; 6
    5774:	cd bf       	out	0x3d, r28	; 61
    5776:	de bf       	out	0x3e, r29	; 62
    5778:	69 83       	std	Y+1, r22	; 0x01
    577a:	7a 83       	std	Y+2, r23	; 0x02
    577c:	8b 83       	std	Y+3, r24	; 0x03
    577e:	9c 83       	std	Y+4, r25	; 0x04
    5780:	4d 83       	std	Y+5, r20	; 0x05
    5782:	5e 83       	std	Y+6, r21	; 0x06
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    5784:	2d 81       	ldd	r18, Y+5	; 0x05
    5786:	3e 81       	ldd	r19, Y+6	; 0x06
    5788:	89 81       	ldd	r24, Y+1	; 0x01
    578a:	9a 81       	ldd	r25, Y+2	; 0x02
    578c:	ab 81       	ldd	r26, Y+3	; 0x03
    578e:	bc 81       	ldd	r27, Y+4	; 0x04
    5790:	a9 01       	movw	r20, r18
    5792:	bc 01       	movw	r22, r24
    5794:	cd 01       	movw	r24, r26
    5796:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <nm_spi_read_reg_with_ret>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    579a:	26 96       	adiw	r28, 0x06	; 6
    579c:	cd bf       	out	0x3d, r28	; 61
    579e:	de bf       	out	0x3e, r29	; 62
    57a0:	df 91       	pop	r29
    57a2:	cf 91       	pop	r28
    57a4:	08 95       	ret

000057a6 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    57a6:	cf 93       	push	r28
    57a8:	df 93       	push	r29
    57aa:	cd b7       	in	r28, 0x3d	; 61
    57ac:	de b7       	in	r29, 0x3e	; 62
    57ae:	28 97       	sbiw	r28, 0x08	; 8
    57b0:	cd bf       	out	0x3d, r28	; 61
    57b2:	de bf       	out	0x3e, r29	; 62
    57b4:	69 83       	std	Y+1, r22	; 0x01
    57b6:	7a 83       	std	Y+2, r23	; 0x02
    57b8:	8b 83       	std	Y+3, r24	; 0x03
    57ba:	9c 83       	std	Y+4, r25	; 0x04
    57bc:	2d 83       	std	Y+5, r18	; 0x05
    57be:	3e 83       	std	Y+6, r19	; 0x06
    57c0:	4f 83       	std	Y+7, r20	; 0x07
    57c2:	58 87       	std	Y+8, r21	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    57c4:	2d 81       	ldd	r18, Y+5	; 0x05
    57c6:	3e 81       	ldd	r19, Y+6	; 0x06
    57c8:	4f 81       	ldd	r20, Y+7	; 0x07
    57ca:	58 85       	ldd	r21, Y+8	; 0x08
    57cc:	89 81       	ldd	r24, Y+1	; 0x01
    57ce:	9a 81       	ldd	r25, Y+2	; 0x02
    57d0:	ab 81       	ldd	r26, Y+3	; 0x03
    57d2:	bc 81       	ldd	r27, Y+4	; 0x04
    57d4:	bc 01       	movw	r22, r24
    57d6:	cd 01       	movw	r24, r26
    57d8:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <nm_spi_write_reg>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    57dc:	28 96       	adiw	r28, 0x08	; 8
    57de:	cd bf       	out	0x3d, r28	; 61
    57e0:	de bf       	out	0x3e, r29	; 62
    57e2:	df 91       	pop	r29
    57e4:	cf 91       	pop	r28
    57e6:	08 95       	ret

000057e8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	cd b7       	in	r28, 0x3d	; 61
    57ee:	de b7       	in	r29, 0x3e	; 62
    57f0:	28 97       	sbiw	r28, 0x08	; 8
    57f2:	cd bf       	out	0x3d, r28	; 61
    57f4:	de bf       	out	0x3e, r29	; 62
    57f6:	69 83       	std	Y+1, r22	; 0x01
    57f8:	7a 83       	std	Y+2, r23	; 0x02
    57fa:	8b 83       	std	Y+3, r24	; 0x03
    57fc:	9c 83       	std	Y+4, r25	; 0x04
    57fe:	4d 83       	std	Y+5, r20	; 0x05
    5800:	5e 83       	std	Y+6, r21	; 0x06
    5802:	2f 83       	std	Y+7, r18	; 0x07
    5804:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    5806:	2f 81       	ldd	r18, Y+7	; 0x07
    5808:	38 85       	ldd	r19, Y+8	; 0x08
    580a:	4d 81       	ldd	r20, Y+5	; 0x05
    580c:	5e 81       	ldd	r21, Y+6	; 0x06
    580e:	89 81       	ldd	r24, Y+1	; 0x01
    5810:	9a 81       	ldd	r25, Y+2	; 0x02
    5812:	ab 81       	ldd	r26, Y+3	; 0x03
    5814:	bc 81       	ldd	r27, Y+4	; 0x04
    5816:	bc 01       	movw	r22, r24
    5818:	cd 01       	movw	r24, r26
    581a:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <nm_spi_read_block>
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    581e:	28 96       	adiw	r28, 0x08	; 8
    5820:	cd bf       	out	0x3d, r28	; 61
    5822:	de bf       	out	0x3e, r29	; 62
    5824:	df 91       	pop	r29
    5826:	cf 91       	pop	r28
    5828:	08 95       	ret

0000582a <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    582a:	ef 92       	push	r14
    582c:	ff 92       	push	r15
    582e:	0f 93       	push	r16
    5830:	1f 93       	push	r17
    5832:	cf 93       	push	r28
    5834:	df 93       	push	r29
    5836:	cd b7       	in	r28, 0x3d	; 61
    5838:	de b7       	in	r29, 0x3e	; 62
    583a:	61 97       	sbiw	r28, 0x11	; 17
    583c:	cd bf       	out	0x3d, r28	; 61
    583e:	de bf       	out	0x3e, r29	; 62
    5840:	68 87       	std	Y+8, r22	; 0x08
    5842:	79 87       	std	Y+9, r23	; 0x09
    5844:	8a 87       	std	Y+10, r24	; 0x0a
    5846:	9b 87       	std	Y+11, r25	; 0x0b
    5848:	4c 87       	std	Y+12, r20	; 0x0c
    584a:	5d 87       	std	Y+13, r21	; 0x0d
    584c:	0e 87       	std	Y+14, r16	; 0x0e
    584e:	1f 87       	std	Y+15, r17	; 0x0f
    5850:	28 8b       	std	Y+16, r18	; 0x10
    5852:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    5854:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <egstrNmBusCapabilities>
    5858:	90 91 5f 28 	lds	r25, 0x285F	; 0x80285f <egstrNmBusCapabilities+0x1>
    585c:	08 97       	sbiw	r24, 0x08	; 8
    585e:	8e 83       	std	Y+6, r24	; 0x06
    5860:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    5862:	19 82       	std	Y+1, r1	; 0x01
    5864:	1a 82       	std	Y+2, r1	; 0x02
    5866:	1b 82       	std	Y+3, r1	; 0x03
    5868:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    586a:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    586c:	8e 81       	ldd	r24, Y+6	; 0x06
    586e:	9f 81       	ldd	r25, Y+7	; 0x07
    5870:	9c 01       	movw	r18, r24
    5872:	40 e0       	ldi	r20, 0x00	; 0
    5874:	50 e0       	ldi	r21, 0x00	; 0
    5876:	8e 85       	ldd	r24, Y+14	; 0x0e
    5878:	9f 85       	ldd	r25, Y+15	; 0x0f
    587a:	a8 89       	ldd	r26, Y+16	; 0x10
    587c:	b9 89       	ldd	r27, Y+17	; 0x11
    587e:	28 17       	cp	r18, r24
    5880:	39 07       	cpc	r19, r25
    5882:	4a 07       	cpc	r20, r26
    5884:	5b 07       	cpc	r21, r27
    5886:	b8 f0       	brcs	.+46     	; 0x58b6 <nm_read_block+0x8c>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    5888:	6e 85       	ldd	r22, Y+14	; 0x0e
    588a:	7f 85       	ldd	r23, Y+15	; 0x0f
    588c:	89 81       	ldd	r24, Y+1	; 0x01
    588e:	9a 81       	ldd	r25, Y+2	; 0x02
    5890:	2c 85       	ldd	r18, Y+12	; 0x0c
    5892:	3d 85       	ldd	r19, Y+13	; 0x0d
    5894:	a9 01       	movw	r20, r18
    5896:	48 0f       	add	r20, r24
    5898:	59 1f       	adc	r21, r25
    589a:	88 85       	ldd	r24, Y+8	; 0x08
    589c:	99 85       	ldd	r25, Y+9	; 0x09
    589e:	aa 85       	ldd	r26, Y+10	; 0x0a
    58a0:	bb 85       	ldd	r27, Y+11	; 0x0b
    58a2:	9b 01       	movw	r18, r22
    58a4:	bc 01       	movw	r22, r24
    58a6:	cd 01       	movw	r24, r26
    58a8:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <p_nm_read_block>
    58ac:	98 2f       	mov	r25, r24
    58ae:	8d 81       	ldd	r24, Y+5	; 0x05
    58b0:	89 0f       	add	r24, r25
    58b2:	8d 83       	std	Y+5, r24	; 0x05
			break;
    58b4:	51 c0       	rjmp	.+162    	; 0x5958 <nm_read_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    58b6:	89 81       	ldd	r24, Y+1	; 0x01
    58b8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    58bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    58be:	a9 01       	movw	r20, r18
    58c0:	48 0f       	add	r20, r24
    58c2:	59 1f       	adc	r21, r25
    58c4:	2e 81       	ldd	r18, Y+6	; 0x06
    58c6:	3f 81       	ldd	r19, Y+7	; 0x07
    58c8:	88 85       	ldd	r24, Y+8	; 0x08
    58ca:	99 85       	ldd	r25, Y+9	; 0x09
    58cc:	aa 85       	ldd	r26, Y+10	; 0x0a
    58ce:	bb 85       	ldd	r27, Y+11	; 0x0b
    58d0:	bc 01       	movw	r22, r24
    58d2:	cd 01       	movw	r24, r26
    58d4:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <p_nm_read_block>
    58d8:	98 2f       	mov	r25, r24
    58da:	8d 81       	ldd	r24, Y+5	; 0x05
    58dc:	89 0f       	add	r24, r25
    58de:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    58e0:	8d 81       	ldd	r24, Y+5	; 0x05
    58e2:	88 23       	and	r24, r24
    58e4:	c1 f5       	brne	.+112    	; 0x5956 <nm_read_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    58e6:	8e 81       	ldd	r24, Y+6	; 0x06
    58e8:	9f 81       	ldd	r25, Y+7	; 0x07
    58ea:	cc 01       	movw	r24, r24
    58ec:	a0 e0       	ldi	r26, 0x00	; 0
    58ee:	b0 e0       	ldi	r27, 0x00	; 0
    58f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    58f2:	3f 85       	ldd	r19, Y+15	; 0x0f
    58f4:	48 89       	ldd	r20, Y+16	; 0x10
    58f6:	59 89       	ldd	r21, Y+17	; 0x11
    58f8:	79 01       	movw	r14, r18
    58fa:	8a 01       	movw	r16, r20
    58fc:	e8 1a       	sub	r14, r24
    58fe:	f9 0a       	sbc	r15, r25
    5900:	0a 0b       	sbc	r16, r26
    5902:	1b 0b       	sbc	r17, r27
    5904:	d8 01       	movw	r26, r16
    5906:	c7 01       	movw	r24, r14
    5908:	8e 87       	std	Y+14, r24	; 0x0e
    590a:	9f 87       	std	Y+15, r25	; 0x0f
    590c:	a8 8b       	std	Y+16, r26	; 0x10
    590e:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    5910:	8e 81       	ldd	r24, Y+6	; 0x06
    5912:	9f 81       	ldd	r25, Y+7	; 0x07
    5914:	cc 01       	movw	r24, r24
    5916:	a0 e0       	ldi	r26, 0x00	; 0
    5918:	b0 e0       	ldi	r27, 0x00	; 0
    591a:	29 81       	ldd	r18, Y+1	; 0x01
    591c:	3a 81       	ldd	r19, Y+2	; 0x02
    591e:	4b 81       	ldd	r20, Y+3	; 0x03
    5920:	5c 81       	ldd	r21, Y+4	; 0x04
    5922:	82 0f       	add	r24, r18
    5924:	93 1f       	adc	r25, r19
    5926:	a4 1f       	adc	r26, r20
    5928:	b5 1f       	adc	r27, r21
    592a:	89 83       	std	Y+1, r24	; 0x01
    592c:	9a 83       	std	Y+2, r25	; 0x02
    592e:	ab 83       	std	Y+3, r26	; 0x03
    5930:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    5932:	8e 81       	ldd	r24, Y+6	; 0x06
    5934:	9f 81       	ldd	r25, Y+7	; 0x07
    5936:	cc 01       	movw	r24, r24
    5938:	a0 e0       	ldi	r26, 0x00	; 0
    593a:	b0 e0       	ldi	r27, 0x00	; 0
    593c:	28 85       	ldd	r18, Y+8	; 0x08
    593e:	39 85       	ldd	r19, Y+9	; 0x09
    5940:	4a 85       	ldd	r20, Y+10	; 0x0a
    5942:	5b 85       	ldd	r21, Y+11	; 0x0b
    5944:	82 0f       	add	r24, r18
    5946:	93 1f       	adc	r25, r19
    5948:	a4 1f       	adc	r26, r20
    594a:	b5 1f       	adc	r27, r21
    594c:	88 87       	std	Y+8, r24	; 0x08
    594e:	99 87       	std	Y+9, r25	; 0x09
    5950:	aa 87       	std	Y+10, r26	; 0x0a
    5952:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    5954:	8b cf       	rjmp	.-234    	; 0x586c <nm_read_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    5956:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    5958:	8d 81       	ldd	r24, Y+5	; 0x05
}
    595a:	61 96       	adiw	r28, 0x11	; 17
    595c:	cd bf       	out	0x3d, r28	; 61
    595e:	de bf       	out	0x3e, r29	; 62
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	1f 91       	pop	r17
    5966:	0f 91       	pop	r16
    5968:	ff 90       	pop	r15
    596a:	ef 90       	pop	r14
    596c:	08 95       	ret

0000596e <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    596e:	cf 93       	push	r28
    5970:	df 93       	push	r29
    5972:	cd b7       	in	r28, 0x3d	; 61
    5974:	de b7       	in	r29, 0x3e	; 62
    5976:	28 97       	sbiw	r28, 0x08	; 8
    5978:	cd bf       	out	0x3d, r28	; 61
    597a:	de bf       	out	0x3e, r29	; 62
    597c:	69 83       	std	Y+1, r22	; 0x01
    597e:	7a 83       	std	Y+2, r23	; 0x02
    5980:	8b 83       	std	Y+3, r24	; 0x03
    5982:	9c 83       	std	Y+4, r25	; 0x04
    5984:	4d 83       	std	Y+5, r20	; 0x05
    5986:	5e 83       	std	Y+6, r21	; 0x06
    5988:	2f 83       	std	Y+7, r18	; 0x07
    598a:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    598c:	2f 81       	ldd	r18, Y+7	; 0x07
    598e:	38 85       	ldd	r19, Y+8	; 0x08
    5990:	4d 81       	ldd	r20, Y+5	; 0x05
    5992:	5e 81       	ldd	r21, Y+6	; 0x06
    5994:	89 81       	ldd	r24, Y+1	; 0x01
    5996:	9a 81       	ldd	r25, Y+2	; 0x02
    5998:	ab 81       	ldd	r26, Y+3	; 0x03
    599a:	bc 81       	ldd	r27, Y+4	; 0x04
    599c:	bc 01       	movw	r22, r24
    599e:	cd 01       	movw	r24, r26
    59a0:	0e 94 6f 36 	call	0x6cde	; 0x6cde <nm_spi_write_block>
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    59a4:	28 96       	adiw	r28, 0x08	; 8
    59a6:	cd bf       	out	0x3d, r28	; 61
    59a8:	de bf       	out	0x3e, r29	; 62
    59aa:	df 91       	pop	r29
    59ac:	cf 91       	pop	r28
    59ae:	08 95       	ret

000059b0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    59b0:	ef 92       	push	r14
    59b2:	ff 92       	push	r15
    59b4:	0f 93       	push	r16
    59b6:	1f 93       	push	r17
    59b8:	cf 93       	push	r28
    59ba:	df 93       	push	r29
    59bc:	cd b7       	in	r28, 0x3d	; 61
    59be:	de b7       	in	r29, 0x3e	; 62
    59c0:	61 97       	sbiw	r28, 0x11	; 17
    59c2:	cd bf       	out	0x3d, r28	; 61
    59c4:	de bf       	out	0x3e, r29	; 62
    59c6:	68 87       	std	Y+8, r22	; 0x08
    59c8:	79 87       	std	Y+9, r23	; 0x09
    59ca:	8a 87       	std	Y+10, r24	; 0x0a
    59cc:	9b 87       	std	Y+11, r25	; 0x0b
    59ce:	4c 87       	std	Y+12, r20	; 0x0c
    59d0:	5d 87       	std	Y+13, r21	; 0x0d
    59d2:	0e 87       	std	Y+14, r16	; 0x0e
    59d4:	1f 87       	std	Y+15, r17	; 0x0f
    59d6:	28 8b       	std	Y+16, r18	; 0x10
    59d8:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    59da:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <egstrNmBusCapabilities>
    59de:	90 91 5f 28 	lds	r25, 0x285F	; 0x80285f <egstrNmBusCapabilities+0x1>
    59e2:	08 97       	sbiw	r24, 0x08	; 8
    59e4:	8e 83       	std	Y+6, r24	; 0x06
    59e6:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    59e8:	19 82       	std	Y+1, r1	; 0x01
    59ea:	1a 82       	std	Y+2, r1	; 0x02
    59ec:	1b 82       	std	Y+3, r1	; 0x03
    59ee:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    59f0:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    59f2:	8e 81       	ldd	r24, Y+6	; 0x06
    59f4:	9f 81       	ldd	r25, Y+7	; 0x07
    59f6:	9c 01       	movw	r18, r24
    59f8:	40 e0       	ldi	r20, 0x00	; 0
    59fa:	50 e0       	ldi	r21, 0x00	; 0
    59fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    59fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a00:	a8 89       	ldd	r26, Y+16	; 0x10
    5a02:	b9 89       	ldd	r27, Y+17	; 0x11
    5a04:	28 17       	cp	r18, r24
    5a06:	39 07       	cpc	r19, r25
    5a08:	4a 07       	cpc	r20, r26
    5a0a:	5b 07       	cpc	r21, r27
    5a0c:	b8 f0       	brcs	.+46     	; 0x5a3c <nm_write_block+0x8c>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    5a0e:	6e 85       	ldd	r22, Y+14	; 0x0e
    5a10:	7f 85       	ldd	r23, Y+15	; 0x0f
    5a12:	89 81       	ldd	r24, Y+1	; 0x01
    5a14:	9a 81       	ldd	r25, Y+2	; 0x02
    5a16:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a18:	3d 85       	ldd	r19, Y+13	; 0x0d
    5a1a:	a9 01       	movw	r20, r18
    5a1c:	48 0f       	add	r20, r24
    5a1e:	59 1f       	adc	r21, r25
    5a20:	88 85       	ldd	r24, Y+8	; 0x08
    5a22:	99 85       	ldd	r25, Y+9	; 0x09
    5a24:	aa 85       	ldd	r26, Y+10	; 0x0a
    5a26:	bb 85       	ldd	r27, Y+11	; 0x0b
    5a28:	9b 01       	movw	r18, r22
    5a2a:	bc 01       	movw	r22, r24
    5a2c:	cd 01       	movw	r24, r26
    5a2e:	0e 94 b7 2c 	call	0x596e	; 0x596e <p_nm_write_block>
    5a32:	98 2f       	mov	r25, r24
    5a34:	8d 81       	ldd	r24, Y+5	; 0x05
    5a36:	89 0f       	add	r24, r25
    5a38:	8d 83       	std	Y+5, r24	; 0x05
			break;
    5a3a:	51 c0       	rjmp	.+162    	; 0x5ade <nm_write_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    5a3c:	89 81       	ldd	r24, Y+1	; 0x01
    5a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a40:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a42:	3d 85       	ldd	r19, Y+13	; 0x0d
    5a44:	a9 01       	movw	r20, r18
    5a46:	48 0f       	add	r20, r24
    5a48:	59 1f       	adc	r21, r25
    5a4a:	2e 81       	ldd	r18, Y+6	; 0x06
    5a4c:	3f 81       	ldd	r19, Y+7	; 0x07
    5a4e:	88 85       	ldd	r24, Y+8	; 0x08
    5a50:	99 85       	ldd	r25, Y+9	; 0x09
    5a52:	aa 85       	ldd	r26, Y+10	; 0x0a
    5a54:	bb 85       	ldd	r27, Y+11	; 0x0b
    5a56:	bc 01       	movw	r22, r24
    5a58:	cd 01       	movw	r24, r26
    5a5a:	0e 94 b7 2c 	call	0x596e	; 0x596e <p_nm_write_block>
    5a5e:	98 2f       	mov	r25, r24
    5a60:	8d 81       	ldd	r24, Y+5	; 0x05
    5a62:	89 0f       	add	r24, r25
    5a64:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    5a66:	8d 81       	ldd	r24, Y+5	; 0x05
    5a68:	88 23       	and	r24, r24
    5a6a:	c1 f5       	brne	.+112    	; 0x5adc <nm_write_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    5a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    5a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    5a70:	cc 01       	movw	r24, r24
    5a72:	a0 e0       	ldi	r26, 0x00	; 0
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	2e 85       	ldd	r18, Y+14	; 0x0e
    5a78:	3f 85       	ldd	r19, Y+15	; 0x0f
    5a7a:	48 89       	ldd	r20, Y+16	; 0x10
    5a7c:	59 89       	ldd	r21, Y+17	; 0x11
    5a7e:	79 01       	movw	r14, r18
    5a80:	8a 01       	movw	r16, r20
    5a82:	e8 1a       	sub	r14, r24
    5a84:	f9 0a       	sbc	r15, r25
    5a86:	0a 0b       	sbc	r16, r26
    5a88:	1b 0b       	sbc	r17, r27
    5a8a:	d8 01       	movw	r26, r16
    5a8c:	c7 01       	movw	r24, r14
    5a8e:	8e 87       	std	Y+14, r24	; 0x0e
    5a90:	9f 87       	std	Y+15, r25	; 0x0f
    5a92:	a8 8b       	std	Y+16, r26	; 0x10
    5a94:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    5a96:	8e 81       	ldd	r24, Y+6	; 0x06
    5a98:	9f 81       	ldd	r25, Y+7	; 0x07
    5a9a:	cc 01       	movw	r24, r24
    5a9c:	a0 e0       	ldi	r26, 0x00	; 0
    5a9e:	b0 e0       	ldi	r27, 0x00	; 0
    5aa0:	29 81       	ldd	r18, Y+1	; 0x01
    5aa2:	3a 81       	ldd	r19, Y+2	; 0x02
    5aa4:	4b 81       	ldd	r20, Y+3	; 0x03
    5aa6:	5c 81       	ldd	r21, Y+4	; 0x04
    5aa8:	82 0f       	add	r24, r18
    5aaa:	93 1f       	adc	r25, r19
    5aac:	a4 1f       	adc	r26, r20
    5aae:	b5 1f       	adc	r27, r21
    5ab0:	89 83       	std	Y+1, r24	; 0x01
    5ab2:	9a 83       	std	Y+2, r25	; 0x02
    5ab4:	ab 83       	std	Y+3, r26	; 0x03
    5ab6:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    5ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    5aba:	9f 81       	ldd	r25, Y+7	; 0x07
    5abc:	cc 01       	movw	r24, r24
    5abe:	a0 e0       	ldi	r26, 0x00	; 0
    5ac0:	b0 e0       	ldi	r27, 0x00	; 0
    5ac2:	28 85       	ldd	r18, Y+8	; 0x08
    5ac4:	39 85       	ldd	r19, Y+9	; 0x09
    5ac6:	4a 85       	ldd	r20, Y+10	; 0x0a
    5ac8:	5b 85       	ldd	r21, Y+11	; 0x0b
    5aca:	82 0f       	add	r24, r18
    5acc:	93 1f       	adc	r25, r19
    5ace:	a4 1f       	adc	r26, r20
    5ad0:	b5 1f       	adc	r27, r21
    5ad2:	88 87       	std	Y+8, r24	; 0x08
    5ad4:	99 87       	std	Y+9, r25	; 0x09
    5ad6:	aa 87       	std	Y+10, r26	; 0x0a
    5ad8:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    5ada:	8b cf       	rjmp	.-234    	; 0x59f2 <nm_write_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    5adc:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    5ade:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5ae0:	61 96       	adiw	r28, 0x11	; 17
    5ae2:	cd bf       	out	0x3d, r28	; 61
    5ae4:	de bf       	out	0x3e, r29	; 62
    5ae6:	df 91       	pop	r29
    5ae8:	cf 91       	pop	r28
    5aea:	1f 91       	pop	r17
    5aec:	0f 91       	pop	r16
    5aee:	ff 90       	pop	r15
    5af0:	ef 90       	pop	r14
    5af2:	08 95       	ret

00005af4 <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
    5af4:	0f 93       	push	r16
    5af6:	1f 93       	push	r17
    5af8:	cf 93       	push	r28
    5afa:	df 93       	push	r29
    5afc:	cd b7       	in	r28, 0x3d	; 61
    5afe:	de b7       	in	r29, 0x3e	; 62
    5b00:	65 97       	sbiw	r28, 0x15	; 21
    5b02:	cd bf       	out	0x3d, r28	; 61
    5b04:	de bf       	out	0x3e, r29	; 62
    5b06:	8c 8b       	std	Y+20, r24	; 0x14
    5b08:	9d 8b       	std	Y+21, r25	; 0x15
    5b0a:	18 86       	std	Y+8, r1	; 0x08
    5b0c:	19 86       	std	Y+9, r1	; 0x09
    5b0e:	1a 86       	std	Y+10, r1	; 0x0a
    5b10:	1b 86       	std	Y+11, r1	; 0x0b
    5b12:	19 82       	std	Y+1, r1	; 0x01
    5b14:	28 e0       	ldi	r18, 0x08	; 8
    5b16:	ce 01       	movw	r24, r28
    5b18:	0c 96       	adiw	r24, 0x0c	; 12
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	32 2f       	mov	r19, r18
    5b1e:	11 92       	st	Z+, r1
    5b20:	3a 95       	dec	r19
    5b22:	e9 f7       	brne	.-6      	; 0x5b1e <nm_get_firmware_full_info+0x2a>
    5b24:	8c 89       	ldd	r24, Y+20	; 0x14
    5b26:	9d 89       	ldd	r25, Y+21	; 0x15
    5b28:	89 2b       	or	r24, r25
    5b2a:	09 f4       	brne	.+2      	; 0x5b2e <nm_get_firmware_full_info+0x3a>
    5b2c:	d6 c0       	rjmp	.+428    	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5b2e:	8c 89       	ldd	r24, Y+20	; 0x14
    5b30:	9d 89       	ldd	r25, Y+21	; 0x15
    5b32:	26 e2       	ldi	r18, 0x26	; 38
    5b34:	30 e0       	ldi	r19, 0x00	; 0
    5b36:	40 e0       	ldi	r20, 0x00	; 0
    5b38:	50 e0       	ldi	r21, 0x00	; 0
    5b3a:	60 e0       	ldi	r22, 0x00	; 0
    5b3c:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <m2m_memset>
    5b40:	ce 01       	movw	r24, r28
    5b42:	08 96       	adiw	r24, 0x08	; 8
    5b44:	ac 01       	movw	r20, r24
    5b46:	68 e0       	ldi	r22, 0x08	; 8
    5b48:	70 e0       	ldi	r23, 0x00	; 0
    5b4a:	8c e0       	ldi	r24, 0x0C	; 12
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    5b52:	89 83       	std	Y+1, r24	; 0x01
    5b54:	89 81       	ldd	r24, Y+1	; 0x01
    5b56:	88 23       	and	r24, r24
    5b58:	09 f0       	breq	.+2      	; 0x5b5c <nm_get_firmware_full_info+0x68>
    5b5a:	bf c0       	rjmp	.+382    	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5b5c:	88 85       	ldd	r24, Y+8	; 0x08
    5b5e:	99 85       	ldd	r25, Y+9	; 0x09
    5b60:	aa 85       	ldd	r26, Y+10	; 0x0a
    5b62:	bb 85       	ldd	r27, Y+11	; 0x0b
    5b64:	89 2b       	or	r24, r25
    5b66:	8a 2b       	or	r24, r26
    5b68:	8b 2b       	or	r24, r27
    5b6a:	09 f4       	brne	.+2      	; 0x5b6e <nm_get_firmware_full_info+0x7a>
    5b6c:	b4 c0       	rjmp	.+360    	; 0x5cd6 <nm_get_firmware_full_info+0x1e2>
    5b6e:	88 85       	ldd	r24, Y+8	; 0x08
    5b70:	99 85       	ldd	r25, Y+9	; 0x09
    5b72:	aa 85       	ldd	r26, Y+10	; 0x0a
    5b74:	bb 85       	ldd	r27, Y+11	; 0x0b
    5b76:	a3 60       	ori	r26, 0x03	; 3
    5b78:	ae 01       	movw	r20, r28
    5b7a:	44 5f       	subi	r20, 0xF4	; 244
    5b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7e:	08 e0       	ldi	r16, 0x08	; 8
    5b80:	10 e0       	ldi	r17, 0x00	; 0
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	bc 01       	movw	r22, r24
    5b88:	cd 01       	movw	r24, r26
    5b8a:	0e 94 15 2c 	call	0x582a	; 0x582a <nm_read_block>
    5b8e:	89 83       	std	Y+1, r24	; 0x01
    5b90:	89 81       	ldd	r24, Y+1	; 0x01
    5b92:	88 23       	and	r24, r24
    5b94:	09 f0       	breq	.+2      	; 0x5b98 <nm_get_firmware_full_info+0xa4>
    5b96:	a1 c0       	rjmp	.+322    	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5b98:	88 89       	ldd	r24, Y+16	; 0x10
    5b9a:	99 89       	ldd	r25, Y+17	; 0x11
    5b9c:	aa 89       	ldd	r26, Y+18	; 0x12
    5b9e:	bb 89       	ldd	r27, Y+19	; 0x13
    5ba0:	88 87       	std	Y+8, r24	; 0x08
    5ba2:	99 87       	std	Y+9, r25	; 0x09
    5ba4:	aa 87       	std	Y+10, r26	; 0x0a
    5ba6:	bb 87       	std	Y+11, r27	; 0x0b
    5ba8:	88 85       	ldd	r24, Y+8	; 0x08
    5baa:	99 85       	ldd	r25, Y+9	; 0x09
    5bac:	aa 85       	ldd	r26, Y+10	; 0x0a
    5bae:	bb 85       	ldd	r27, Y+11	; 0x0b
    5bb0:	aa 27       	eor	r26, r26
    5bb2:	bb 27       	eor	r27, r27
    5bb4:	88 87       	std	Y+8, r24	; 0x08
    5bb6:	99 87       	std	Y+9, r25	; 0x09
    5bb8:	aa 87       	std	Y+10, r26	; 0x0a
    5bba:	bb 87       	std	Y+11, r27	; 0x0b
    5bbc:	88 85       	ldd	r24, Y+8	; 0x08
    5bbe:	99 85       	ldd	r25, Y+9	; 0x09
    5bc0:	aa 85       	ldd	r26, Y+10	; 0x0a
    5bc2:	bb 85       	ldd	r27, Y+11	; 0x0b
    5bc4:	89 2b       	or	r24, r25
    5bc6:	8a 2b       	or	r24, r26
    5bc8:	8b 2b       	or	r24, r27
    5bca:	09 f4       	brne	.+2      	; 0x5bce <nm_get_firmware_full_info+0xda>
    5bcc:	81 c0       	rjmp	.+258    	; 0x5cd0 <nm_get_firmware_full_info+0x1dc>
    5bce:	88 85       	ldd	r24, Y+8	; 0x08
    5bd0:	99 85       	ldd	r25, Y+9	; 0x09
    5bd2:	aa 85       	ldd	r26, Y+10	; 0x0a
    5bd4:	bb 85       	ldd	r27, Y+11	; 0x0b
    5bd6:	a3 60       	ori	r26, 0x03	; 3
    5bd8:	4c 89       	ldd	r20, Y+20	; 0x14
    5bda:	5d 89       	ldd	r21, Y+21	; 0x15
    5bdc:	06 e2       	ldi	r16, 0x26	; 38
    5bde:	10 e0       	ldi	r17, 0x00	; 0
    5be0:	20 e0       	ldi	r18, 0x00	; 0
    5be2:	30 e0       	ldi	r19, 0x00	; 0
    5be4:	bc 01       	movw	r22, r24
    5be6:	cd 01       	movw	r24, r26
    5be8:	0e 94 15 2c 	call	0x582a	; 0x582a <nm_read_block>
    5bec:	89 83       	std	Y+1, r24	; 0x01
    5bee:	89 81       	ldd	r24, Y+1	; 0x01
    5bf0:	88 23       	and	r24, r24
    5bf2:	09 f0       	breq	.+2      	; 0x5bf6 <nm_get_firmware_full_info+0x102>
    5bf4:	72 c0       	rjmp	.+228    	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5bf6:	8c 89       	ldd	r24, Y+20	; 0x14
    5bf8:	9d 89       	ldd	r25, Y+21	; 0x15
    5bfa:	fc 01       	movw	r30, r24
    5bfc:	84 81       	ldd	r24, Z+4	; 0x04
    5bfe:	88 2f       	mov	r24, r24
    5c00:	90 e0       	ldi	r25, 0x00	; 0
    5c02:	38 2f       	mov	r19, r24
    5c04:	22 27       	eor	r18, r18
    5c06:	8c 89       	ldd	r24, Y+20	; 0x14
    5c08:	9d 89       	ldd	r25, Y+21	; 0x15
    5c0a:	fc 01       	movw	r30, r24
    5c0c:	85 81       	ldd	r24, Z+5	; 0x05
    5c0e:	88 2f       	mov	r24, r24
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	82 95       	swap	r24
    5c14:	92 95       	swap	r25
    5c16:	90 7f       	andi	r25, 0xF0	; 240
    5c18:	98 27       	eor	r25, r24
    5c1a:	80 7f       	andi	r24, 0xF0	; 240
    5c1c:	98 27       	eor	r25, r24
    5c1e:	99 27       	eor	r25, r25
    5c20:	28 2b       	or	r18, r24
    5c22:	39 2b       	or	r19, r25
    5c24:	8c 89       	ldd	r24, Y+20	; 0x14
    5c26:	9d 89       	ldd	r25, Y+21	; 0x15
    5c28:	fc 01       	movw	r30, r24
    5c2a:	86 81       	ldd	r24, Z+6	; 0x06
    5c2c:	88 2f       	mov	r24, r24
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	8f 70       	andi	r24, 0x0F	; 15
    5c32:	99 27       	eor	r25, r25
    5c34:	82 2b       	or	r24, r18
    5c36:	93 2b       	or	r25, r19
    5c38:	8a 83       	std	Y+2, r24	; 0x02
    5c3a:	9b 83       	std	Y+3, r25	; 0x03
    5c3c:	82 e5       	ldi	r24, 0x52	; 82
    5c3e:	93 e1       	ldi	r25, 0x13	; 19
    5c40:	8c 83       	std	Y+4, r24	; 0x04
    5c42:	9d 83       	std	Y+5, r25	; 0x05
    5c44:	8c 89       	ldd	r24, Y+20	; 0x14
    5c46:	9d 89       	ldd	r25, Y+21	; 0x15
    5c48:	fc 01       	movw	r30, r24
    5c4a:	87 81       	ldd	r24, Z+7	; 0x07
    5c4c:	88 2f       	mov	r24, r24
    5c4e:	90 e0       	ldi	r25, 0x00	; 0
    5c50:	38 2f       	mov	r19, r24
    5c52:	22 27       	eor	r18, r18
    5c54:	8c 89       	ldd	r24, Y+20	; 0x14
    5c56:	9d 89       	ldd	r25, Y+21	; 0x15
    5c58:	fc 01       	movw	r30, r24
    5c5a:	80 85       	ldd	r24, Z+8	; 0x08
    5c5c:	88 2f       	mov	r24, r24
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	82 95       	swap	r24
    5c62:	92 95       	swap	r25
    5c64:	90 7f       	andi	r25, 0xF0	; 240
    5c66:	98 27       	eor	r25, r24
    5c68:	80 7f       	andi	r24, 0xF0	; 240
    5c6a:	98 27       	eor	r25, r24
    5c6c:	99 27       	eor	r25, r25
    5c6e:	28 2b       	or	r18, r24
    5c70:	39 2b       	or	r19, r25
    5c72:	8c 89       	ldd	r24, Y+20	; 0x14
    5c74:	9d 89       	ldd	r25, Y+21	; 0x15
    5c76:	fc 01       	movw	r30, r24
    5c78:	81 85       	ldd	r24, Z+9	; 0x09
    5c7a:	88 2f       	mov	r24, r24
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	8f 70       	andi	r24, 0x0F	; 15
    5c80:	99 27       	eor	r25, r25
    5c82:	82 2b       	or	r24, r18
    5c84:	93 2b       	or	r25, r19
    5c86:	8e 83       	std	Y+6, r24	; 0x06
    5c88:	9f 83       	std	Y+7, r25	; 0x07
    5c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c8e:	89 2b       	or	r24, r25
    5c90:	41 f0       	breq	.+16     	; 0x5ca2 <nm_get_firmware_full_info+0x1ae>
    5c92:	8e 81       	ldd	r24, Y+6	; 0x06
    5c94:	9f 81       	ldd	r25, Y+7	; 0x07
    5c96:	89 2b       	or	r24, r25
    5c98:	21 f0       	breq	.+8      	; 0x5ca2 <nm_get_firmware_full_info+0x1ae>
    5c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    5c9c:	9f 81       	ldd	r25, Y+7	; 0x07
    5c9e:	89 2b       	or	r24, r25
    5ca0:	19 f4       	brne	.+6      	; 0x5ca8 <nm_get_firmware_full_info+0x1b4>
    5ca2:	84 ef       	ldi	r24, 0xF4	; 244
    5ca4:	89 83       	std	Y+1, r24	; 0x01
    5ca6:	19 c0       	rjmp	.+50     	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    5caa:	3d 81       	ldd	r19, Y+5	; 0x05
    5cac:	8e 81       	ldd	r24, Y+6	; 0x06
    5cae:	9f 81       	ldd	r25, Y+7	; 0x07
    5cb0:	28 17       	cp	r18, r24
    5cb2:	39 07       	cpc	r19, r25
    5cb4:	18 f4       	brcc	.+6      	; 0x5cbc <nm_get_firmware_full_info+0x1c8>
    5cb6:	83 ef       	ldi	r24, 0xF3	; 243
    5cb8:	89 83       	std	Y+1, r24	; 0x01
    5cba:	0f c0       	rjmp	.+30     	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    5cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    5cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    5cc4:	82 17       	cp	r24, r18
    5cc6:	93 07       	cpc	r25, r19
    5cc8:	40 f4       	brcc	.+16     	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5cca:	83 ef       	ldi	r24, 0xF3	; 243
    5ccc:	89 83       	std	Y+1, r24	; 0x01
    5cce:	05 c0       	rjmp	.+10     	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5cd0:	84 ef       	ldi	r24, 0xF4	; 244
    5cd2:	89 83       	std	Y+1, r24	; 0x01
    5cd4:	02 c0       	rjmp	.+4      	; 0x5cda <nm_get_firmware_full_info+0x1e6>
    5cd6:	84 ef       	ldi	r24, 0xF4	; 244
    5cd8:	89 83       	std	Y+1, r24	; 0x01
    5cda:	89 81       	ldd	r24, Y+1	; 0x01
    5cdc:	65 96       	adiw	r28, 0x15	; 21
    5cde:	cd bf       	out	0x3d, r28	; 61
    5ce0:	de bf       	out	0x3e, r29	; 62
    5ce2:	df 91       	pop	r29
    5ce4:	cf 91       	pop	r28
    5ce6:	1f 91       	pop	r17
    5ce8:	0f 91       	pop	r16
    5cea:	08 95       	ret

00005cec <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    5cec:	cf 93       	push	r28
    5cee:	df 93       	push	r29
    5cf0:	00 d0       	rcall	.+0      	; 0x5cf2 <nm_drv_init+0x6>
    5cf2:	00 d0       	rcall	.+0      	; 0x5cf4 <nm_drv_init+0x8>
    5cf4:	cd b7       	in	r28, 0x3d	; 61
    5cf6:	de b7       	in	r29, 0x3e	; 62
    5cf8:	8b 83       	std	Y+3, r24	; 0x03
    5cfa:	9c 83       	std	Y+4, r25	; 0x04
	sint8 ret = M2M_SUCCESS;
    5cfc:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8Mode;
	
	if(NULL != arg) {
    5cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    5d00:	9c 81       	ldd	r25, Y+4	; 0x04
    5d02:	89 2b       	or	r24, r25
    5d04:	71 f0       	breq	.+28     	; 0x5d22 <nm_drv_init+0x36>
		u8Mode = *((uint8 *)arg);
    5d06:	8b 81       	ldd	r24, Y+3	; 0x03
    5d08:	9c 81       	ldd	r25, Y+4	; 0x04
    5d0a:	fc 01       	movw	r30, r24
    5d0c:	80 81       	ld	r24, Z
    5d0e:	8a 83       	std	Y+2, r24	; 0x02
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    5d10:	8a 81       	ldd	r24, Y+2	; 0x02
    5d12:	88 23       	and	r24, r24
    5d14:	19 f0       	breq	.+6      	; 0x5d1c <nm_drv_init+0x30>
    5d16:	8a 81       	ldd	r24, Y+2	; 0x02
    5d18:	85 30       	cpi	r24, 0x05	; 5
    5d1a:	28 f0       	brcs	.+10     	; 0x5d26 <nm_drv_init+0x3a>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    5d1c:	81 e0       	ldi	r24, 0x01	; 1
    5d1e:	8a 83       	std	Y+2, r24	; 0x02
    5d20:	02 c0       	rjmp	.+4      	; 0x5d26 <nm_drv_init+0x3a>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	ret = nm_bus_iface_init(NULL);
    5d26:	80 e0       	ldi	r24, 0x00	; 0
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <nm_bus_iface_init>
    5d2e:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5d30:	89 81       	ldd	r24, Y+1	; 0x01
    5d32:	88 23       	and	r24, r24
    5d34:	31 f5       	brne	.+76     	; 0x5d82 <nm_drv_init+0x96>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    5d36:	0e 94 57 35 	call	0x6aae	; 0x6aae <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    5d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3c:	0e 94 99 29 	call	0x5332	; 0x5332 <wait_for_bootrom>
    5d40:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5d42:	89 81       	ldd	r24, Y+1	; 0x01
    5d44:	88 23       	and	r24, r24
    5d46:	a9 f4       	brne	.+42     	; 0x5d72 <nm_drv_init+0x86>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    5d48:	8a 81       	ldd	r24, Y+2	; 0x02
    5d4a:	0e 94 9e 2a 	call	0x553c	; 0x553c <wait_for_firmware_start>
    5d4e:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5d50:	89 81       	ldd	r24, Y+1	; 0x01
    5d52:	88 23       	and	r24, r24
    5d54:	81 f4       	brne	.+32     	; 0x5d76 <nm_drv_init+0x8a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    5d56:	8a 81       	ldd	r24, Y+2	; 0x02
    5d58:	82 30       	cpi	r24, 0x02	; 2
    5d5a:	a1 f0       	breq	.+40     	; 0x5d84 <nm_drv_init+0x98>
    5d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d5e:	83 30       	cpi	r24, 0x03	; 3
    5d60:	89 f0       	breq	.+34     	; 0x5d84 <nm_drv_init+0x98>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    5d62:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <enable_interrupts>
    5d66:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5d68:	89 81       	ldd	r24, Y+1	; 0x01
    5d6a:	88 23       	and	r24, r24
    5d6c:	31 f4       	brne	.+12     	; 0x5d7a <nm_drv_init+0x8e>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
    5d6e:	89 81       	ldd	r24, Y+1	; 0x01
    5d70:	0a c0       	rjmp	.+20     	; 0x5d86 <nm_drv_init+0x9a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    5d72:	00 00       	nop
    5d74:	03 c0       	rjmp	.+6      	; 0x5d7c <nm_drv_init+0x90>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    5d76:	00 00       	nop
    5d78:	01 c0       	rjmp	.+2      	; 0x5d7c <nm_drv_init+0x90>
	}
	
	ret = enable_interrupts();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
    5d7a:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    5d7c:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <nm_bus_iface_deinit>
    5d80:	01 c0       	rjmp	.+2      	; 0x5d84 <nm_drv_init+0x98>
	}
	
	ret = nm_bus_iface_init(NULL);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi start]: fail init bus\n");
		goto ERR1;
    5d82:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
    5d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    5d86:	24 96       	adiw	r28, 0x04	; 4
    5d88:	cd bf       	out	0x3d, r28	; 61
    5d8a:	de bf       	out	0x3e, r29	; 62
    5d8c:	df 91       	pop	r29
    5d8e:	cf 91       	pop	r28
    5d90:	08 95       	ret

00005d92 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    5d92:	cf 93       	push	r28
    5d94:	df 93       	push	r29
    5d96:	00 d0       	rcall	.+0      	; 0x5d98 <nm_drv_deinit+0x6>
    5d98:	1f 92       	push	r1
    5d9a:	cd b7       	in	r28, 0x3d	; 61
    5d9c:	de b7       	in	r29, 0x3e	; 62
    5d9e:	8a 83       	std	Y+2, r24	; 0x02
    5da0:	9b 83       	std	Y+3, r25	; 0x03
	sint8 ret;

	ret = chip_deinit();
    5da2:	0e 94 33 2b 	call	0x5666	; 0x5666 <chip_deinit>
    5da6:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5da8:	89 81       	ldd	r24, Y+1	; 0x01
    5daa:	88 23       	and	r24, r24
    5dac:	81 f4       	brne	.+32     	; 0x5dce <nm_drv_deinit+0x3c>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    5dae:	80 e0       	ldi	r24, 0x00	; 0
    5db0:	0e 94 cb 40 	call	0x8196	; 0x8196 <spi_flash_enable>
    5db4:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5db6:	89 81       	ldd	r24, Y+1	; 0x01
    5db8:	88 23       	and	r24, r24
    5dba:	59 f4       	brne	.+22     	; 0x5dd2 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    5dbc:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <nm_bus_iface_deinit>
    5dc0:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5dc2:	89 81       	ldd	r24, Y+1	; 0x01
    5dc4:	88 23       	and	r24, r24
    5dc6:	39 f4       	brne	.+14     	; 0x5dd6 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    5dc8:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <nm_spi_deinit>
    5dcc:	05 c0       	rjmp	.+10     	; 0x5dd8 <nm_drv_deinit+0x46>
	sint8 ret;

	ret = chip_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
    5dce:	00 00       	nop
    5dd0:	03 c0       	rjmp	.+6      	; 0x5dd8 <nm_drv_deinit+0x46>
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
    5dd2:	00 00       	nop
    5dd4:	01 c0       	rjmp	.+2      	; 0x5dd8 <nm_drv_deinit+0x46>
	}

	ret = nm_bus_iface_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
    5dd6:	00 00       	nop
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
#endif

ERR1:
	return ret;
    5dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    5dda:	23 96       	adiw	r28, 0x03	; 3
    5ddc:	cd bf       	out	0x3d, r28	; 61
    5dde:	de bf       	out	0x3e, r29	; 62
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	08 95       	ret

00005de6 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    5de6:	cf 93       	push	r28
    5de8:	df 93       	push	r29
    5dea:	cd b7       	in	r28, 0x3d	; 61
    5dec:	de b7       	in	r29, 0x3e	; 62
    5dee:	2a 97       	sbiw	r28, 0x0a	; 10
    5df0:	cd bf       	out	0x3d, r28	; 61
    5df2:	de bf       	out	0x3e, r29	; 62
    5df4:	8f 83       	std	Y+7, r24	; 0x07
    5df6:	98 87       	std	Y+8, r25	; 0x08
    5df8:	69 87       	std	Y+9, r22	; 0x09
    5dfa:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    5dfc:	19 82       	std	Y+1, r1	; 0x01
    5dfe:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    5e00:	8f 81       	ldd	r24, Y+7	; 0x07
    5e02:	98 85       	ldd	r25, Y+8	; 0x08
    5e04:	8b 83       	std	Y+3, r24	; 0x03
    5e06:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz = sz;
    5e08:	89 85       	ldd	r24, Y+9	; 0x09
    5e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e0c:	8d 83       	std	Y+5, r24	; 0x05
    5e0e:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    5e10:	ce 01       	movw	r24, r28
    5e12:	01 96       	adiw	r24, 0x01	; 1
    5e14:	bc 01       	movw	r22, r24
    5e16:	83 e0       	ldi	r24, 0x03	; 3
    5e18:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <nm_bus_ioctl>
}
    5e1c:	2a 96       	adiw	r28, 0x0a	; 10
    5e1e:	cd bf       	out	0x3d, r28	; 61
    5e20:	de bf       	out	0x3e, r29	; 62
    5e22:	df 91       	pop	r29
    5e24:	cf 91       	pop	r28
    5e26:	08 95       	ret

00005e28 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    5e28:	cf 93       	push	r28
    5e2a:	df 93       	push	r29
    5e2c:	cd b7       	in	r28, 0x3d	; 61
    5e2e:	de b7       	in	r29, 0x3e	; 62
    5e30:	2a 97       	sbiw	r28, 0x0a	; 10
    5e32:	cd bf       	out	0x3d, r28	; 61
    5e34:	de bf       	out	0x3e, r29	; 62
    5e36:	8f 83       	std	Y+7, r24	; 0x07
    5e38:	98 87       	std	Y+8, r25	; 0x08
    5e3a:	69 87       	std	Y+9, r22	; 0x09
    5e3c:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    5e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    5e40:	98 85       	ldd	r25, Y+8	; 0x08
    5e42:	89 83       	std	Y+1, r24	; 0x01
    5e44:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    5e46:	1b 82       	std	Y+3, r1	; 0x03
    5e48:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz = sz;
    5e4a:	89 85       	ldd	r24, Y+9	; 0x09
    5e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e4e:	8d 83       	std	Y+5, r24	; 0x05
    5e50:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    5e52:	ce 01       	movw	r24, r28
    5e54:	01 96       	adiw	r24, 0x01	; 1
    5e56:	bc 01       	movw	r22, r24
    5e58:	83 e0       	ldi	r24, 0x03	; 3
    5e5a:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <nm_bus_ioctl>
}
    5e5e:	2a 96       	adiw	r28, 0x0a	; 10
    5e60:	cd bf       	out	0x3d, r28	; 61
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	08 95       	ret

00005e6a <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    5e6a:	cf 93       	push	r28
    5e6c:	df 93       	push	r29
    5e6e:	cd b7       	in	r28, 0x3d	; 61
    5e70:	de b7       	in	r29, 0x3e	; 62
    5e72:	25 97       	sbiw	r28, 0x05	; 5
    5e74:	cd bf       	out	0x3d, r28	; 61
    5e76:	de bf       	out	0x3e, r29	; 62
    5e78:	8c 83       	std	Y+4, r24	; 0x04
    5e7a:	6d 83       	std	Y+5, r22	; 0x05
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    5e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    5e7e:	88 2f       	mov	r24, r24
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	9c 01       	movw	r18, r24
    5e84:	22 0f       	add	r18, r18
    5e86:	33 1f       	adc	r19, r19
    5e88:	8d 81       	ldd	r24, Y+5	; 0x05
    5e8a:	88 2f       	mov	r24, r24
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	82 27       	eor	r24, r18
    5e90:	93 27       	eor	r25, r19
    5e92:	84 52       	subi	r24, 0x24	; 36
    5e94:	9f 4f       	sbci	r25, 0xFF	; 255
    5e96:	89 83       	std	Y+1, r24	; 0x01
    5e98:	9a 83       	std	Y+2, r25	; 0x02
    5e9a:	89 81       	ldd	r24, Y+1	; 0x01
    5e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e9e:	fc 01       	movw	r30, r24
    5ea0:	84 91       	lpm	r24, Z
    5ea2:	8b 83       	std	Y+3, r24	; 0x03
    5ea4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5ea6:	25 96       	adiw	r28, 0x05	; 5
    5ea8:	cd bf       	out	0x3d, r28	; 61
    5eaa:	de bf       	out	0x3e, r29	; 62
    5eac:	df 91       	pop	r29
    5eae:	cf 91       	pop	r28
    5eb0:	08 95       	ret

00005eb2 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
    5eb6:	cd b7       	in	r28, 0x3d	; 61
    5eb8:	de b7       	in	r29, 0x3e	; 62
    5eba:	27 97       	sbiw	r28, 0x07	; 7
    5ebc:	cd bf       	out	0x3d, r28	; 61
    5ebe:	de bf       	out	0x3e, r29	; 62
    5ec0:	89 83       	std	Y+1, r24	; 0x01
    5ec2:	6a 83       	std	Y+2, r22	; 0x02
    5ec4:	7b 83       	std	Y+3, r23	; 0x03
    5ec6:	2c 83       	std	Y+4, r18	; 0x04
    5ec8:	3d 83       	std	Y+5, r19	; 0x05
    5eca:	4e 83       	std	Y+6, r20	; 0x06
    5ecc:	5f 83       	std	Y+7, r21	; 0x07
	while (len--)
    5ece:	0e c0       	rjmp	.+28     	; 0x5eec <crc7+0x3a>
		crc = crc7_byte(crc, *buffer++);
    5ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ed4:	9c 01       	movw	r18, r24
    5ed6:	2f 5f       	subi	r18, 0xFF	; 255
    5ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eda:	2a 83       	std	Y+2, r18	; 0x02
    5edc:	3b 83       	std	Y+3, r19	; 0x03
    5ede:	fc 01       	movw	r30, r24
    5ee0:	80 81       	ld	r24, Z
    5ee2:	68 2f       	mov	r22, r24
    5ee4:	89 81       	ldd	r24, Y+1	; 0x01
    5ee6:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <crc7_byte>
    5eea:	89 83       	std	Y+1, r24	; 0x01
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    5eec:	8c 81       	ldd	r24, Y+4	; 0x04
    5eee:	9d 81       	ldd	r25, Y+5	; 0x05
    5ef0:	ae 81       	ldd	r26, Y+6	; 0x06
    5ef2:	bf 81       	ldd	r27, Y+7	; 0x07
    5ef4:	9c 01       	movw	r18, r24
    5ef6:	ad 01       	movw	r20, r26
    5ef8:	21 50       	subi	r18, 0x01	; 1
    5efa:	31 09       	sbc	r19, r1
    5efc:	41 09       	sbc	r20, r1
    5efe:	51 09       	sbc	r21, r1
    5f00:	2c 83       	std	Y+4, r18	; 0x04
    5f02:	3d 83       	std	Y+5, r19	; 0x05
    5f04:	4e 83       	std	Y+6, r20	; 0x06
    5f06:	5f 83       	std	Y+7, r21	; 0x07
    5f08:	89 2b       	or	r24, r25
    5f0a:	8a 2b       	or	r24, r26
    5f0c:	8b 2b       	or	r24, r27
    5f0e:	01 f7       	brne	.-64     	; 0x5ed0 <crc7+0x1e>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    5f10:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f12:	27 96       	adiw	r28, 0x07	; 7
    5f14:	cd bf       	out	0x3d, r28	; 61
    5f16:	de bf       	out	0x3e, r29	; 62
    5f18:	df 91       	pop	r29
    5f1a:	cf 91       	pop	r28
    5f1c:	08 95       	ret

00005f1e <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    5f1e:	af 92       	push	r10
    5f20:	cf 92       	push	r12
    5f22:	df 92       	push	r13
    5f24:	ef 92       	push	r14
    5f26:	ff 92       	push	r15
    5f28:	0f 93       	push	r16
    5f2a:	1f 93       	push	r17
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	cd b7       	in	r28, 0x3d	; 61
    5f32:	de b7       	in	r29, 0x3e	; 62
    5f34:	69 97       	sbiw	r28, 0x19	; 25
    5f36:	cd bf       	out	0x3d, r28	; 61
    5f38:	de bf       	out	0x3e, r29	; 62
    5f3a:	8c 87       	std	Y+12, r24	; 0x0c
    5f3c:	4d 87       	std	Y+13, r20	; 0x0d
    5f3e:	5e 87       	std	Y+14, r21	; 0x0e
    5f40:	6f 87       	std	Y+15, r22	; 0x0f
    5f42:	78 8b       	std	Y+16, r23	; 0x10
    5f44:	09 8b       	std	Y+17, r16	; 0x11
    5f46:	1a 8b       	std	Y+18, r17	; 0x12
    5f48:	2b 8b       	std	Y+19, r18	; 0x13
    5f4a:	3c 8b       	std	Y+20, r19	; 0x14
    5f4c:	cd 8a       	std	Y+21, r12	; 0x15
    5f4e:	de 8a       	std	Y+22, r13	; 0x16
    5f50:	ef 8a       	std	Y+23, r14	; 0x17
    5f52:	f8 8e       	std	Y+24, r15	; 0x18
    5f54:	a9 8e       	std	Y+25, r10	; 0x19
	uint8 bc[9];
	uint8 len = 5;
    5f56:	85 e0       	ldi	r24, 0x05	; 5
    5f58:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    5f5a:	81 e0       	ldi	r24, 0x01	; 1
    5f5c:	8a 83       	std	Y+2, r24	; 0x02

	bc[0] = cmd;
    5f5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f60:	8b 83       	std	Y+3, r24	; 0x03
	switch (cmd) {
    5f62:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f64:	88 2f       	mov	r24, r24
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	09 2e       	mov	r0, r25
    5f6a:	00 0c       	add	r0, r0
    5f6c:	aa 0b       	sbc	r26, r26
    5f6e:	bb 0b       	sbc	r27, r27
    5f70:	41 ec       	ldi	r20, 0xC1	; 193
    5f72:	50 e0       	ldi	r21, 0x00	; 0
    5f74:	2e e0       	ldi	r18, 0x0E	; 14
    5f76:	30 e0       	ldi	r19, 0x00	; 0
    5f78:	84 1b       	sub	r24, r20
    5f7a:	95 0b       	sbc	r25, r21
    5f7c:	28 17       	cp	r18, r24
    5f7e:	39 07       	cpc	r19, r25
    5f80:	08 f4       	brcc	.+2      	; 0x5f84 <spi_cmd+0x66>
    5f82:	f1 c0       	rjmp	.+482    	; 0x6166 <spi_cmd+0x248>
    5f84:	81 5a       	subi	r24, 0xA1	; 161
    5f86:	9f 4f       	sbci	r25, 0xFF	; 255
    5f88:	fc 01       	movw	r30, r24
    5f8a:	0c 94 71 42 	jmp	0x84e2	; 0x84e2 <__tablejump2__>
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    5f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f92:	af 85       	ldd	r26, Y+15	; 0x0f
    5f94:	b8 89       	ldd	r27, Y+16	; 0x10
    5f96:	cd 01       	movw	r24, r26
    5f98:	aa 27       	eor	r26, r26
    5f9a:	bb 27       	eor	r27, r27
    5f9c:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    5f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fa2:	af 85       	ldd	r26, Y+15	; 0x0f
    5fa4:	b8 89       	ldd	r27, Y+16	; 0x10
    5fa6:	89 2f       	mov	r24, r25
    5fa8:	9a 2f       	mov	r25, r26
    5faa:	ab 2f       	mov	r26, r27
    5fac:	bb 27       	eor	r27, r27
    5fae:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    5fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fb2:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    5fb4:	85 e0       	ldi	r24, 0x05	; 5
    5fb6:	89 83       	std	Y+1, r24	; 0x01
		break;
    5fb8:	d8 c0       	rjmp	.+432    	; 0x616a <spi_cmd+0x24c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    5fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fbe:	af 85       	ldd	r26, Y+15	; 0x0f
    5fc0:	b8 89       	ldd	r27, Y+16	; 0x10
    5fc2:	89 2f       	mov	r24, r25
    5fc4:	9a 2f       	mov	r25, r26
    5fc6:	ab 2f       	mov	r26, r27
    5fc8:	bb 27       	eor	r27, r27
    5fca:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    5fcc:	89 8d       	ldd	r24, Y+25	; 0x19
    5fce:	88 23       	and	r24, r24
    5fd0:	19 f0       	breq	.+6      	; 0x5fd8 <spi_cmd+0xba>
    5fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    5fd4:	80 68       	ori	r24, 0x80	; 128
    5fd6:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)adr;
    5fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fda:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0x00;
    5fdc:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    5fde:	85 e0       	ldi	r24, 0x05	; 5
    5fe0:	89 83       	std	Y+1, r24	; 0x01
		break;
    5fe2:	c3 c0       	rjmp	.+390    	; 0x616a <spi_cmd+0x24c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    5fe4:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    5fe6:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    5fe8:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    5fea:	85 e0       	ldi	r24, 0x05	; 5
    5fec:	89 83       	std	Y+1, r24	; 0x01
		break;
    5fee:	bd c0       	rjmp	.+378    	; 0x616a <spi_cmd+0x24c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    5ff0:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    5ff2:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    5ff4:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    5ff6:	85 e0       	ldi	r24, 0x05	; 5
    5ff8:	89 83       	std	Y+1, r24	; 0x01
		break;
    5ffa:	b7 c0       	rjmp	.+366    	; 0x616a <spi_cmd+0x24c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    5ffc:	8f ef       	ldi	r24, 0xFF	; 255
    5ffe:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = 0xff;
    6000:	8f ef       	ldi	r24, 0xFF	; 255
    6002:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0xff;
    6004:	8f ef       	ldi	r24, 0xFF	; 255
    6006:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    6008:	85 e0       	ldi	r24, 0x05	; 5
    600a:	89 83       	std	Y+1, r24	; 0x01
		break;
    600c:	ae c0       	rjmp	.+348    	; 0x616a <spi_cmd+0x24c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    600e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6010:	9e 85       	ldd	r25, Y+14	; 0x0e
    6012:	af 85       	ldd	r26, Y+15	; 0x0f
    6014:	b8 89       	ldd	r27, Y+16	; 0x10
    6016:	cd 01       	movw	r24, r26
    6018:	aa 27       	eor	r26, r26
    601a:	bb 27       	eor	r27, r27
    601c:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    601e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6020:	9e 85       	ldd	r25, Y+14	; 0x0e
    6022:	af 85       	ldd	r26, Y+15	; 0x0f
    6024:	b8 89       	ldd	r27, Y+16	; 0x10
    6026:	89 2f       	mov	r24, r25
    6028:	9a 2f       	mov	r25, r26
    602a:	ab 2f       	mov	r26, r27
    602c:	bb 27       	eor	r27, r27
    602e:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    6030:	8d 85       	ldd	r24, Y+13	; 0x0d
    6032:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 8);
    6034:	8d 89       	ldd	r24, Y+21	; 0x15
    6036:	9e 89       	ldd	r25, Y+22	; 0x16
    6038:	af 89       	ldd	r26, Y+23	; 0x17
    603a:	b8 8d       	ldd	r27, Y+24	; 0x18
    603c:	89 2f       	mov	r24, r25
    603e:	9a 2f       	mov	r25, r26
    6040:	ab 2f       	mov	r26, r27
    6042:	bb 27       	eor	r27, r27
    6044:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz);
    6046:	8d 89       	ldd	r24, Y+21	; 0x15
    6048:	88 87       	std	Y+8, r24	; 0x08
		len = 7;
    604a:	87 e0       	ldi	r24, 0x07	; 7
    604c:	89 83       	std	Y+1, r24	; 0x01
		break;
    604e:	8d c0       	rjmp	.+282    	; 0x616a <spi_cmd+0x24c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    6050:	8d 85       	ldd	r24, Y+13	; 0x0d
    6052:	9e 85       	ldd	r25, Y+14	; 0x0e
    6054:	af 85       	ldd	r26, Y+15	; 0x0f
    6056:	b8 89       	ldd	r27, Y+16	; 0x10
    6058:	cd 01       	movw	r24, r26
    605a:	aa 27       	eor	r26, r26
    605c:	bb 27       	eor	r27, r27
    605e:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    6060:	8d 85       	ldd	r24, Y+13	; 0x0d
    6062:	9e 85       	ldd	r25, Y+14	; 0x0e
    6064:	af 85       	ldd	r26, Y+15	; 0x0f
    6066:	b8 89       	ldd	r27, Y+16	; 0x10
    6068:	89 2f       	mov	r24, r25
    606a:	9a 2f       	mov	r25, r26
    606c:	ab 2f       	mov	r26, r27
    606e:	bb 27       	eor	r27, r27
    6070:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    6072:	8d 85       	ldd	r24, Y+13	; 0x0d
    6074:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 16);
    6076:	8d 89       	ldd	r24, Y+21	; 0x15
    6078:	9e 89       	ldd	r25, Y+22	; 0x16
    607a:	af 89       	ldd	r26, Y+23	; 0x17
    607c:	b8 8d       	ldd	r27, Y+24	; 0x18
    607e:	cd 01       	movw	r24, r26
    6080:	aa 27       	eor	r26, r26
    6082:	bb 27       	eor	r27, r27
    6084:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz >> 8);
    6086:	8d 89       	ldd	r24, Y+21	; 0x15
    6088:	9e 89       	ldd	r25, Y+22	; 0x16
    608a:	af 89       	ldd	r26, Y+23	; 0x17
    608c:	b8 8d       	ldd	r27, Y+24	; 0x18
    608e:	89 2f       	mov	r24, r25
    6090:	9a 2f       	mov	r25, r26
    6092:	ab 2f       	mov	r26, r27
    6094:	bb 27       	eor	r27, r27
    6096:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(sz);
    6098:	8d 89       	ldd	r24, Y+21	; 0x15
    609a:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    609c:	88 e0       	ldi	r24, 0x08	; 8
    609e:	89 83       	std	Y+1, r24	; 0x01
		break;
    60a0:	64 c0       	rjmp	.+200    	; 0x616a <spi_cmd+0x24c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    60a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    60a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    60a6:	af 85       	ldd	r26, Y+15	; 0x0f
    60a8:	b8 89       	ldd	r27, Y+16	; 0x10
    60aa:	89 2f       	mov	r24, r25
    60ac:	9a 2f       	mov	r25, r26
    60ae:	ab 2f       	mov	r26, r27
    60b0:	bb 27       	eor	r27, r27
    60b2:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    60b4:	89 8d       	ldd	r24, Y+25	; 0x19
    60b6:	88 23       	and	r24, r24
    60b8:	19 f0       	breq	.+6      	; 0x60c0 <spi_cmd+0x1a2>
    60ba:	8c 81       	ldd	r24, Y+4	; 0x04
    60bc:	80 68       	ori	r24, 0x80	; 128
    60be:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr);
    60c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    60c2:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(u32data >> 24);
    60c4:	89 89       	ldd	r24, Y+17	; 0x11
    60c6:	9a 89       	ldd	r25, Y+18	; 0x12
    60c8:	ab 89       	ldd	r26, Y+19	; 0x13
    60ca:	bc 89       	ldd	r27, Y+20	; 0x14
    60cc:	8b 2f       	mov	r24, r27
    60ce:	99 27       	eor	r25, r25
    60d0:	aa 27       	eor	r26, r26
    60d2:	bb 27       	eor	r27, r27
    60d4:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 16);
    60d6:	89 89       	ldd	r24, Y+17	; 0x11
    60d8:	9a 89       	ldd	r25, Y+18	; 0x12
    60da:	ab 89       	ldd	r26, Y+19	; 0x13
    60dc:	bc 89       	ldd	r27, Y+20	; 0x14
    60de:	cd 01       	movw	r24, r26
    60e0:	aa 27       	eor	r26, r26
    60e2:	bb 27       	eor	r27, r27
    60e4:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 8);
    60e6:	89 89       	ldd	r24, Y+17	; 0x11
    60e8:	9a 89       	ldd	r25, Y+18	; 0x12
    60ea:	ab 89       	ldd	r26, Y+19	; 0x13
    60ec:	bc 89       	ldd	r27, Y+20	; 0x14
    60ee:	89 2f       	mov	r24, r25
    60f0:	9a 2f       	mov	r25, r26
    60f2:	ab 2f       	mov	r26, r27
    60f4:	bb 27       	eor	r27, r27
    60f6:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data);
    60f8:	89 89       	ldd	r24, Y+17	; 0x11
    60fa:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    60fc:	88 e0       	ldi	r24, 0x08	; 8
    60fe:	89 83       	std	Y+1, r24	; 0x01
		break;
    6100:	34 c0       	rjmp	.+104    	; 0x616a <spi_cmd+0x24c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    6102:	8d 85       	ldd	r24, Y+13	; 0x0d
    6104:	9e 85       	ldd	r25, Y+14	; 0x0e
    6106:	af 85       	ldd	r26, Y+15	; 0x0f
    6108:	b8 89       	ldd	r27, Y+16	; 0x10
    610a:	cd 01       	movw	r24, r26
    610c:	aa 27       	eor	r26, r26
    610e:	bb 27       	eor	r27, r27
    6110:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    6112:	8d 85       	ldd	r24, Y+13	; 0x0d
    6114:	9e 85       	ldd	r25, Y+14	; 0x0e
    6116:	af 85       	ldd	r26, Y+15	; 0x0f
    6118:	b8 89       	ldd	r27, Y+16	; 0x10
    611a:	89 2f       	mov	r24, r25
    611c:	9a 2f       	mov	r25, r26
    611e:	ab 2f       	mov	r26, r27
    6120:	bb 27       	eor	r27, r27
    6122:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(adr);
    6124:	8d 85       	ldd	r24, Y+13	; 0x0d
    6126:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 24);
    6128:	89 89       	ldd	r24, Y+17	; 0x11
    612a:	9a 89       	ldd	r25, Y+18	; 0x12
    612c:	ab 89       	ldd	r26, Y+19	; 0x13
    612e:	bc 89       	ldd	r27, Y+20	; 0x14
    6130:	8b 2f       	mov	r24, r27
    6132:	99 27       	eor	r25, r25
    6134:	aa 27       	eor	r26, r26
    6136:	bb 27       	eor	r27, r27
    6138:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 16);
    613a:	89 89       	ldd	r24, Y+17	; 0x11
    613c:	9a 89       	ldd	r25, Y+18	; 0x12
    613e:	ab 89       	ldd	r26, Y+19	; 0x13
    6140:	bc 89       	ldd	r27, Y+20	; 0x14
    6142:	cd 01       	movw	r24, r26
    6144:	aa 27       	eor	r26, r26
    6146:	bb 27       	eor	r27, r27
    6148:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data >> 8);
    614a:	89 89       	ldd	r24, Y+17	; 0x11
    614c:	9a 89       	ldd	r25, Y+18	; 0x12
    614e:	ab 89       	ldd	r26, Y+19	; 0x13
    6150:	bc 89       	ldd	r27, Y+20	; 0x14
    6152:	89 2f       	mov	r24, r25
    6154:	9a 2f       	mov	r25, r26
    6156:	ab 2f       	mov	r26, r27
    6158:	bb 27       	eor	r27, r27
    615a:	89 87       	std	Y+9, r24	; 0x09
		bc[7] = (uint8)(u32data);
    615c:	89 89       	ldd	r24, Y+17	; 0x11
    615e:	8a 87       	std	Y+10, r24	; 0x0a
		len = 9;
    6160:	89 e0       	ldi	r24, 0x09	; 9
    6162:	89 83       	std	Y+1, r24	; 0x01
		break;
    6164:	02 c0       	rjmp	.+4      	; 0x616a <spi_cmd+0x24c>
	default:
		result = N_FAIL;
    6166:	1a 82       	std	Y+2, r1	; 0x02
		break;
    6168:	00 00       	nop
	}

	if (result) {
    616a:	8a 81       	ldd	r24, Y+2	; 0x02
    616c:	88 23       	and	r24, r24
    616e:	89 f1       	breq	.+98     	; 0x61d2 <spi_cmd+0x2b4>
		if (!gu8Crc_off)
    6170:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <gu8Crc_off>
    6174:	88 23       	and	r24, r24
    6176:	f9 f4       	brne	.+62     	; 0x61b6 <spi_cmd+0x298>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    6178:	89 81       	ldd	r24, Y+1	; 0x01
    617a:	88 2f       	mov	r24, r24
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	8c 01       	movw	r16, r24
    6180:	01 50       	subi	r16, 0x01	; 1
    6182:	11 09       	sbc	r17, r1
    6184:	89 81       	ldd	r24, Y+1	; 0x01
    6186:	88 2f       	mov	r24, r24
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	01 97       	sbiw	r24, 0x01	; 1
    618c:	09 2e       	mov	r0, r25
    618e:	00 0c       	add	r0, r0
    6190:	aa 0b       	sbc	r26, r26
    6192:	bb 0b       	sbc	r27, r27
    6194:	be 01       	movw	r22, r28
    6196:	6d 5f       	subi	r22, 0xFD	; 253
    6198:	7f 4f       	sbci	r23, 0xFF	; 255
    619a:	9c 01       	movw	r18, r24
    619c:	ad 01       	movw	r20, r26
    619e:	8f e7       	ldi	r24, 0x7F	; 127
    61a0:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <crc7>
    61a4:	28 2f       	mov	r18, r24
    61a6:	22 0f       	add	r18, r18
    61a8:	ce 01       	movw	r24, r28
    61aa:	03 96       	adiw	r24, 0x03	; 3
    61ac:	80 0f       	add	r24, r16
    61ae:	91 1f       	adc	r25, r17
    61b0:	fc 01       	movw	r30, r24
    61b2:	20 83       	st	Z, r18
    61b4:	03 c0       	rjmp	.+6      	; 0x61bc <spi_cmd+0x29e>
		else
			len-=1;
    61b6:	89 81       	ldd	r24, Y+1	; 0x01
    61b8:	81 50       	subi	r24, 0x01	; 1
    61ba:	89 83       	std	Y+1, r24	; 0x01

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    61bc:	89 81       	ldd	r24, Y+1	; 0x01
    61be:	28 2f       	mov	r18, r24
    61c0:	30 e0       	ldi	r19, 0x00	; 0
    61c2:	ce 01       	movw	r24, r28
    61c4:	03 96       	adiw	r24, 0x03	; 3
    61c6:	b9 01       	movw	r22, r18
    61c8:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <nmi_spi_write>
    61cc:	88 23       	and	r24, r24
    61ce:	09 f0       	breq	.+2      	; 0x61d2 <spi_cmd+0x2b4>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
    61d0:	1a 82       	std	Y+2, r1	; 0x02
		}
	}

	return result;
    61d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    61d4:	69 96       	adiw	r28, 0x19	; 25
    61d6:	cd bf       	out	0x3d, r28	; 61
    61d8:	de bf       	out	0x3e, r29	; 62
    61da:	df 91       	pop	r29
    61dc:	cf 91       	pop	r28
    61de:	1f 91       	pop	r17
    61e0:	0f 91       	pop	r16
    61e2:	ff 90       	pop	r15
    61e4:	ef 90       	pop	r14
    61e6:	df 90       	pop	r13
    61e8:	cf 90       	pop	r12
    61ea:	af 90       	pop	r10
    61ec:	08 95       	ret

000061ee <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    61ee:	cf 93       	push	r28
    61f0:	df 93       	push	r29
    61f2:	cd b7       	in	r28, 0x3d	; 61
    61f4:	de b7       	in	r29, 0x3e	; 62
    61f6:	26 97       	sbiw	r28, 0x06	; 6
    61f8:	cd bf       	out	0x3d, r28	; 61
    61fa:	de bf       	out	0x3e, r29	; 62
    61fc:	8e 83       	std	Y+6, r24	; 0x06
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    61fe:	81 e0       	ldi	r24, 0x01	; 1
    6200:	8a 83       	std	Y+2, r24	; 0x02

    if (!gu8Crc_off)
    6202:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <gu8Crc_off>
    6206:	88 23       	and	r24, r24
    6208:	19 f4       	brne	.+6      	; 0x6210 <spi_data_rsp+0x22>
		len = 2;
    620a:	82 e0       	ldi	r24, 0x02	; 2
    620c:	89 83       	std	Y+1, r24	; 0x01
    620e:	02 c0       	rjmp	.+4      	; 0x6214 <spi_data_rsp+0x26>
	else
		len = 3;
    6210:	83 e0       	ldi	r24, 0x03	; 3
    6212:	89 83       	std	Y+1, r24	; 0x01

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    6214:	89 81       	ldd	r24, Y+1	; 0x01
    6216:	28 2f       	mov	r18, r24
    6218:	30 e0       	ldi	r19, 0x00	; 0
    621a:	ce 01       	movw	r24, r28
    621c:	03 96       	adiw	r24, 0x03	; 3
    621e:	b9 01       	movw	r22, r18
    6220:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <nmi_spi_read>
    6224:	88 23       	and	r24, r24
    6226:	11 f0       	breq	.+4      	; 0x622c <spi_data_rsp+0x3e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
    6228:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    622a:	1c c0       	rjmp	.+56     	; 0x6264 <spi_data_rsp+0x76>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    622c:	89 81       	ldd	r24, Y+1	; 0x01
    622e:	88 2f       	mov	r24, r24
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	01 97       	sbiw	r24, 0x01	; 1
    6234:	9e 01       	movw	r18, r28
    6236:	2d 5f       	subi	r18, 0xFD	; 253
    6238:	3f 4f       	sbci	r19, 0xFF	; 255
    623a:	82 0f       	add	r24, r18
    623c:	93 1f       	adc	r25, r19
    623e:	fc 01       	movw	r30, r24
    6240:	80 81       	ld	r24, Z
    6242:	88 23       	and	r24, r24
    6244:	69 f4       	brne	.+26     	; 0x6260 <spi_data_rsp+0x72>
    6246:	89 81       	ldd	r24, Y+1	; 0x01
    6248:	88 2f       	mov	r24, r24
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	02 97       	sbiw	r24, 0x02	; 2
    624e:	9e 01       	movw	r18, r28
    6250:	2d 5f       	subi	r18, 0xFD	; 253
    6252:	3f 4f       	sbci	r19, 0xFF	; 255
    6254:	82 0f       	add	r24, r18
    6256:	93 1f       	adc	r25, r19
    6258:	fc 01       	movw	r30, r24
    625a:	80 81       	ld	r24, Z
    625c:	83 3c       	cpi	r24, 0xC3	; 195
    625e:	11 f0       	breq	.+4      	; 0x6264 <spi_data_rsp+0x76>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
    6260:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    6262:	00 00       	nop
	}
_fail_:

	return result;
    6264:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6266:	26 96       	adiw	r28, 0x06	; 6
    6268:	cd bf       	out	0x3d, r28	; 61
    626a:	de bf       	out	0x3e, r29	; 62
    626c:	df 91       	pop	r29
    626e:	cf 91       	pop	r28
    6270:	08 95       	ret

00006272 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    6272:	cf 93       	push	r28
    6274:	df 93       	push	r29
    6276:	00 d0       	rcall	.+0      	; 0x6278 <spi_cmd_rsp+0x6>
    6278:	00 d0       	rcall	.+0      	; 0x627a <spi_cmd_rsp+0x8>
    627a:	cd b7       	in	r28, 0x3d	; 61
    627c:	de b7       	in	r29, 0x3e	; 62
    627e:	8c 83       	std	Y+4, r24	; 0x04
	uint8 rsp;
	sint8 result = N_OK;
    6280:	81 e0       	ldi	r24, 0x01	; 1
    6282:	89 83       	std	Y+1, r24	; 0x01
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    6284:	8c 81       	ldd	r24, Y+4	; 0x04
    6286:	8f 3c       	cpi	r24, 0xCF	; 207
    6288:	31 f0       	breq	.+12     	; 0x6296 <spi_cmd_rsp+0x24>
    628a:	8c 81       	ldd	r24, Y+4	; 0x04
    628c:	85 3c       	cpi	r24, 0xC5	; 197
    628e:	19 f0       	breq	.+6      	; 0x6296 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
    6290:	8c 81       	ldd	r24, Y+4	; 0x04
    6292:	86 3c       	cpi	r24, 0xC6	; 198
    6294:	51 f4       	brne	.+20     	; 0x62aa <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6296:	ce 01       	movw	r24, r28
    6298:	03 96       	adiw	r24, 0x03	; 3
    629a:	61 e0       	ldi	r22, 0x01	; 1
    629c:	70 e0       	ldi	r23, 0x00	; 0
    629e:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <nmi_spi_read>
    62a2:	88 23       	and	r24, r24
    62a4:	11 f0       	breq	.+4      	; 0x62aa <spi_cmd_rsp+0x38>
			result = N_FAIL;
    62a6:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    62a8:	2b c0       	rjmp	.+86     	; 0x6300 <spi_cmd_rsp+0x8e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    62aa:	8a e0       	ldi	r24, 0x0A	; 10
    62ac:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    62ae:	ce 01       	movw	r24, r28
    62b0:	03 96       	adiw	r24, 0x03	; 3
    62b2:	61 e0       	ldi	r22, 0x01	; 1
    62b4:	70 e0       	ldi	r23, 0x00	; 0
    62b6:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <nmi_spi_read>
    62ba:	88 23       	and	r24, r24
    62bc:	11 f0       	breq	.+4      	; 0x62c2 <spi_cmd_rsp+0x50>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    62be:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    62c0:	1f c0       	rjmp	.+62     	; 0x6300 <spi_cmd_rsp+0x8e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    62c2:	9b 81       	ldd	r25, Y+3	; 0x03
    62c4:	8c 81       	ldd	r24, Y+4	; 0x04
    62c6:	98 17       	cp	r25, r24
    62c8:	31 f0       	breq	.+12     	; 0x62d6 <spi_cmd_rsp+0x64>
    62ca:	8a 81       	ldd	r24, Y+2	; 0x02
    62cc:	98 2f       	mov	r25, r24
    62ce:	91 50       	subi	r25, 0x01	; 1
    62d0:	9a 83       	std	Y+2, r25	; 0x02
    62d2:	18 16       	cp	r1, r24
    62d4:	64 f3       	brlt	.-40     	; 0x62ae <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    62d6:	8a e0       	ldi	r24, 0x0A	; 10
    62d8:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    62da:	ce 01       	movw	r24, r28
    62dc:	03 96       	adiw	r24, 0x03	; 3
    62de:	61 e0       	ldi	r22, 0x01	; 1
    62e0:	70 e0       	ldi	r23, 0x00	; 0
    62e2:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <nmi_spi_read>
    62e6:	88 23       	and	r24, r24
    62e8:	11 f0       	breq	.+4      	; 0x62ee <spi_cmd_rsp+0x7c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    62ea:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    62ec:	09 c0       	rjmp	.+18     	; 0x6300 <spi_cmd_rsp+0x8e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    62ee:	8b 81       	ldd	r24, Y+3	; 0x03
    62f0:	88 23       	and	r24, r24
    62f2:	31 f0       	breq	.+12     	; 0x6300 <spi_cmd_rsp+0x8e>
    62f4:	8a 81       	ldd	r24, Y+2	; 0x02
    62f6:	98 2f       	mov	r25, r24
    62f8:	91 50       	subi	r25, 0x01	; 1
    62fa:	9a 83       	std	Y+2, r25	; 0x02
    62fc:	18 16       	cp	r1, r24
    62fe:	6c f3       	brlt	.-38     	; 0x62da <spi_cmd_rsp+0x68>

_fail_:

	return result;
    6300:	89 81       	ldd	r24, Y+1	; 0x01
}
    6302:	24 96       	adiw	r28, 0x04	; 4
    6304:	cd bf       	out	0x3d, r28	; 61
    6306:	de bf       	out	0x3e, r29	; 62
    6308:	df 91       	pop	r29
    630a:	cf 91       	pop	r28
    630c:	08 95       	ret

0000630e <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    630e:	cf 93       	push	r28
    6310:	df 93       	push	r29
    6312:	cd b7       	in	r28, 0x3d	; 61
    6314:	de b7       	in	r29, 0x3e	; 62
    6316:	2f 97       	sbiw	r28, 0x0f	; 15
    6318:	cd bf       	out	0x3d, r28	; 61
    631a:	de bf       	out	0x3e, r29	; 62
    631c:	8b 87       	std	Y+11, r24	; 0x0b
    631e:	9c 87       	std	Y+12, r25	; 0x0c
    6320:	6d 87       	std	Y+13, r22	; 0x0d
    6322:	7e 87       	std	Y+14, r23	; 0x0e
    6324:	4f 87       	std	Y+15, r20	; 0x0f
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    6326:	81 e0       	ldi	r24, 0x01	; 1
    6328:	8f 83       	std	Y+7, r24	; 0x07
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    632a:	1b 82       	std	Y+3, r1	; 0x03
    632c:	1c 82       	std	Y+4, r1	; 0x04
	do {
		if (sz <= DATA_PKT_SZ)
    632e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6330:	9e 85       	ldd	r25, Y+14	; 0x0e
    6332:	81 30       	cpi	r24, 0x01	; 1
    6334:	90 42       	sbci	r25, 0x20	; 32
    6336:	28 f4       	brcc	.+10     	; 0x6342 <spi_data_read+0x34>
			nbytes = sz;
    6338:	8d 85       	ldd	r24, Y+13	; 0x0d
    633a:	9e 85       	ldd	r25, Y+14	; 0x0e
    633c:	8d 83       	std	Y+5, r24	; 0x05
    633e:	9e 83       	std	Y+6, r25	; 0x06
    6340:	04 c0       	rjmp	.+8      	; 0x634a <spi_data_read+0x3c>
		else
			nbytes = DATA_PKT_SZ;
    6342:	80 e0       	ldi	r24, 0x00	; 0
    6344:	90 e2       	ldi	r25, 0x20	; 32
    6346:	8d 83       	std	Y+5, r24	; 0x05
    6348:	9e 83       	std	Y+6, r25	; 0x06

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    634a:	8a e0       	ldi	r24, 0x0A	; 10
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	89 83       	std	Y+1, r24	; 0x01
    6350:	9a 83       	std	Y+2, r25	; 0x02
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6352:	ce 01       	movw	r24, r28
    6354:	0a 96       	adiw	r24, 0x0a	; 10
    6356:	61 e0       	ldi	r22, 0x01	; 1
    6358:	70 e0       	ldi	r23, 0x00	; 0
    635a:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <nmi_spi_read>
    635e:	88 23       	and	r24, r24
    6360:	11 f0       	breq	.+4      	; 0x6366 <spi_data_read+0x58>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
    6362:	1f 82       	std	Y+7, r1	; 0x07
				break;
    6364:	14 c0       	rjmp	.+40     	; 0x638e <spi_data_read+0x80>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    6366:	8a 85       	ldd	r24, Y+10	; 0x0a
    6368:	82 95       	swap	r24
    636a:	8f 70       	andi	r24, 0x0F	; 15
    636c:	88 2f       	mov	r24, r24
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	8f 70       	andi	r24, 0x0F	; 15
    6372:	99 27       	eor	r25, r25
    6374:	0f 97       	sbiw	r24, 0x0f	; 15
    6376:	51 f0       	breq	.+20     	; 0x638c <spi_data_read+0x7e>
				break;
		} while (retry--);
    6378:	89 81       	ldd	r24, Y+1	; 0x01
    637a:	9a 81       	ldd	r25, Y+2	; 0x02
    637c:	9c 01       	movw	r18, r24
    637e:	21 50       	subi	r18, 0x01	; 1
    6380:	31 09       	sbc	r19, r1
    6382:	29 83       	std	Y+1, r18	; 0x01
    6384:	3a 83       	std	Y+2, r19	; 0x02
    6386:	89 2b       	or	r24, r25
    6388:	21 f7       	brne	.-56     	; 0x6352 <spi_data_read+0x44>
    638a:	01 c0       	rjmp	.+2      	; 0x638e <spi_data_read+0x80>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    638c:	00 00       	nop
		} while (retry--);

		if (result == N_FAIL)
    638e:	8f 81       	ldd	r24, Y+7	; 0x07
    6390:	88 23       	and	r24, r24
    6392:	09 f4       	brne	.+2      	; 0x6396 <spi_data_read+0x88>
    6394:	3f c0       	rjmp	.+126    	; 0x6414 <spi_data_read+0x106>
			break;

		if (retry <= 0) {
    6396:	89 81       	ldd	r24, Y+1	; 0x01
    6398:	9a 81       	ldd	r25, Y+2	; 0x02
    639a:	18 16       	cp	r1, r24
    639c:	19 06       	cpc	r1, r25
    639e:	14 f0       	brlt	.+4      	; 0x63a4 <spi_data_read+0x96>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    63a0:	1f 82       	std	Y+7, r1	; 0x07
			break;
    63a2:	39 c0       	rjmp	.+114    	; 0x6416 <spi_data_read+0x108>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    63a4:	4d 81       	ldd	r20, Y+5	; 0x05
    63a6:	5e 81       	ldd	r21, Y+6	; 0x06
    63a8:	8b 81       	ldd	r24, Y+3	; 0x03
    63aa:	9c 81       	ldd	r25, Y+4	; 0x04
    63ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    63ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    63b0:	82 0f       	add	r24, r18
    63b2:	93 1f       	adc	r25, r19
    63b4:	ba 01       	movw	r22, r20
    63b6:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <nmi_spi_read>
    63ba:	88 23       	and	r24, r24
    63bc:	11 f0       	breq	.+4      	; 0x63c2 <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    63be:	1f 82       	std	Y+7, r1	; 0x07
			break;
    63c0:	2a c0       	rjmp	.+84     	; 0x6416 <spi_data_read+0x108>
		}
		if(!clockless)
    63c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    63c4:	88 23       	and	r24, r24
    63c6:	71 f4       	brne	.+28     	; 0x63e4 <spi_data_read+0xd6>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    63c8:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <gu8Crc_off>
    63cc:	88 23       	and	r24, r24
    63ce:	51 f4       	brne	.+20     	; 0x63e4 <spi_data_read+0xd6>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    63d0:	ce 01       	movw	r24, r28
    63d2:	08 96       	adiw	r24, 0x08	; 8
    63d4:	62 e0       	ldi	r22, 0x02	; 2
    63d6:	70 e0       	ldi	r23, 0x00	; 0
    63d8:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <nmi_spi_read>
    63dc:	88 23       	and	r24, r24
    63de:	11 f0       	breq	.+4      	; 0x63e4 <spi_data_read+0xd6>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
    63e0:	1f 82       	std	Y+7, r1	; 0x07
					break;
    63e2:	19 c0       	rjmp	.+50     	; 0x6416 <spi_data_read+0x108>
				}
			}
		}
		ix += nbytes;
    63e4:	2b 81       	ldd	r18, Y+3	; 0x03
    63e6:	3c 81       	ldd	r19, Y+4	; 0x04
    63e8:	8d 81       	ldd	r24, Y+5	; 0x05
    63ea:	9e 81       	ldd	r25, Y+6	; 0x06
    63ec:	82 0f       	add	r24, r18
    63ee:	93 1f       	adc	r25, r19
    63f0:	8b 83       	std	Y+3, r24	; 0x03
    63f2:	9c 83       	std	Y+4, r25	; 0x04
		sz -= nbytes;
    63f4:	8d 81       	ldd	r24, Y+5	; 0x05
    63f6:	9e 81       	ldd	r25, Y+6	; 0x06
    63f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    63fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    63fc:	a9 01       	movw	r20, r18
    63fe:	48 1b       	sub	r20, r24
    6400:	59 0b       	sbc	r21, r25
    6402:	ca 01       	movw	r24, r20
    6404:	8d 87       	std	Y+13, r24	; 0x0d
    6406:	9e 87       	std	Y+14, r25	; 0x0e

	} while (sz);
    6408:	8d 85       	ldd	r24, Y+13	; 0x0d
    640a:	9e 85       	ldd	r25, Y+14	; 0x0e
    640c:	89 2b       	or	r24, r25
    640e:	09 f0       	breq	.+2      	; 0x6412 <spi_data_read+0x104>
    6410:	8e cf       	rjmp	.-228    	; 0x632e <spi_data_read+0x20>
    6412:	01 c0       	rjmp	.+2      	; 0x6416 <spi_data_read+0x108>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    6414:	00 00       	nop
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    6416:	8f 81       	ldd	r24, Y+7	; 0x07
}
    6418:	2f 96       	adiw	r28, 0x0f	; 15
    641a:	cd bf       	out	0x3d, r28	; 61
    641c:	de bf       	out	0x3e, r29	; 62
    641e:	df 91       	pop	r29
    6420:	cf 91       	pop	r28
    6422:	08 95       	ret

00006424 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    6424:	cf 93       	push	r28
    6426:	df 93       	push	r29
    6428:	cd b7       	in	r28, 0x3d	; 61
    642a:	de b7       	in	r29, 0x3e	; 62
    642c:	2d 97       	sbiw	r28, 0x0d	; 13
    642e:	cd bf       	out	0x3d, r28	; 61
    6430:	de bf       	out	0x3e, r29	; 62
    6432:	8a 87       	std	Y+10, r24	; 0x0a
    6434:	9b 87       	std	Y+11, r25	; 0x0b
    6436:	6c 87       	std	Y+12, r22	; 0x0c
    6438:	7d 87       	std	Y+13, r23	; 0x0d
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    643a:	81 e0       	ldi	r24, 0x01	; 1
    643c:	8d 83       	std	Y+5, r24	; 0x05
	uint8 cmd, order, crc[2] = {0};
    643e:	18 86       	std	Y+8, r1	; 0x08
    6440:	19 86       	std	Y+9, r1	; 0x09
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6442:	19 82       	std	Y+1, r1	; 0x01
    6444:	1a 82       	std	Y+2, r1	; 0x02
	do {
		if (sz <= DATA_PKT_SZ)
    6446:	8c 85       	ldd	r24, Y+12	; 0x0c
    6448:	9d 85       	ldd	r25, Y+13	; 0x0d
    644a:	81 30       	cpi	r24, 0x01	; 1
    644c:	90 42       	sbci	r25, 0x20	; 32
    644e:	28 f4       	brcc	.+10     	; 0x645a <spi_data_write+0x36>
			nbytes = sz;
    6450:	8c 85       	ldd	r24, Y+12	; 0x0c
    6452:	9d 85       	ldd	r25, Y+13	; 0x0d
    6454:	8b 83       	std	Y+3, r24	; 0x03
    6456:	9c 83       	std	Y+4, r25	; 0x04
    6458:	04 c0       	rjmp	.+8      	; 0x6462 <spi_data_write+0x3e>
		else
			nbytes = DATA_PKT_SZ;
    645a:	80 e0       	ldi	r24, 0x00	; 0
    645c:	90 e2       	ldi	r25, 0x20	; 32
    645e:	8b 83       	std	Y+3, r24	; 0x03
    6460:	9c 83       	std	Y+4, r25	; 0x04

		/**
			Write command
		**/
		cmd = 0xf0;
    6462:	80 ef       	ldi	r24, 0xF0	; 240
    6464:	8f 83       	std	Y+7, r24	; 0x07
		if (ix == 0)  {
    6466:	89 81       	ldd	r24, Y+1	; 0x01
    6468:	9a 81       	ldd	r25, Y+2	; 0x02
    646a:	89 2b       	or	r24, r25
    646c:	59 f4       	brne	.+22     	; 0x6484 <spi_data_write+0x60>
			if (sz <= DATA_PKT_SZ)
    646e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6470:	9d 85       	ldd	r25, Y+13	; 0x0d
    6472:	81 30       	cpi	r24, 0x01	; 1
    6474:	90 42       	sbci	r25, 0x20	; 32
    6476:	18 f4       	brcc	.+6      	; 0x647e <spi_data_write+0x5a>
				order = 0x3;
    6478:	83 e0       	ldi	r24, 0x03	; 3
    647a:	8e 83       	std	Y+6, r24	; 0x06
    647c:	0d c0       	rjmp	.+26     	; 0x6498 <spi_data_write+0x74>
			else
				order = 0x1;
    647e:	81 e0       	ldi	r24, 0x01	; 1
    6480:	8e 83       	std	Y+6, r24	; 0x06
    6482:	0a c0       	rjmp	.+20     	; 0x6498 <spi_data_write+0x74>
		} else {
			if (sz <= DATA_PKT_SZ)
    6484:	8c 85       	ldd	r24, Y+12	; 0x0c
    6486:	9d 85       	ldd	r25, Y+13	; 0x0d
    6488:	81 30       	cpi	r24, 0x01	; 1
    648a:	90 42       	sbci	r25, 0x20	; 32
    648c:	18 f4       	brcc	.+6      	; 0x6494 <spi_data_write+0x70>
				order = 0x3;
    648e:	83 e0       	ldi	r24, 0x03	; 3
    6490:	8e 83       	std	Y+6, r24	; 0x06
    6492:	02 c0       	rjmp	.+4      	; 0x6498 <spi_data_write+0x74>
			else
				order = 0x2;
    6494:	82 e0       	ldi	r24, 0x02	; 2
    6496:	8e 83       	std	Y+6, r24	; 0x06
		}
		cmd |= order;
    6498:	9f 81       	ldd	r25, Y+7	; 0x07
    649a:	8e 81       	ldd	r24, Y+6	; 0x06
    649c:	89 2b       	or	r24, r25
    649e:	8f 83       	std	Y+7, r24	; 0x07
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    64a0:	ce 01       	movw	r24, r28
    64a2:	07 96       	adiw	r24, 0x07	; 7
    64a4:	61 e0       	ldi	r22, 0x01	; 1
    64a6:	70 e0       	ldi	r23, 0x00	; 0
    64a8:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <nmi_spi_write>
    64ac:	88 23       	and	r24, r24
    64ae:	11 f0       	breq	.+4      	; 0x64b4 <spi_data_write+0x90>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
    64b0:	1d 82       	std	Y+5, r1	; 0x05
			break;
    64b2:	34 c0       	rjmp	.+104    	; 0x651c <spi_data_write+0xf8>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    64b4:	89 81       	ldd	r24, Y+1	; 0x01
    64b6:	9a 81       	ldd	r25, Y+2	; 0x02
    64b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    64ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    64bc:	82 0f       	add	r24, r18
    64be:	93 1f       	adc	r25, r19
    64c0:	2b 81       	ldd	r18, Y+3	; 0x03
    64c2:	3c 81       	ldd	r19, Y+4	; 0x04
    64c4:	b9 01       	movw	r22, r18
    64c6:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <nmi_spi_write>
    64ca:	88 23       	and	r24, r24
    64cc:	11 f0       	breq	.+4      	; 0x64d2 <spi_data_write+0xae>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
    64ce:	1d 82       	std	Y+5, r1	; 0x05
			break;
    64d0:	25 c0       	rjmp	.+74     	; 0x651c <spi_data_write+0xf8>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    64d2:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <gu8Crc_off>
    64d6:	88 23       	and	r24, r24
    64d8:	51 f4       	brne	.+20     	; 0x64ee <spi_data_write+0xca>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    64da:	ce 01       	movw	r24, r28
    64dc:	08 96       	adiw	r24, 0x08	; 8
    64de:	62 e0       	ldi	r22, 0x02	; 2
    64e0:	70 e0       	ldi	r23, 0x00	; 0
    64e2:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <nmi_spi_write>
    64e6:	88 23       	and	r24, r24
    64e8:	11 f0       	breq	.+4      	; 0x64ee <spi_data_write+0xca>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
    64ea:	1d 82       	std	Y+5, r1	; 0x05
				break;
    64ec:	17 c0       	rjmp	.+46     	; 0x651c <spi_data_write+0xf8>
			}
		}

		ix += nbytes;
    64ee:	29 81       	ldd	r18, Y+1	; 0x01
    64f0:	3a 81       	ldd	r19, Y+2	; 0x02
    64f2:	8b 81       	ldd	r24, Y+3	; 0x03
    64f4:	9c 81       	ldd	r25, Y+4	; 0x04
    64f6:	82 0f       	add	r24, r18
    64f8:	93 1f       	adc	r25, r19
    64fa:	89 83       	std	Y+1, r24	; 0x01
    64fc:	9a 83       	std	Y+2, r25	; 0x02
		sz -= nbytes;
    64fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    6500:	3d 85       	ldd	r19, Y+13	; 0x0d
    6502:	8b 81       	ldd	r24, Y+3	; 0x03
    6504:	9c 81       	ldd	r25, Y+4	; 0x04
    6506:	a9 01       	movw	r20, r18
    6508:	48 1b       	sub	r20, r24
    650a:	59 0b       	sbc	r21, r25
    650c:	ca 01       	movw	r24, r20
    650e:	8c 87       	std	Y+12, r24	; 0x0c
    6510:	9d 87       	std	Y+13, r25	; 0x0d
	} while (sz);
    6512:	8c 85       	ldd	r24, Y+12	; 0x0c
    6514:	9d 85       	ldd	r25, Y+13	; 0x0d
    6516:	89 2b       	or	r24, r25
    6518:	09 f0       	breq	.+2      	; 0x651c <spi_data_write+0xf8>
    651a:	95 cf       	rjmp	.-214    	; 0x6446 <spi_data_write+0x22>


	return result;
    651c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    651e:	2d 96       	adiw	r28, 0x0d	; 13
    6520:	cd bf       	out	0x3d, r28	; 61
    6522:	de bf       	out	0x3e, r29	; 62
    6524:	df 91       	pop	r29
    6526:	cf 91       	pop	r28
    6528:	08 95       	ret

0000652a <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    652a:	af 92       	push	r10
    652c:	cf 92       	push	r12
    652e:	df 92       	push	r13
    6530:	ef 92       	push	r14
    6532:	ff 92       	push	r15
    6534:	0f 93       	push	r16
    6536:	1f 93       	push	r17
    6538:	cf 93       	push	r28
    653a:	df 93       	push	r29
    653c:	cd b7       	in	r28, 0x3d	; 61
    653e:	de b7       	in	r29, 0x3e	; 62
    6540:	2c 97       	sbiw	r28, 0x0c	; 12
    6542:	cd bf       	out	0x3d, r28	; 61
    6544:	de bf       	out	0x3e, r29	; 62
    6546:	6d 83       	std	Y+5, r22	; 0x05
    6548:	7e 83       	std	Y+6, r23	; 0x06
    654a:	8f 83       	std	Y+7, r24	; 0x07
    654c:	98 87       	std	Y+8, r25	; 0x08
    654e:	29 87       	std	Y+9, r18	; 0x09
    6550:	3a 87       	std	Y+10, r19	; 0x0a
    6552:	4b 87       	std	Y+11, r20	; 0x0b
    6554:	5c 87       	std	Y+12, r21	; 0x0c
	uint8 retry = SPI_RETRY_COUNT;
    6556:	8a e0       	ldi	r24, 0x0A	; 10
    6558:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    655a:	81 e0       	ldi	r24, 0x01	; 1
    655c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_WRITE;
    655e:	89 ec       	ldi	r24, 0xC9	; 201
    6560:	8b 83       	std	Y+3, r24	; 0x03
	uint8 clockless = 0;
    6562:	1c 82       	std	Y+4, r1	; 0x04
	
_RETRY_:	
	if (addr <= 0x30)
    6564:	8d 81       	ldd	r24, Y+5	; 0x05
    6566:	9e 81       	ldd	r25, Y+6	; 0x06
    6568:	af 81       	ldd	r26, Y+7	; 0x07
    656a:	b8 85       	ldd	r27, Y+8	; 0x08
    656c:	c1 97       	sbiw	r24, 0x31	; 49
    656e:	a1 05       	cpc	r26, r1
    6570:	b1 05       	cpc	r27, r1
    6572:	28 f4       	brcc	.+10     	; 0x657e <spi_write_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    6574:	83 ec       	ldi	r24, 0xC3	; 195
    6576:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    6578:	81 e0       	ldi	r24, 0x01	; 1
    657a:	8c 83       	std	Y+4, r24	; 0x04
    657c:	03 c0       	rjmp	.+6      	; 0x6584 <spi_write_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    657e:	89 ec       	ldi	r24, 0xC9	; 201
    6580:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    6582:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    6584:	29 85       	ldd	r18, Y+9	; 0x09
    6586:	3a 85       	ldd	r19, Y+10	; 0x0a
    6588:	4b 85       	ldd	r20, Y+11	; 0x0b
    658a:	5c 85       	ldd	r21, Y+12	; 0x0c
    658c:	8d 81       	ldd	r24, Y+5	; 0x05
    658e:	9e 81       	ldd	r25, Y+6	; 0x06
    6590:	af 81       	ldd	r26, Y+7	; 0x07
    6592:	b8 85       	ldd	r27, Y+8	; 0x08
    6594:	ac 80       	ldd	r10, Y+4	; 0x04
    6596:	c1 2c       	mov	r12, r1
    6598:	d1 2c       	mov	r13, r1
    659a:	76 01       	movw	r14, r12
    659c:	68 94       	set
    659e:	c2 f8       	bld	r12, 2
    65a0:	89 01       	movw	r16, r18
    65a2:	9a 01       	movw	r18, r20
    65a4:	ac 01       	movw	r20, r24
    65a6:	bd 01       	movw	r22, r26
    65a8:	8b 81       	ldd	r24, Y+3	; 0x03
    65aa:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
    65ae:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    65b0:	8a 81       	ldd	r24, Y+2	; 0x02
    65b2:	81 30       	cpi	r24, 0x01	; 1
    65b4:	29 f4       	brne	.+10     	; 0x65c0 <spi_write_reg+0x96>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    65b6:	8b 81       	ldd	r24, Y+3	; 0x03
    65b8:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
    65bc:	8a 83       	std	Y+2, r24	; 0x02
    65be:	01 c0       	rjmp	.+2      	; 0x65c2 <spi_write_reg+0x98>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    65c0:	00 00       	nop
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    65c2:	8a 81       	ldd	r24, Y+2	; 0x02
    65c4:	81 30       	cpi	r24, 0x01	; 1
    65c6:	19 f1       	breq	.+70     	; 0x660e <spi_write_reg+0xe4>
	{
		nm_bsp_sleep(1);
    65c8:	61 e0       	ldi	r22, 0x01	; 1
    65ca:	70 e0       	ldi	r23, 0x00	; 0
    65cc:	80 e0       	ldi	r24, 0x00	; 0
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    65d4:	a1 2c       	mov	r10, r1
    65d6:	c1 2c       	mov	r12, r1
    65d8:	d1 2c       	mov	r13, r1
    65da:	76 01       	movw	r14, r12
    65dc:	00 e0       	ldi	r16, 0x00	; 0
    65de:	10 e0       	ldi	r17, 0x00	; 0
    65e0:	98 01       	movw	r18, r16
    65e2:	40 e0       	ldi	r20, 0x00	; 0
    65e4:	50 e0       	ldi	r21, 0x00	; 0
    65e6:	ba 01       	movw	r22, r20
    65e8:	8f ec       	ldi	r24, 0xCF	; 207
    65ea:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    65ee:	8f ec       	ldi	r24, 0xCF	; 207
    65f0:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
    65f4:	61 e0       	ldi	r22, 0x01	; 1
    65f6:	70 e0       	ldi	r23, 0x00	; 0
    65f8:	80 e0       	ldi	r24, 0x00	; 0
    65fa:	90 e0       	ldi	r25, 0x00	; 0
    65fc:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		retry--;
    6600:	89 81       	ldd	r24, Y+1	; 0x01
    6602:	81 50       	subi	r24, 0x01	; 1
    6604:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    6606:	89 81       	ldd	r24, Y+1	; 0x01
    6608:	88 23       	and	r24, r24
    660a:	09 f0       	breq	.+2      	; 0x660e <spi_write_reg+0xe4>
    660c:	ab cf       	rjmp	.-170    	; 0x6564 <spi_write_reg+0x3a>
	}

	return result;
    660e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6610:	2c 96       	adiw	r28, 0x0c	; 12
    6612:	cd bf       	out	0x3d, r28	; 61
    6614:	de bf       	out	0x3e, r29	; 62
    6616:	df 91       	pop	r29
    6618:	cf 91       	pop	r28
    661a:	1f 91       	pop	r17
    661c:	0f 91       	pop	r16
    661e:	ff 90       	pop	r15
    6620:	ef 90       	pop	r14
    6622:	df 90       	pop	r13
    6624:	cf 90       	pop	r12
    6626:	af 90       	pop	r10
    6628:	08 95       	ret

0000662a <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    662a:	af 92       	push	r10
    662c:	cf 92       	push	r12
    662e:	df 92       	push	r13
    6630:	ef 92       	push	r14
    6632:	ff 92       	push	r15
    6634:	0f 93       	push	r16
    6636:	1f 93       	push	r17
    6638:	cf 93       	push	r28
    663a:	df 93       	push	r29
    663c:	cd b7       	in	r28, 0x3d	; 61
    663e:	de b7       	in	r29, 0x3e	; 62
    6640:	2b 97       	sbiw	r28, 0x0b	; 11
    6642:	cd bf       	out	0x3d, r28	; 61
    6644:	de bf       	out	0x3e, r29	; 62
    6646:	6c 83       	std	Y+4, r22	; 0x04
    6648:	7d 83       	std	Y+5, r23	; 0x05
    664a:	8e 83       	std	Y+6, r24	; 0x06
    664c:	9f 83       	std	Y+7, r25	; 0x07
    664e:	48 87       	std	Y+8, r20	; 0x08
    6650:	59 87       	std	Y+9, r21	; 0x09
    6652:	2a 87       	std	Y+10, r18	; 0x0a
    6654:	3b 87       	std	Y+11, r19	; 0x0b
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    6656:	8a e0       	ldi	r24, 0x0A	; 10
    6658:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_DMA_EXT_WRITE;
    665a:	87 ec       	ldi	r24, 0xC7	; 199
    665c:	8b 83       	std	Y+3, r24	; 0x03
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    665e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6660:	9b 85       	ldd	r25, Y+11	; 0x0b
    6662:	01 97       	sbiw	r24, 0x01	; 1
    6664:	21 f4       	brne	.+8      	; 0x666e <nm_spi_write+0x44>
		size = 2;
    6666:	82 e0       	ldi	r24, 0x02	; 2
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	8a 87       	std	Y+10, r24	; 0x0a
    666c:	9b 87       	std	Y+11, r25	; 0x0b

	result = spi_cmd(cmd, addr, 0, size,0);
    666e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6670:	9b 85       	ldd	r25, Y+11	; 0x0b
    6672:	9c 01       	movw	r18, r24
    6674:	40 e0       	ldi	r20, 0x00	; 0
    6676:	50 e0       	ldi	r21, 0x00	; 0
    6678:	8c 81       	ldd	r24, Y+4	; 0x04
    667a:	9d 81       	ldd	r25, Y+5	; 0x05
    667c:	ae 81       	ldd	r26, Y+6	; 0x06
    667e:	bf 81       	ldd	r27, Y+7	; 0x07
    6680:	a1 2c       	mov	r10, r1
    6682:	69 01       	movw	r12, r18
    6684:	7a 01       	movw	r14, r20
    6686:	00 e0       	ldi	r16, 0x00	; 0
    6688:	10 e0       	ldi	r17, 0x00	; 0
    668a:	98 01       	movw	r18, r16
    668c:	ac 01       	movw	r20, r24
    668e:	bd 01       	movw	r22, r26
    6690:	8b 81       	ldd	r24, Y+3	; 0x03
    6692:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
    6696:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    6698:	89 81       	ldd	r24, Y+1	; 0x01
    669a:	81 30       	cpi	r24, 0x01	; 1
    669c:	b9 f4       	brne	.+46     	; 0x66cc <nm_spi_write+0xa2>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    669e:	8b 81       	ldd	r24, Y+3	; 0x03
    66a0:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
    66a4:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    66a6:	89 81       	ldd	r24, Y+1	; 0x01
    66a8:	81 30       	cpi	r24, 0x01	; 1
    66aa:	91 f4       	brne	.+36     	; 0x66d0 <nm_spi_write+0xa6>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    66ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    66ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    66b0:	88 85       	ldd	r24, Y+8	; 0x08
    66b2:	99 85       	ldd	r25, Y+9	; 0x09
    66b4:	b9 01       	movw	r22, r18
    66b6:	0e 94 12 32 	call	0x6424	; 0x6424 <spi_data_write>
    66ba:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    66bc:	89 81       	ldd	r24, Y+1	; 0x01
    66be:	81 30       	cpi	r24, 0x01	; 1
    66c0:	49 f4       	brne	.+18     	; 0x66d4 <nm_spi_write+0xaa>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    66c2:	8b 81       	ldd	r24, Y+3	; 0x03
    66c4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <spi_data_rsp>
    66c8:	89 83       	std	Y+1, r24	; 0x01
    66ca:	05 c0       	rjmp	.+10     	; 0x66d6 <nm_spi_write+0xac>
		size = 2;

	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    66cc:	00 00       	nop
    66ce:	03 c0       	rjmp	.+6      	; 0x66d6 <nm_spi_write+0xac>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    66d0:	00 00       	nop
    66d2:	01 c0       	rjmp	.+2      	; 0x66d6 <nm_spi_write+0xac>
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
    66d4:	00 00       	nop
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
	if(result != N_OK)
    66d6:	89 81       	ldd	r24, Y+1	; 0x01
    66d8:	81 30       	cpi	r24, 0x01	; 1
    66da:	19 f1       	breq	.+70     	; 0x6722 <nm_spi_write+0xf8>
	{
		nm_bsp_sleep(1);
    66dc:	61 e0       	ldi	r22, 0x01	; 1
    66de:	70 e0       	ldi	r23, 0x00	; 0
    66e0:	80 e0       	ldi	r24, 0x00	; 0
    66e2:	90 e0       	ldi	r25, 0x00	; 0
    66e4:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    66e8:	a1 2c       	mov	r10, r1
    66ea:	c1 2c       	mov	r12, r1
    66ec:	d1 2c       	mov	r13, r1
    66ee:	76 01       	movw	r14, r12
    66f0:	00 e0       	ldi	r16, 0x00	; 0
    66f2:	10 e0       	ldi	r17, 0x00	; 0
    66f4:	98 01       	movw	r18, r16
    66f6:	40 e0       	ldi	r20, 0x00	; 0
    66f8:	50 e0       	ldi	r21, 0x00	; 0
    66fa:	ba 01       	movw	r22, r20
    66fc:	8f ec       	ldi	r24, 0xCF	; 207
    66fe:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    6702:	8f ec       	ldi	r24, 0xCF	; 207
    6704:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    6708:	61 e0       	ldi	r22, 0x01	; 1
    670a:	70 e0       	ldi	r23, 0x00	; 0
    670c:	80 e0       	ldi	r24, 0x00	; 0
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		retry--;
    6714:	8a 81       	ldd	r24, Y+2	; 0x02
    6716:	81 50       	subi	r24, 0x01	; 1
    6718:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    671a:	8a 81       	ldd	r24, Y+2	; 0x02
    671c:	88 23       	and	r24, r24
    671e:	09 f0       	breq	.+2      	; 0x6722 <nm_spi_write+0xf8>
    6720:	9e cf       	rjmp	.-196    	; 0x665e <nm_spi_write+0x34>
	}


	return result;
    6722:	89 81       	ldd	r24, Y+1	; 0x01
}
    6724:	2b 96       	adiw	r28, 0x0b	; 11
    6726:	cd bf       	out	0x3d, r28	; 61
    6728:	de bf       	out	0x3e, r29	; 62
    672a:	df 91       	pop	r29
    672c:	cf 91       	pop	r28
    672e:	1f 91       	pop	r17
    6730:	0f 91       	pop	r16
    6732:	ff 90       	pop	r15
    6734:	ef 90       	pop	r14
    6736:	df 90       	pop	r13
    6738:	cf 90       	pop	r12
    673a:	af 90       	pop	r10
    673c:	08 95       	ret

0000673e <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    673e:	af 92       	push	r10
    6740:	cf 92       	push	r12
    6742:	df 92       	push	r13
    6744:	ef 92       	push	r14
    6746:	ff 92       	push	r15
    6748:	0f 93       	push	r16
    674a:	1f 93       	push	r17
    674c:	cf 93       	push	r28
    674e:	df 93       	push	r29
    6750:	cd b7       	in	r28, 0x3d	; 61
    6752:	de b7       	in	r29, 0x3e	; 62
    6754:	2e 97       	sbiw	r28, 0x0e	; 14
    6756:	cd bf       	out	0x3d, r28	; 61
    6758:	de bf       	out	0x3e, r29	; 62
    675a:	69 87       	std	Y+9, r22	; 0x09
    675c:	7a 87       	std	Y+10, r23	; 0x0a
    675e:	8b 87       	std	Y+11, r24	; 0x0b
    6760:	9c 87       	std	Y+12, r25	; 0x0c
    6762:	4d 87       	std	Y+13, r20	; 0x0d
    6764:	5e 87       	std	Y+14, r21	; 0x0e
	uint8 retry = SPI_RETRY_COUNT;
    6766:	8a e0       	ldi	r24, 0x0A	; 10
    6768:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    676a:	81 e0       	ldi	r24, 0x01	; 1
    676c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_READ;
    676e:	8a ec       	ldi	r24, 0xCA	; 202
    6770:	8b 83       	std	Y+3, r24	; 0x03
	uint8 tmp[4];
	uint8 clockless = 0;
    6772:	1c 82       	std	Y+4, r1	; 0x04

_RETRY_:

	if (addr <= 0xff)
    6774:	89 85       	ldd	r24, Y+9	; 0x09
    6776:	9a 85       	ldd	r25, Y+10	; 0x0a
    6778:	ab 85       	ldd	r26, Y+11	; 0x0b
    677a:	bc 85       	ldd	r27, Y+12	; 0x0c
    677c:	8f 3f       	cpi	r24, 0xFF	; 255
    677e:	91 05       	cpc	r25, r1
    6780:	a1 05       	cpc	r26, r1
    6782:	b1 05       	cpc	r27, r1
    6784:	09 f0       	breq	.+2      	; 0x6788 <spi_read_reg+0x4a>
    6786:	28 f4       	brcc	.+10     	; 0x6792 <spi_read_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    6788:	84 ec       	ldi	r24, 0xC4	; 196
    678a:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    678c:	81 e0       	ldi	r24, 0x01	; 1
    678e:	8c 83       	std	Y+4, r24	; 0x04
    6790:	03 c0       	rjmp	.+6      	; 0x6798 <spi_read_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    6792:	8a ec       	ldi	r24, 0xCA	; 202
    6794:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    6796:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    6798:	89 85       	ldd	r24, Y+9	; 0x09
    679a:	9a 85       	ldd	r25, Y+10	; 0x0a
    679c:	ab 85       	ldd	r26, Y+11	; 0x0b
    679e:	bc 85       	ldd	r27, Y+12	; 0x0c
    67a0:	ac 80       	ldd	r10, Y+4	; 0x04
    67a2:	c1 2c       	mov	r12, r1
    67a4:	d1 2c       	mov	r13, r1
    67a6:	76 01       	movw	r14, r12
    67a8:	68 94       	set
    67aa:	c2 f8       	bld	r12, 2
    67ac:	00 e0       	ldi	r16, 0x00	; 0
    67ae:	10 e0       	ldi	r17, 0x00	; 0
    67b0:	98 01       	movw	r18, r16
    67b2:	ac 01       	movw	r20, r24
    67b4:	bd 01       	movw	r22, r26
    67b6:	8b 81       	ldd	r24, Y+3	; 0x03
    67b8:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
    67bc:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    67be:	8a 81       	ldd	r24, Y+2	; 0x02
    67c0:	81 30       	cpi	r24, 0x01	; 1
    67c2:	09 f0       	breq	.+2      	; 0x67c6 <spi_read_reg+0x88>
    67c4:	46 c0       	rjmp	.+140    	; 0x6852 <spi_read_reg+0x114>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    67c6:	8b 81       	ldd	r24, Y+3	; 0x03
    67c8:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
    67cc:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    67ce:	8a 81       	ldd	r24, Y+2	; 0x02
    67d0:	81 30       	cpi	r24, 0x01	; 1
    67d2:	09 f0       	breq	.+2      	; 0x67d6 <spi_read_reg+0x98>
    67d4:	40 c0       	rjmp	.+128    	; 0x6856 <spi_read_reg+0x118>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    67d6:	ce 01       	movw	r24, r28
    67d8:	05 96       	adiw	r24, 0x05	; 5
    67da:	4c 81       	ldd	r20, Y+4	; 0x04
    67dc:	64 e0       	ldi	r22, 0x04	; 4
    67de:	70 e0       	ldi	r23, 0x00	; 0
    67e0:	0e 94 87 31 	call	0x630e	; 0x630e <spi_data_read>
    67e4:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    67e6:	8a 81       	ldd	r24, Y+2	; 0x02
    67e8:	81 30       	cpi	r24, 0x01	; 1
    67ea:	b9 f5       	brne	.+110    	; 0x685a <spi_read_reg+0x11c>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    67ec:	8d 81       	ldd	r24, Y+5	; 0x05
    67ee:	28 2f       	mov	r18, r24
    67f0:	30 e0       	ldi	r19, 0x00	; 0
    67f2:	40 e0       	ldi	r20, 0x00	; 0
    67f4:	50 e0       	ldi	r21, 0x00	; 0
		((uint32)tmp[1] << 8) |
    67f6:	8e 81       	ldd	r24, Y+6	; 0x06
    67f8:	88 2f       	mov	r24, r24
    67fa:	90 e0       	ldi	r25, 0x00	; 0
    67fc:	a0 e0       	ldi	r26, 0x00	; 0
    67fe:	b0 e0       	ldi	r27, 0x00	; 0
    6800:	ba 2f       	mov	r27, r26
    6802:	a9 2f       	mov	r26, r25
    6804:	98 2f       	mov	r25, r24
    6806:	88 27       	eor	r24, r24
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    6808:	28 2b       	or	r18, r24
    680a:	39 2b       	or	r19, r25
    680c:	4a 2b       	or	r20, r26
    680e:	5b 2b       	or	r21, r27
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    6810:	8f 81       	ldd	r24, Y+7	; 0x07
    6812:	88 2f       	mov	r24, r24
    6814:	90 e0       	ldi	r25, 0x00	; 0
    6816:	a0 e0       	ldi	r26, 0x00	; 0
    6818:	b0 e0       	ldi	r27, 0x00	; 0
    681a:	dc 01       	movw	r26, r24
    681c:	99 27       	eor	r25, r25
    681e:	88 27       	eor	r24, r24
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    6820:	28 2b       	or	r18, r24
    6822:	39 2b       	or	r19, r25
    6824:	4a 2b       	or	r20, r26
    6826:	5b 2b       	or	r21, r27
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    6828:	88 85       	ldd	r24, Y+8	; 0x08
    682a:	88 2f       	mov	r24, r24
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	a0 e0       	ldi	r26, 0x00	; 0
    6830:	b0 e0       	ldi	r27, 0x00	; 0
    6832:	b8 2f       	mov	r27, r24
    6834:	aa 27       	eor	r26, r26
    6836:	99 27       	eor	r25, r25
    6838:	88 27       	eor	r24, r24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    683a:	82 2b       	or	r24, r18
    683c:	93 2b       	or	r25, r19
    683e:	a4 2b       	or	r26, r20
    6840:	b5 2b       	or	r27, r21
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    6842:	2d 85       	ldd	r18, Y+13	; 0x0d
    6844:	3e 85       	ldd	r19, Y+14	; 0x0e
    6846:	f9 01       	movw	r30, r18
    6848:	80 83       	st	Z, r24
    684a:	91 83       	std	Z+1, r25	; 0x01
    684c:	a2 83       	std	Z+2, r26	; 0x02
    684e:	b3 83       	std	Z+3, r27	; 0x03
    6850:	05 c0       	rjmp	.+10     	; 0x685c <spi_read_reg+0x11e>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    6852:	00 00       	nop
    6854:	03 c0       	rjmp	.+6      	; 0x685c <spi_read_reg+0x11e>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    6856:	00 00       	nop
    6858:	01 c0       	rjmp	.+2      	; 0x685c <spi_read_reg+0x11e>

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
    685a:	00 00       	nop
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    685c:	8a 81       	ldd	r24, Y+2	; 0x02
    685e:	81 30       	cpi	r24, 0x01	; 1
    6860:	19 f1       	breq	.+70     	; 0x68a8 <spi_read_reg+0x16a>
	{
		
		nm_bsp_sleep(1);
    6862:	61 e0       	ldi	r22, 0x01	; 1
    6864:	70 e0       	ldi	r23, 0x00	; 0
    6866:	80 e0       	ldi	r24, 0x00	; 0
    6868:	90 e0       	ldi	r25, 0x00	; 0
    686a:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    686e:	a1 2c       	mov	r10, r1
    6870:	c1 2c       	mov	r12, r1
    6872:	d1 2c       	mov	r13, r1
    6874:	76 01       	movw	r14, r12
    6876:	00 e0       	ldi	r16, 0x00	; 0
    6878:	10 e0       	ldi	r17, 0x00	; 0
    687a:	98 01       	movw	r18, r16
    687c:	40 e0       	ldi	r20, 0x00	; 0
    687e:	50 e0       	ldi	r21, 0x00	; 0
    6880:	ba 01       	movw	r22, r20
    6882:	8f ec       	ldi	r24, 0xCF	; 207
    6884:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    6888:	8f ec       	ldi	r24, 0xCF	; 207
    688a:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
    688e:	61 e0       	ldi	r22, 0x01	; 1
    6890:	70 e0       	ldi	r23, 0x00	; 0
    6892:	80 e0       	ldi	r24, 0x00	; 0
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		retry--;
    689a:	89 81       	ldd	r24, Y+1	; 0x01
    689c:	81 50       	subi	r24, 0x01	; 1
    689e:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    68a0:	89 81       	ldd	r24, Y+1	; 0x01
    68a2:	88 23       	and	r24, r24
    68a4:	09 f0       	breq	.+2      	; 0x68a8 <spi_read_reg+0x16a>
    68a6:	66 cf       	rjmp	.-308    	; 0x6774 <spi_read_reg+0x36>
	}
		
	return result;
    68a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    68aa:	2e 96       	adiw	r28, 0x0e	; 14
    68ac:	cd bf       	out	0x3d, r28	; 61
    68ae:	de bf       	out	0x3e, r29	; 62
    68b0:	df 91       	pop	r29
    68b2:	cf 91       	pop	r28
    68b4:	1f 91       	pop	r17
    68b6:	0f 91       	pop	r16
    68b8:	ff 90       	pop	r15
    68ba:	ef 90       	pop	r14
    68bc:	df 90       	pop	r13
    68be:	cf 90       	pop	r12
    68c0:	af 90       	pop	r10
    68c2:	08 95       	ret

000068c4 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    68c4:	af 92       	push	r10
    68c6:	cf 92       	push	r12
    68c8:	df 92       	push	r13
    68ca:	ef 92       	push	r14
    68cc:	ff 92       	push	r15
    68ce:	0f 93       	push	r16
    68d0:	1f 93       	push	r17
    68d2:	cf 93       	push	r28
    68d4:	df 93       	push	r29
    68d6:	cd b7       	in	r28, 0x3d	; 61
    68d8:	de b7       	in	r29, 0x3e	; 62
    68da:	2e 97       	sbiw	r28, 0x0e	; 14
    68dc:	cd bf       	out	0x3d, r28	; 61
    68de:	de bf       	out	0x3e, r29	; 62
    68e0:	6f 83       	std	Y+7, r22	; 0x07
    68e2:	78 87       	std	Y+8, r23	; 0x08
    68e4:	89 87       	std	Y+9, r24	; 0x09
    68e6:	9a 87       	std	Y+10, r25	; 0x0a
    68e8:	4b 87       	std	Y+11, r20	; 0x0b
    68ea:	5c 87       	std	Y+12, r21	; 0x0c
    68ec:	2d 87       	std	Y+13, r18	; 0x0d
    68ee:	3e 87       	std	Y+14, r19	; 0x0e
	uint8 cmd = CMD_DMA_EXT_READ;
    68f0:	88 ec       	ldi	r24, 0xC8	; 200
    68f2:	8c 83       	std	Y+4, r24	; 0x04
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    68f4:	8a e0       	ldi	r24, 0x0A	; 10
    68f6:	8a 83       	std	Y+2, r24	; 0x02
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    68f8:	1b 82       	std	Y+3, r1	; 0x03

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    68fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    68fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    68fe:	01 97       	sbiw	r24, 0x01	; 1
    6900:	31 f4       	brne	.+12     	; 0x690e <nm_spi_read+0x4a>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    6902:	82 e0       	ldi	r24, 0x02	; 2
    6904:	90 e0       	ldi	r25, 0x00	; 0
    6906:	8d 87       	std	Y+13, r24	; 0x0d
    6908:	9e 87       	std	Y+14, r25	; 0x0e
		single_byte_workaround = 1;
    690a:	81 e0       	ldi	r24, 0x01	; 1
    690c:	8b 83       	std	Y+3, r24	; 0x03
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    690e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6910:	9e 85       	ldd	r25, Y+14	; 0x0e
    6912:	9c 01       	movw	r18, r24
    6914:	40 e0       	ldi	r20, 0x00	; 0
    6916:	50 e0       	ldi	r21, 0x00	; 0
    6918:	8f 81       	ldd	r24, Y+7	; 0x07
    691a:	98 85       	ldd	r25, Y+8	; 0x08
    691c:	a9 85       	ldd	r26, Y+9	; 0x09
    691e:	ba 85       	ldd	r27, Y+10	; 0x0a
    6920:	a1 2c       	mov	r10, r1
    6922:	69 01       	movw	r12, r18
    6924:	7a 01       	movw	r14, r20
    6926:	00 e0       	ldi	r16, 0x00	; 0
    6928:	10 e0       	ldi	r17, 0x00	; 0
    692a:	98 01       	movw	r18, r16
    692c:	ac 01       	movw	r20, r24
    692e:	bd 01       	movw	r22, r26
    6930:	8c 81       	ldd	r24, Y+4	; 0x04
    6932:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
    6936:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    6938:	89 81       	ldd	r24, Y+1	; 0x01
    693a:	81 30       	cpi	r24, 0x01	; 1
    693c:	19 f5       	brne	.+70     	; 0x6984 <nm_spi_read+0xc0>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    693e:	8c 81       	ldd	r24, Y+4	; 0x04
    6940:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
    6944:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    6946:	89 81       	ldd	r24, Y+1	; 0x01
    6948:	81 30       	cpi	r24, 0x01	; 1
    694a:	f1 f4       	brne	.+60     	; 0x6988 <nm_spi_read+0xc4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    694c:	8b 81       	ldd	r24, Y+3	; 0x03
    694e:	88 23       	and	r24, r24
    6950:	79 f0       	breq	.+30     	; 0x6970 <nm_spi_read+0xac>
	{
		result = spi_data_read(tmp, size,0);
    6952:	2d 85       	ldd	r18, Y+13	; 0x0d
    6954:	3e 85       	ldd	r19, Y+14	; 0x0e
    6956:	ce 01       	movw	r24, r28
    6958:	05 96       	adiw	r24, 0x05	; 5
    695a:	40 e0       	ldi	r20, 0x00	; 0
    695c:	b9 01       	movw	r22, r18
    695e:	0e 94 87 31 	call	0x630e	; 0x630e <spi_data_read>
    6962:	89 83       	std	Y+1, r24	; 0x01
		buf[0] = tmp[0];
    6964:	2d 81       	ldd	r18, Y+5	; 0x05
    6966:	8b 85       	ldd	r24, Y+11	; 0x0b
    6968:	9c 85       	ldd	r25, Y+12	; 0x0c
    696a:	fc 01       	movw	r30, r24
    696c:	20 83       	st	Z, r18
    696e:	0d c0       	rjmp	.+26     	; 0x698a <nm_spi_read+0xc6>
	}
	else
		result = spi_data_read(buf, size,0);
    6970:	2d 85       	ldd	r18, Y+13	; 0x0d
    6972:	3e 85       	ldd	r19, Y+14	; 0x0e
    6974:	8b 85       	ldd	r24, Y+11	; 0x0b
    6976:	9c 85       	ldd	r25, Y+12	; 0x0c
    6978:	40 e0       	ldi	r20, 0x00	; 0
    697a:	b9 01       	movw	r22, r18
    697c:	0e 94 87 31 	call	0x630e	; 0x630e <spi_data_read>
    6980:	89 83       	std	Y+1, r24	; 0x01
    6982:	03 c0       	rjmp	.+6      	; 0x698a <nm_spi_read+0xc6>
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    6984:	00 00       	nop
    6986:	01 c0       	rjmp	.+2      	; 0x698a <nm_spi_read+0xc6>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    6988:	00 00       	nop
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    698a:	89 81       	ldd	r24, Y+1	; 0x01
    698c:	81 30       	cpi	r24, 0x01	; 1
    698e:	19 f1       	breq	.+70     	; 0x69d6 <nm_spi_read+0x112>
	{
		nm_bsp_sleep(1);
    6990:	61 e0       	ldi	r22, 0x01	; 1
    6992:	70 e0       	ldi	r23, 0x00	; 0
    6994:	80 e0       	ldi	r24, 0x00	; 0
    6996:	90 e0       	ldi	r25, 0x00	; 0
    6998:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    699c:	a1 2c       	mov	r10, r1
    699e:	c1 2c       	mov	r12, r1
    69a0:	d1 2c       	mov	r13, r1
    69a2:	76 01       	movw	r14, r12
    69a4:	00 e0       	ldi	r16, 0x00	; 0
    69a6:	10 e0       	ldi	r17, 0x00	; 0
    69a8:	98 01       	movw	r18, r16
    69aa:	40 e0       	ldi	r20, 0x00	; 0
    69ac:	50 e0       	ldi	r21, 0x00	; 0
    69ae:	ba 01       	movw	r22, r20
    69b0:	8f ec       	ldi	r24, 0xCF	; 207
    69b2:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    69b6:	8f ec       	ldi	r24, 0xCF	; 207
    69b8:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    69bc:	61 e0       	ldi	r22, 0x01	; 1
    69be:	70 e0       	ldi	r23, 0x00	; 0
    69c0:	80 e0       	ldi	r24, 0x00	; 0
    69c2:	90 e0       	ldi	r25, 0x00	; 0
    69c4:	0e 94 a3 18 	call	0x3146	; 0x3146 <nm_bsp_sleep>
		retry--;
    69c8:	8a 81       	ldd	r24, Y+2	; 0x02
    69ca:	81 50       	subi	r24, 0x01	; 1
    69cc:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    69ce:	8a 81       	ldd	r24, Y+2	; 0x02
    69d0:	88 23       	and	r24, r24
    69d2:	09 f0       	breq	.+2      	; 0x69d6 <nm_spi_read+0x112>
    69d4:	92 cf       	rjmp	.-220    	; 0x68fa <nm_spi_read+0x36>
	}

	return result;
    69d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    69d8:	2e 96       	adiw	r28, 0x0e	; 14
    69da:	cd bf       	out	0x3d, r28	; 61
    69dc:	de bf       	out	0x3e, r29	; 62
    69de:	df 91       	pop	r29
    69e0:	cf 91       	pop	r28
    69e2:	1f 91       	pop	r17
    69e4:	0f 91       	pop	r16
    69e6:	ff 90       	pop	r15
    69e8:	ef 90       	pop	r14
    69ea:	df 90       	pop	r13
    69ec:	cf 90       	pop	r12
    69ee:	af 90       	pop	r10
    69f0:	08 95       	ret

000069f2 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    69f2:	cf 93       	push	r28
    69f4:	df 93       	push	r29
    69f6:	00 d0       	rcall	.+0      	; 0x69f8 <spi_init_pkt_sz+0x6>
    69f8:	00 d0       	rcall	.+0      	; 0x69fa <spi_init_pkt_sz+0x8>
    69fa:	cd b7       	in	r28, 0x3d	; 61
    69fc:	de b7       	in	r29, 0x3e	; 62
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    69fe:	64 e2       	ldi	r22, 0x24	; 36
    6a00:	78 ee       	ldi	r23, 0xE8	; 232
    6a02:	80 e0       	ldi	r24, 0x00	; 0
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <nm_spi_read_reg>
    6a0a:	dc 01       	movw	r26, r24
    6a0c:	cb 01       	movw	r24, r22
    6a0e:	89 83       	std	Y+1, r24	; 0x01
    6a10:	9a 83       	std	Y+2, r25	; 0x02
    6a12:	ab 83       	std	Y+3, r26	; 0x03
    6a14:	bc 83       	std	Y+4, r27	; 0x04
	val32 &= ~(0x7 << 4);
    6a16:	89 81       	ldd	r24, Y+1	; 0x01
    6a18:	9a 81       	ldd	r25, Y+2	; 0x02
    6a1a:	ab 81       	ldd	r26, Y+3	; 0x03
    6a1c:	bc 81       	ldd	r27, Y+4	; 0x04
    6a1e:	8f 78       	andi	r24, 0x8F	; 143
    6a20:	89 83       	std	Y+1, r24	; 0x01
    6a22:	9a 83       	std	Y+2, r25	; 0x02
    6a24:	ab 83       	std	Y+3, r26	; 0x03
    6a26:	bc 83       	std	Y+4, r27	; 0x04
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    6a28:	89 81       	ldd	r24, Y+1	; 0x01
    6a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    6a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    6a30:	80 65       	ori	r24, 0x50	; 80
    6a32:	89 83       	std	Y+1, r24	; 0x01
    6a34:	9a 83       	std	Y+2, r25	; 0x02
    6a36:	ab 83       	std	Y+3, r26	; 0x03
    6a38:	bc 83       	std	Y+4, r27	; 0x04
    6a3a:	00 00       	nop

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    6a3c:	89 81       	ldd	r24, Y+1	; 0x01
    6a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a40:	ab 81       	ldd	r26, Y+3	; 0x03
    6a42:	bc 81       	ldd	r27, Y+4	; 0x04
    6a44:	9c 01       	movw	r18, r24
    6a46:	ad 01       	movw	r20, r26
    6a48:	64 e2       	ldi	r22, 0x24	; 36
    6a4a:	78 ee       	ldi	r23, 0xE8	; 232
    6a4c:	80 e0       	ldi	r24, 0x00	; 0
    6a4e:	90 e0       	ldi	r25, 0x00	; 0
    6a50:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <nm_spi_write_reg>
}
    6a54:	00 00       	nop
    6a56:	24 96       	adiw	r28, 0x04	; 4
    6a58:	cd bf       	out	0x3d, r28	; 61
    6a5a:	de bf       	out	0x3e, r29	; 62
    6a5c:	df 91       	pop	r29
    6a5e:	cf 91       	pop	r28
    6a60:	08 95       	ret

00006a62 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    6a62:	af 92       	push	r10
    6a64:	cf 92       	push	r12
    6a66:	df 92       	push	r13
    6a68:	ef 92       	push	r14
    6a6a:	ff 92       	push	r15
    6a6c:	0f 93       	push	r16
    6a6e:	1f 93       	push	r17
    6a70:	cf 93       	push	r28
    6a72:	df 93       	push	r29
    6a74:	cd b7       	in	r28, 0x3d	; 61
    6a76:	de b7       	in	r29, 0x3e	; 62
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    6a78:	a1 2c       	mov	r10, r1
    6a7a:	c1 2c       	mov	r12, r1
    6a7c:	d1 2c       	mov	r13, r1
    6a7e:	76 01       	movw	r14, r12
    6a80:	00 e0       	ldi	r16, 0x00	; 0
    6a82:	10 e0       	ldi	r17, 0x00	; 0
    6a84:	98 01       	movw	r18, r16
    6a86:	40 e0       	ldi	r20, 0x00	; 0
    6a88:	50 e0       	ldi	r21, 0x00	; 0
    6a8a:	ba 01       	movw	r22, r20
    6a8c:	8f ec       	ldi	r24, 0xCF	; 207
    6a8e:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    6a92:	8f ec       	ldi	r24, 0xCF	; 207
    6a94:	0e 94 39 31 	call	0x6272	; 0x6272 <spi_cmd_rsp>
	return M2M_SUCCESS;
    6a98:	80 e0       	ldi	r24, 0x00	; 0
}
    6a9a:	df 91       	pop	r29
    6a9c:	cf 91       	pop	r28
    6a9e:	1f 91       	pop	r17
    6aa0:	0f 91       	pop	r16
    6aa2:	ff 90       	pop	r15
    6aa4:	ef 90       	pop	r14
    6aa6:	df 90       	pop	r13
    6aa8:	cf 90       	pop	r12
    6aaa:	af 90       	pop	r10
    6aac:	08 95       	ret

00006aae <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    6aae:	cf 93       	push	r28
    6ab0:	df 93       	push	r29
    6ab2:	cd b7       	in	r28, 0x3d	; 61
    6ab4:	de b7       	in	r29, 0x3e	; 62
    6ab6:	28 97       	sbiw	r28, 0x08	; 8
    6ab8:	cd bf       	out	0x3d, r28	; 61
    6aba:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    6abc:	1d 82       	std	Y+5, r1	; 0x05
    6abe:	1e 82       	std	Y+6, r1	; 0x06
    6ac0:	1f 82       	std	Y+7, r1	; 0x07
    6ac2:	18 86       	std	Y+8, r1	; 0x08
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    6ac4:	10 92 e8 28 	sts	0x28E8, r1	; 0x8028e8 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    6ac8:	ce 01       	movw	r24, r28
    6aca:	05 96       	adiw	r24, 0x05	; 5
    6acc:	ac 01       	movw	r20, r24
    6ace:	64 e2       	ldi	r22, 0x24	; 36
    6ad0:	78 ee       	ldi	r23, 0xE8	; 232
    6ad2:	80 e0       	ldi	r24, 0x00	; 0
    6ad4:	90 e0       	ldi	r25, 0x00	; 0
    6ad6:	0e 94 9f 33 	call	0x673e	; 0x673e <spi_read_reg>
    6ada:	88 23       	and	r24, r24
    6adc:	81 f4       	brne	.+32     	; 0x6afe <nm_spi_init+0x50>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    6ade:	81 e0       	ldi	r24, 0x01	; 1
    6ae0:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    6ae4:	ce 01       	movw	r24, r28
    6ae6:	05 96       	adiw	r24, 0x05	; 5
    6ae8:	ac 01       	movw	r20, r24
    6aea:	64 e2       	ldi	r22, 0x24	; 36
    6aec:	78 ee       	ldi	r23, 0xE8	; 232
    6aee:	80 e0       	ldi	r24, 0x00	; 0
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	0e 94 9f 33 	call	0x673e	; 0x673e <spi_read_reg>
    6af6:	88 23       	and	r24, r24
    6af8:	11 f4       	brne	.+4      	; 0x6afe <nm_spi_init+0x50>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
    6afa:	80 e0       	ldi	r24, 0x00	; 0
    6afc:	42 c0       	rjmp	.+132    	; 0x6b82 <nm_spi_init+0xd4>
		}
	}
	if(gu8Crc_off == 0)
    6afe:	80 91 e8 28 	lds	r24, 0x28E8	; 0x8028e8 <gu8Crc_off>
    6b02:	88 23       	and	r24, r24
    6b04:	71 f5       	brne	.+92     	; 0x6b62 <nm_spi_init+0xb4>
	{
		reg &= ~0xc;	/* disable crc checking */
    6b06:	8d 81       	ldd	r24, Y+5	; 0x05
    6b08:	9e 81       	ldd	r25, Y+6	; 0x06
    6b0a:	af 81       	ldd	r26, Y+7	; 0x07
    6b0c:	b8 85       	ldd	r27, Y+8	; 0x08
    6b0e:	83 7f       	andi	r24, 0xF3	; 243
    6b10:	8d 83       	std	Y+5, r24	; 0x05
    6b12:	9e 83       	std	Y+6, r25	; 0x06
    6b14:	af 83       	std	Y+7, r26	; 0x07
    6b16:	b8 87       	std	Y+8, r27	; 0x08
		reg &= ~0x70;
    6b18:	8d 81       	ldd	r24, Y+5	; 0x05
    6b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b1c:	af 81       	ldd	r26, Y+7	; 0x07
    6b1e:	b8 85       	ldd	r27, Y+8	; 0x08
    6b20:	8f 78       	andi	r24, 0x8F	; 143
    6b22:	8d 83       	std	Y+5, r24	; 0x05
    6b24:	9e 83       	std	Y+6, r25	; 0x06
    6b26:	af 83       	std	Y+7, r26	; 0x07
    6b28:	b8 87       	std	Y+8, r27	; 0x08
		reg |= (0x5 << 4);
    6b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    6b2e:	af 81       	ldd	r26, Y+7	; 0x07
    6b30:	b8 85       	ldd	r27, Y+8	; 0x08
    6b32:	80 65       	ori	r24, 0x50	; 80
    6b34:	8d 83       	std	Y+5, r24	; 0x05
    6b36:	9e 83       	std	Y+6, r25	; 0x06
    6b38:	af 83       	std	Y+7, r26	; 0x07
    6b3a:	b8 87       	std	Y+8, r27	; 0x08
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    6b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    6b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    6b40:	af 81       	ldd	r26, Y+7	; 0x07
    6b42:	b8 85       	ldd	r27, Y+8	; 0x08
    6b44:	9c 01       	movw	r18, r24
    6b46:	ad 01       	movw	r20, r26
    6b48:	64 e2       	ldi	r22, 0x24	; 36
    6b4a:	78 ee       	ldi	r23, 0xE8	; 232
    6b4c:	80 e0       	ldi	r24, 0x00	; 0
    6b4e:	90 e0       	ldi	r25, 0x00	; 0
    6b50:	0e 94 95 32 	call	0x652a	; 0x652a <spi_write_reg>
    6b54:	88 23       	and	r24, r24
    6b56:	11 f4       	brne	.+4      	; 0x6b5c <nm_spi_init+0xae>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
    6b58:	80 e0       	ldi	r24, 0x00	; 0
    6b5a:	13 c0       	rjmp	.+38     	; 0x6b82 <nm_spi_init+0xd4>
		}
		gu8Crc_off = 1;
    6b5c:	81 e0       	ldi	r24, 0x01	; 1
    6b5e:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <gu8Crc_off>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    6b62:	ce 01       	movw	r24, r28
    6b64:	01 96       	adiw	r24, 0x01	; 1
    6b66:	ac 01       	movw	r20, r24
    6b68:	60 e0       	ldi	r22, 0x00	; 0
    6b6a:	70 e1       	ldi	r23, 0x10	; 16
    6b6c:	80 e0       	ldi	r24, 0x00	; 0
    6b6e:	90 e0       	ldi	r25, 0x00	; 0
    6b70:	0e 94 9f 33 	call	0x673e	; 0x673e <spi_read_reg>
    6b74:	88 23       	and	r24, r24
    6b76:	11 f4       	brne	.+4      	; 0x6b7c <nm_spi_init+0xce>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    6b78:	8a ef       	ldi	r24, 0xFA	; 250
    6b7a:	03 c0       	rjmp	.+6      	; 0x6b82 <nm_spi_init+0xd4>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    6b7c:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <spi_init_pkt_sz>


	return M2M_SUCCESS;
    6b80:	80 e0       	ldi	r24, 0x00	; 0
}
    6b82:	28 96       	adiw	r28, 0x08	; 8
    6b84:	cd bf       	out	0x3d, r28	; 61
    6b86:	de bf       	out	0x3e, r29	; 62
    6b88:	df 91       	pop	r29
    6b8a:	cf 91       	pop	r28
    6b8c:	08 95       	ret

00006b8e <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    6b8e:	cf 93       	push	r28
    6b90:	df 93       	push	r29
    6b92:	cd b7       	in	r28, 0x3d	; 61
    6b94:	de b7       	in	r29, 0x3e	; 62
	gu8Crc_off = 0;
    6b96:	10 92 e8 28 	sts	0x28E8, r1	; 0x8028e8 <gu8Crc_off>
	return M2M_SUCCESS;
    6b9a:	80 e0       	ldi	r24, 0x00	; 0
}
    6b9c:	df 91       	pop	r29
    6b9e:	cf 91       	pop	r28
    6ba0:	08 95       	ret

00006ba2 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    6ba2:	cf 93       	push	r28
    6ba4:	df 93       	push	r29
    6ba6:	cd b7       	in	r28, 0x3d	; 61
    6ba8:	de b7       	in	r29, 0x3e	; 62
    6baa:	28 97       	sbiw	r28, 0x08	; 8
    6bac:	cd bf       	out	0x3d, r28	; 61
    6bae:	de bf       	out	0x3e, r29	; 62
    6bb0:	6d 83       	std	Y+5, r22	; 0x05
    6bb2:	7e 83       	std	Y+6, r23	; 0x06
    6bb4:	8f 83       	std	Y+7, r24	; 0x07
    6bb6:	98 87       	std	Y+8, r25	; 0x08
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    6bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    6bba:	9e 81       	ldd	r25, Y+6	; 0x06
    6bbc:	af 81       	ldd	r26, Y+7	; 0x07
    6bbe:	b8 85       	ldd	r27, Y+8	; 0x08
    6bc0:	9e 01       	movw	r18, r28
    6bc2:	2f 5f       	subi	r18, 0xFF	; 255
    6bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    6bc6:	a9 01       	movw	r20, r18
    6bc8:	bc 01       	movw	r22, r24
    6bca:	cd 01       	movw	r24, r26
    6bcc:	0e 94 9f 33 	call	0x673e	; 0x673e <spi_read_reg>

	return u32Val;
    6bd0:	89 81       	ldd	r24, Y+1	; 0x01
    6bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd4:	ab 81       	ldd	r26, Y+3	; 0x03
    6bd6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    6bd8:	bc 01       	movw	r22, r24
    6bda:	cd 01       	movw	r24, r26
    6bdc:	28 96       	adiw	r28, 0x08	; 8
    6bde:	cd bf       	out	0x3d, r28	; 61
    6be0:	de bf       	out	0x3e, r29	; 62
    6be2:	df 91       	pop	r29
    6be4:	cf 91       	pop	r28
    6be6:	08 95       	ret

00006be8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    6be8:	cf 93       	push	r28
    6bea:	df 93       	push	r29
    6bec:	cd b7       	in	r28, 0x3d	; 61
    6bee:	de b7       	in	r29, 0x3e	; 62
    6bf0:	27 97       	sbiw	r28, 0x07	; 7
    6bf2:	cd bf       	out	0x3d, r28	; 61
    6bf4:	de bf       	out	0x3e, r29	; 62
    6bf6:	6a 83       	std	Y+2, r22	; 0x02
    6bf8:	7b 83       	std	Y+3, r23	; 0x03
    6bfa:	8c 83       	std	Y+4, r24	; 0x04
    6bfc:	9d 83       	std	Y+5, r25	; 0x05
    6bfe:	4e 83       	std	Y+6, r20	; 0x06
    6c00:	5f 83       	std	Y+7, r21	; 0x07
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    6c02:	2e 81       	ldd	r18, Y+6	; 0x06
    6c04:	3f 81       	ldd	r19, Y+7	; 0x07
    6c06:	8a 81       	ldd	r24, Y+2	; 0x02
    6c08:	9b 81       	ldd	r25, Y+3	; 0x03
    6c0a:	ac 81       	ldd	r26, Y+4	; 0x04
    6c0c:	bd 81       	ldd	r27, Y+5	; 0x05
    6c0e:	a9 01       	movw	r20, r18
    6c10:	bc 01       	movw	r22, r24
    6c12:	cd 01       	movw	r24, r26
    6c14:	0e 94 9f 33 	call	0x673e	; 0x673e <spi_read_reg>
    6c18:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6c1a:	89 81       	ldd	r24, Y+1	; 0x01
    6c1c:	81 30       	cpi	r24, 0x01	; 1
    6c1e:	11 f4       	brne	.+4      	; 0x6c24 <nm_spi_read_reg_with_ret+0x3c>
    6c20:	19 82       	std	Y+1, r1	; 0x01
    6c22:	02 c0       	rjmp	.+4      	; 0x6c28 <nm_spi_read_reg_with_ret+0x40>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6c24:	8a ef       	ldi	r24, 0xFA	; 250
    6c26:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    6c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    6c2a:	27 96       	adiw	r28, 0x07	; 7
    6c2c:	cd bf       	out	0x3d, r28	; 61
    6c2e:	de bf       	out	0x3e, r29	; 62
    6c30:	df 91       	pop	r29
    6c32:	cf 91       	pop	r28
    6c34:	08 95       	ret

00006c36 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    6c36:	cf 93       	push	r28
    6c38:	df 93       	push	r29
    6c3a:	cd b7       	in	r28, 0x3d	; 61
    6c3c:	de b7       	in	r29, 0x3e	; 62
    6c3e:	29 97       	sbiw	r28, 0x09	; 9
    6c40:	cd bf       	out	0x3d, r28	; 61
    6c42:	de bf       	out	0x3e, r29	; 62
    6c44:	6a 83       	std	Y+2, r22	; 0x02
    6c46:	7b 83       	std	Y+3, r23	; 0x03
    6c48:	8c 83       	std	Y+4, r24	; 0x04
    6c4a:	9d 83       	std	Y+5, r25	; 0x05
    6c4c:	2e 83       	std	Y+6, r18	; 0x06
    6c4e:	3f 83       	std	Y+7, r19	; 0x07
    6c50:	48 87       	std	Y+8, r20	; 0x08
    6c52:	59 87       	std	Y+9, r21	; 0x09
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    6c54:	2e 81       	ldd	r18, Y+6	; 0x06
    6c56:	3f 81       	ldd	r19, Y+7	; 0x07
    6c58:	48 85       	ldd	r20, Y+8	; 0x08
    6c5a:	59 85       	ldd	r21, Y+9	; 0x09
    6c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    6c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    6c60:	ac 81       	ldd	r26, Y+4	; 0x04
    6c62:	bd 81       	ldd	r27, Y+5	; 0x05
    6c64:	bc 01       	movw	r22, r24
    6c66:	cd 01       	movw	r24, r26
    6c68:	0e 94 95 32 	call	0x652a	; 0x652a <spi_write_reg>
    6c6c:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6c6e:	89 81       	ldd	r24, Y+1	; 0x01
    6c70:	81 30       	cpi	r24, 0x01	; 1
    6c72:	11 f4       	brne	.+4      	; 0x6c78 <nm_spi_write_reg+0x42>
    6c74:	19 82       	std	Y+1, r1	; 0x01
    6c76:	02 c0       	rjmp	.+4      	; 0x6c7c <nm_spi_write_reg+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6c78:	8a ef       	ldi	r24, 0xFA	; 250
    6c7a:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    6c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    6c7e:	29 96       	adiw	r28, 0x09	; 9
    6c80:	cd bf       	out	0x3d, r28	; 61
    6c82:	de bf       	out	0x3e, r29	; 62
    6c84:	df 91       	pop	r29
    6c86:	cf 91       	pop	r28
    6c88:	08 95       	ret

00006c8a <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6c8a:	cf 93       	push	r28
    6c8c:	df 93       	push	r29
    6c8e:	cd b7       	in	r28, 0x3d	; 61
    6c90:	de b7       	in	r29, 0x3e	; 62
    6c92:	29 97       	sbiw	r28, 0x09	; 9
    6c94:	cd bf       	out	0x3d, r28	; 61
    6c96:	de bf       	out	0x3e, r29	; 62
    6c98:	6a 83       	std	Y+2, r22	; 0x02
    6c9a:	7b 83       	std	Y+3, r23	; 0x03
    6c9c:	8c 83       	std	Y+4, r24	; 0x04
    6c9e:	9d 83       	std	Y+5, r25	; 0x05
    6ca0:	4e 83       	std	Y+6, r20	; 0x06
    6ca2:	5f 83       	std	Y+7, r21	; 0x07
    6ca4:	28 87       	std	Y+8, r18	; 0x08
    6ca6:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    6ca8:	28 85       	ldd	r18, Y+8	; 0x08
    6caa:	39 85       	ldd	r19, Y+9	; 0x09
    6cac:	4e 81       	ldd	r20, Y+6	; 0x06
    6cae:	5f 81       	ldd	r21, Y+7	; 0x07
    6cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    6cb4:	ac 81       	ldd	r26, Y+4	; 0x04
    6cb6:	bd 81       	ldd	r27, Y+5	; 0x05
    6cb8:	bc 01       	movw	r22, r24
    6cba:	cd 01       	movw	r24, r26
    6cbc:	0e 94 62 34 	call	0x68c4	; 0x68c4 <nm_spi_read>
    6cc0:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6cc2:	89 81       	ldd	r24, Y+1	; 0x01
    6cc4:	81 30       	cpi	r24, 0x01	; 1
    6cc6:	11 f4       	brne	.+4      	; 0x6ccc <nm_spi_read_block+0x42>
    6cc8:	19 82       	std	Y+1, r1	; 0x01
    6cca:	02 c0       	rjmp	.+4      	; 0x6cd0 <nm_spi_read_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6ccc:	8a ef       	ldi	r24, 0xFA	; 250
    6cce:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    6cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    6cd2:	29 96       	adiw	r28, 0x09	; 9
    6cd4:	cd bf       	out	0x3d, r28	; 61
    6cd6:	de bf       	out	0x3e, r29	; 62
    6cd8:	df 91       	pop	r29
    6cda:	cf 91       	pop	r28
    6cdc:	08 95       	ret

00006cde <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6cde:	cf 93       	push	r28
    6ce0:	df 93       	push	r29
    6ce2:	cd b7       	in	r28, 0x3d	; 61
    6ce4:	de b7       	in	r29, 0x3e	; 62
    6ce6:	29 97       	sbiw	r28, 0x09	; 9
    6ce8:	cd bf       	out	0x3d, r28	; 61
    6cea:	de bf       	out	0x3e, r29	; 62
    6cec:	6a 83       	std	Y+2, r22	; 0x02
    6cee:	7b 83       	std	Y+3, r23	; 0x03
    6cf0:	8c 83       	std	Y+4, r24	; 0x04
    6cf2:	9d 83       	std	Y+5, r25	; 0x05
    6cf4:	4e 83       	std	Y+6, r20	; 0x06
    6cf6:	5f 83       	std	Y+7, r21	; 0x07
    6cf8:	28 87       	std	Y+8, r18	; 0x08
    6cfa:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    6cfc:	28 85       	ldd	r18, Y+8	; 0x08
    6cfe:	39 85       	ldd	r19, Y+9	; 0x09
    6d00:	4e 81       	ldd	r20, Y+6	; 0x06
    6d02:	5f 81       	ldd	r21, Y+7	; 0x07
    6d04:	8a 81       	ldd	r24, Y+2	; 0x02
    6d06:	9b 81       	ldd	r25, Y+3	; 0x03
    6d08:	ac 81       	ldd	r26, Y+4	; 0x04
    6d0a:	bd 81       	ldd	r27, Y+5	; 0x05
    6d0c:	bc 01       	movw	r22, r24
    6d0e:	cd 01       	movw	r24, r26
    6d10:	0e 94 15 33 	call	0x662a	; 0x662a <nm_spi_write>
    6d14:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6d16:	89 81       	ldd	r24, Y+1	; 0x01
    6d18:	81 30       	cpi	r24, 0x01	; 1
    6d1a:	11 f4       	brne	.+4      	; 0x6d20 <nm_spi_write_block+0x42>
    6d1c:	19 82       	std	Y+1, r1	; 0x01
    6d1e:	02 c0       	rjmp	.+4      	; 0x6d24 <nm_spi_write_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6d20:	8a ef       	ldi	r24, 0xFA	; 250
    6d22:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    6d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d26:	29 96       	adiw	r28, 0x09	; 9
    6d28:	cd bf       	out	0x3d, r28	; 61
    6d2a:	de bf       	out	0x3e, r29	; 62
    6d2c:	df 91       	pop	r29
    6d2e:	cf 91       	pop	r28
    6d30:	08 95       	ret

00006d32 <Socket_ReadSocketData>:
*********************************************************************/
sint8 getsockopt(SOCKET sock, uint8 u8Level, uint8 u8OptName, const void *pvOptValue, uint8* pu8OptLen)
{
	/* TBD */
	return M2M_SUCCESS;
}
    6d32:	ef 92       	push	r14
    6d34:	ff 92       	push	r15
    6d36:	0f 93       	push	r16
    6d38:	1f 93       	push	r17
    6d3a:	cf 93       	push	r28
    6d3c:	df 93       	push	r29
    6d3e:	cd b7       	in	r28, 0x3d	; 61
    6d40:	de b7       	in	r29, 0x3e	; 62
    6d42:	63 97       	sbiw	r28, 0x13	; 19
    6d44:	cd bf       	out	0x3d, r28	; 61
    6d46:	de bf       	out	0x3e, r29	; 62
    6d48:	8a 87       	std	Y+10, r24	; 0x0a
    6d4a:	6b 87       	std	Y+11, r22	; 0x0b
    6d4c:	7c 87       	std	Y+12, r23	; 0x0c
    6d4e:	4d 87       	std	Y+13, r20	; 0x0d
    6d50:	0e 87       	std	Y+14, r16	; 0x0e
    6d52:	1f 87       	std	Y+15, r17	; 0x0f
    6d54:	28 8b       	std	Y+16, r18	; 0x10
    6d56:	39 8b       	std	Y+17, r19	; 0x11
    6d58:	ea 8a       	std	Y+18, r14	; 0x12
    6d5a:	fb 8a       	std	Y+19, r15	; 0x13
    6d5c:	8a 89       	ldd	r24, Y+18	; 0x12
    6d5e:	9b 89       	ldd	r25, Y+19	; 0x13
    6d60:	89 2b       	or	r24, r25
    6d62:	09 f4       	brne	.+2      	; 0x6d66 <Socket_ReadSocketData+0x34>
    6d64:	10 c1       	rjmp	.+544    	; 0x6f86 <Socket_ReadSocketData+0x254>
    6d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d68:	28 2f       	mov	r18, r24
    6d6a:	88 0f       	add	r24, r24
    6d6c:	33 0b       	sbc	r19, r19
    6d6e:	4b e0       	ldi	r20, 0x0B	; 11
    6d70:	42 9f       	mul	r20, r18
    6d72:	c0 01       	movw	r24, r0
    6d74:	43 9f       	mul	r20, r19
    6d76:	90 0d       	add	r25, r0
    6d78:	11 24       	eor	r1, r1
    6d7a:	8c 50       	subi	r24, 0x0C	; 12
    6d7c:	96 4d       	sbci	r25, 0xD6	; 214
    6d7e:	fc 01       	movw	r30, r24
    6d80:	80 81       	ld	r24, Z
    6d82:	91 81       	ldd	r25, Z+1	; 0x01
    6d84:	89 2b       	or	r24, r25
    6d86:	09 f4       	brne	.+2      	; 0x6d8a <Socket_ReadSocketData+0x58>
    6d88:	fe c0       	rjmp	.+508    	; 0x6f86 <Socket_ReadSocketData+0x254>
    6d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d8c:	28 2f       	mov	r18, r24
    6d8e:	88 0f       	add	r24, r24
    6d90:	33 0b       	sbc	r19, r19
    6d92:	4b e0       	ldi	r20, 0x0B	; 11
    6d94:	42 9f       	mul	r20, r18
    6d96:	c0 01       	movw	r24, r0
    6d98:	43 9f       	mul	r20, r19
    6d9a:	90 0d       	add	r25, r0
    6d9c:	11 24       	eor	r1, r1
    6d9e:	8a 50       	subi	r24, 0x0A	; 10
    6da0:	96 4d       	sbci	r25, 0xD6	; 214
    6da2:	fc 01       	movw	r30, r24
    6da4:	80 81       	ld	r24, Z
    6da6:	91 81       	ldd	r25, Z+1	; 0x01
    6da8:	89 2b       	or	r24, r25
    6daa:	09 f4       	brne	.+2      	; 0x6dae <Socket_ReadSocketData+0x7c>
    6dac:	ec c0       	rjmp	.+472    	; 0x6f86 <Socket_ReadSocketData+0x254>
    6dae:	8a 85       	ldd	r24, Y+10	; 0x0a
    6db0:	28 2f       	mov	r18, r24
    6db2:	88 0f       	add	r24, r24
    6db4:	33 0b       	sbc	r19, r19
    6db6:	4b e0       	ldi	r20, 0x0B	; 11
    6db8:	42 9f       	mul	r20, r18
    6dba:	c0 01       	movw	r24, r0
    6dbc:	43 9f       	mul	r20, r19
    6dbe:	90 0d       	add	r25, r0
    6dc0:	11 24       	eor	r1, r1
    6dc2:	84 50       	subi	r24, 0x04	; 4
    6dc4:	96 4d       	sbci	r25, 0xD6	; 214
    6dc6:	fc 01       	movw	r30, r24
    6dc8:	80 81       	ld	r24, Z
    6dca:	81 30       	cpi	r24, 0x01	; 1
    6dcc:	09 f0       	breq	.+2      	; 0x6dd0 <Socket_ReadSocketData+0x9e>
    6dce:	db c0       	rjmp	.+438    	; 0x6f86 <Socket_ReadSocketData+0x254>
    6dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    6dd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    6dd4:	a8 89       	ldd	r26, Y+16	; 0x10
    6dd6:	b9 89       	ldd	r27, Y+17	; 0x11
    6dd8:	89 83       	std	Y+1, r24	; 0x01
    6dda:	9a 83       	std	Y+2, r25	; 0x02
    6ddc:	ab 83       	std	Y+3, r26	; 0x03
    6dde:	bc 83       	std	Y+4, r27	; 0x04
    6de0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6de2:	9c 85       	ldd	r25, Y+12	; 0x0c
    6de4:	2a 89       	ldd	r18, Y+18	; 0x12
    6de6:	3b 89       	ldd	r19, Y+19	; 0x13
    6de8:	fc 01       	movw	r30, r24
    6dea:	24 83       	std	Z+4, r18	; 0x04
    6dec:	35 83       	std	Z+5, r19	; 0x05
    6dee:	81 e0       	ldi	r24, 0x01	; 1
    6df0:	8f 83       	std	Y+7, r24	; 0x07
    6df2:	8a 89       	ldd	r24, Y+18	; 0x12
    6df4:	9b 89       	ldd	r25, Y+19	; 0x13
    6df6:	8d 83       	std	Y+5, r24	; 0x05
    6df8:	9e 83       	std	Y+6, r25	; 0x06
    6dfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    6dfc:	28 2f       	mov	r18, r24
    6dfe:	88 0f       	add	r24, r24
    6e00:	33 0b       	sbc	r19, r19
    6e02:	4b e0       	ldi	r20, 0x0B	; 11
    6e04:	42 9f       	mul	r20, r18
    6e06:	c0 01       	movw	r24, r0
    6e08:	43 9f       	mul	r20, r19
    6e0a:	90 0d       	add	r25, r0
    6e0c:	11 24       	eor	r1, r1
    6e0e:	8a 50       	subi	r24, 0x0A	; 10
    6e10:	96 4d       	sbci	r25, 0xD6	; 214
    6e12:	fc 01       	movw	r30, r24
    6e14:	80 81       	ld	r24, Z
    6e16:	91 81       	ldd	r25, Z+1	; 0x01
    6e18:	2d 81       	ldd	r18, Y+5	; 0x05
    6e1a:	3e 81       	ldd	r19, Y+6	; 0x06
    6e1c:	a9 01       	movw	r20, r18
    6e1e:	48 1b       	sub	r20, r24
    6e20:	59 0b       	sbc	r21, r25
    6e22:	ca 01       	movw	r24, r20
    6e24:	88 87       	std	Y+8, r24	; 0x08
    6e26:	99 87       	std	Y+9, r25	; 0x09
    6e28:	88 85       	ldd	r24, Y+8	; 0x08
    6e2a:	99 85       	ldd	r25, Y+9	; 0x09
    6e2c:	18 16       	cp	r1, r24
    6e2e:	19 06       	cpc	r1, r25
    6e30:	94 f4       	brge	.+36     	; 0x6e56 <Socket_ReadSocketData+0x124>
    6e32:	1f 82       	std	Y+7, r1	; 0x07
    6e34:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e36:	28 2f       	mov	r18, r24
    6e38:	88 0f       	add	r24, r24
    6e3a:	33 0b       	sbc	r19, r19
    6e3c:	4b e0       	ldi	r20, 0x0B	; 11
    6e3e:	42 9f       	mul	r20, r18
    6e40:	c0 01       	movw	r24, r0
    6e42:	43 9f       	mul	r20, r19
    6e44:	90 0d       	add	r25, r0
    6e46:	11 24       	eor	r1, r1
    6e48:	8a 50       	subi	r24, 0x0A	; 10
    6e4a:	96 4d       	sbci	r25, 0xD6	; 214
    6e4c:	fc 01       	movw	r30, r24
    6e4e:	80 81       	ld	r24, Z
    6e50:	91 81       	ldd	r25, Z+1	; 0x01
    6e52:	8d 83       	std	Y+5, r24	; 0x05
    6e54:	9e 83       	std	Y+6, r25	; 0x06
    6e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e58:	28 2f       	mov	r18, r24
    6e5a:	88 0f       	add	r24, r24
    6e5c:	33 0b       	sbc	r19, r19
    6e5e:	4b e0       	ldi	r20, 0x0B	; 11
    6e60:	42 9f       	mul	r20, r18
    6e62:	c0 01       	movw	r24, r0
    6e64:	43 9f       	mul	r20, r19
    6e66:	90 0d       	add	r25, r0
    6e68:	11 24       	eor	r1, r1
    6e6a:	8c 50       	subi	r24, 0x0C	; 12
    6e6c:	96 4d       	sbci	r25, 0xD6	; 214
    6e6e:	fc 01       	movw	r30, r24
    6e70:	40 81       	ld	r20, Z
    6e72:	51 81       	ldd	r21, Z+1	; 0x01
    6e74:	2d 81       	ldd	r18, Y+5	; 0x05
    6e76:	3e 81       	ldd	r19, Y+6	; 0x06
    6e78:	89 81       	ldd	r24, Y+1	; 0x01
    6e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e7c:	ab 81       	ldd	r26, Y+3	; 0x03
    6e7e:	bc 81       	ldd	r27, Y+4	; 0x04
    6e80:	0f 81       	ldd	r16, Y+7	; 0x07
    6e82:	bc 01       	movw	r22, r24
    6e84:	cd 01       	movw	r24, r26
    6e86:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    6e8a:	88 23       	and	r24, r24
    6e8c:	09 f0       	breq	.+2      	; 0x6e90 <Socket_ReadSocketData+0x15e>
    6e8e:	7a c0       	rjmp	.+244    	; 0x6f84 <Socket_ReadSocketData+0x252>
    6e90:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e92:	28 2f       	mov	r18, r24
    6e94:	88 0f       	add	r24, r24
    6e96:	33 0b       	sbc	r19, r19
    6e98:	4b e0       	ldi	r20, 0x0B	; 11
    6e9a:	42 9f       	mul	r20, r18
    6e9c:	c0 01       	movw	r24, r0
    6e9e:	43 9f       	mul	r20, r19
    6ea0:	90 0d       	add	r25, r0
    6ea2:	11 24       	eor	r1, r1
    6ea4:	8c 50       	subi	r24, 0x0C	; 12
    6ea6:	96 4d       	sbci	r25, 0xD6	; 214
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	20 81       	ld	r18, Z
    6eac:	31 81       	ldd	r19, Z+1	; 0x01
    6eae:	8b 85       	ldd	r24, Y+11	; 0x0b
    6eb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    6eb2:	fc 01       	movw	r30, r24
    6eb4:	20 83       	st	Z, r18
    6eb6:	31 83       	std	Z+1, r19	; 0x01
    6eb8:	2d 81       	ldd	r18, Y+5	; 0x05
    6eba:	3e 81       	ldd	r19, Y+6	; 0x06
    6ebc:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
    6ec0:	fc 01       	movw	r30, r24
    6ec2:	22 83       	std	Z+2, r18	; 0x02
    6ec4:	33 83       	std	Z+3, r19	; 0x03
    6ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
    6eca:	fc 01       	movw	r30, r24
    6ecc:	24 81       	ldd	r18, Z+4	; 0x04
    6ece:	35 81       	ldd	r19, Z+5	; 0x05
    6ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    6ed4:	28 1b       	sub	r18, r24
    6ed6:	39 0b       	sbc	r19, r25
    6ed8:	8b 85       	ldd	r24, Y+11	; 0x0b
    6eda:	9c 85       	ldd	r25, Y+12	; 0x0c
    6edc:	fc 01       	movw	r30, r24
    6ede:	24 83       	std	Z+4, r18	; 0x04
    6ee0:	35 83       	std	Z+5, r19	; 0x05
    6ee2:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    6ee6:	90 91 6e 2a 	lds	r25, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    6eea:	89 2b       	or	r24, r25
    6eec:	59 f0       	breq	.+22     	; 0x6f04 <Socket_ReadSocketData+0x1d2>
    6eee:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    6ef2:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    6ef6:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ef8:	9c 85       	ldd	r25, Y+12	; 0x0c
    6efa:	ac 01       	movw	r20, r24
    6efc:	6d 85       	ldd	r22, Y+13	; 0x0d
    6efe:	8a 85       	ldd	r24, Y+10	; 0x0a
    6f00:	f9 01       	movw	r30, r18
    6f02:	09 95       	icall
    6f04:	2a 89       	ldd	r18, Y+18	; 0x12
    6f06:	3b 89       	ldd	r19, Y+19	; 0x13
    6f08:	8d 81       	ldd	r24, Y+5	; 0x05
    6f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    6f0c:	a9 01       	movw	r20, r18
    6f0e:	48 1b       	sub	r20, r24
    6f10:	59 0b       	sbc	r21, r25
    6f12:	ca 01       	movw	r24, r20
    6f14:	8a 8b       	std	Y+18, r24	; 0x12
    6f16:	9b 8b       	std	Y+19, r25	; 0x13
    6f18:	8d 81       	ldd	r24, Y+5	; 0x05
    6f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6f1c:	cc 01       	movw	r24, r24
    6f1e:	a0 e0       	ldi	r26, 0x00	; 0
    6f20:	b0 e0       	ldi	r27, 0x00	; 0
    6f22:	29 81       	ldd	r18, Y+1	; 0x01
    6f24:	3a 81       	ldd	r19, Y+2	; 0x02
    6f26:	4b 81       	ldd	r20, Y+3	; 0x03
    6f28:	5c 81       	ldd	r21, Y+4	; 0x04
    6f2a:	82 0f       	add	r24, r18
    6f2c:	93 1f       	adc	r25, r19
    6f2e:	a4 1f       	adc	r26, r20
    6f30:	b5 1f       	adc	r27, r21
    6f32:	89 83       	std	Y+1, r24	; 0x01
    6f34:	9a 83       	std	Y+2, r25	; 0x02
    6f36:	ab 83       	std	Y+3, r26	; 0x03
    6f38:	bc 83       	std	Y+4, r27	; 0x04
    6f3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    6f3c:	28 2f       	mov	r18, r24
    6f3e:	88 0f       	add	r24, r24
    6f40:	33 0b       	sbc	r19, r19
    6f42:	4b e0       	ldi	r20, 0x0B	; 11
    6f44:	42 9f       	mul	r20, r18
    6f46:	c0 01       	movw	r24, r0
    6f48:	43 9f       	mul	r20, r19
    6f4a:	90 0d       	add	r25, r0
    6f4c:	11 24       	eor	r1, r1
    6f4e:	84 50       	subi	r24, 0x04	; 4
    6f50:	96 4d       	sbci	r25, 0xD6	; 214
    6f52:	fc 01       	movw	r30, r24
    6f54:	80 81       	ld	r24, Z
    6f56:	88 23       	and	r24, r24
    6f58:	79 f4       	brne	.+30     	; 0x6f78 <Socket_ReadSocketData+0x246>
    6f5a:	8a 89       	ldd	r24, Y+18	; 0x12
    6f5c:	9b 89       	ldd	r25, Y+19	; 0x13
    6f5e:	89 2b       	or	r24, r25
    6f60:	59 f0       	breq	.+22     	; 0x6f78 <Socket_ReadSocketData+0x246>
    6f62:	01 e0       	ldi	r16, 0x01	; 1
    6f64:	20 e0       	ldi	r18, 0x00	; 0
    6f66:	30 e0       	ldi	r19, 0x00	; 0
    6f68:	40 e0       	ldi	r20, 0x00	; 0
    6f6a:	50 e0       	ldi	r21, 0x00	; 0
    6f6c:	60 e0       	ldi	r22, 0x00	; 0
    6f6e:	70 e0       	ldi	r23, 0x00	; 0
    6f70:	cb 01       	movw	r24, r22
    6f72:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    6f76:	07 c0       	rjmp	.+14     	; 0x6f86 <Socket_ReadSocketData+0x254>
    6f78:	8a 89       	ldd	r24, Y+18	; 0x12
    6f7a:	9b 89       	ldd	r25, Y+19	; 0x13
    6f7c:	89 2b       	or	r24, r25
    6f7e:	09 f0       	breq	.+2      	; 0x6f82 <Socket_ReadSocketData+0x250>
    6f80:	36 cf       	rjmp	.-404    	; 0x6dee <Socket_ReadSocketData+0xbc>
    6f82:	01 c0       	rjmp	.+2      	; 0x6f86 <Socket_ReadSocketData+0x254>
    6f84:	00 00       	nop
    6f86:	00 00       	nop
    6f88:	63 96       	adiw	r28, 0x13	; 19
    6f8a:	cd bf       	out	0x3d, r28	; 61
    6f8c:	de bf       	out	0x3e, r29	; 62
    6f8e:	df 91       	pop	r29
    6f90:	cf 91       	pop	r28
    6f92:	1f 91       	pop	r17
    6f94:	0f 91       	pop	r16
    6f96:	ff 90       	pop	r15
    6f98:	ef 90       	pop	r14
    6f9a:	08 95       	ret

00006f9c <m2m_ip_cb>:
    6f9c:	ef 92       	push	r14
    6f9e:	ff 92       	push	r15
    6fa0:	0f 93       	push	r16
    6fa2:	1f 93       	push	r17
    6fa4:	cf 93       	push	r28
    6fa6:	df 93       	push	r29
    6fa8:	cd b7       	in	r28, 0x3d	; 61
    6faa:	de b7       	in	r29, 0x3e	; 62
    6fac:	cc 5c       	subi	r28, 0xCC	; 204
    6fae:	d1 09       	sbc	r29, r1
    6fb0:	cd bf       	out	0x3d, r28	; 61
    6fb2:	de bf       	out	0x3e, r29	; 62
    6fb4:	fe 01       	movw	r30, r28
    6fb6:	ec 53       	subi	r30, 0x3C	; 60
    6fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    6fba:	80 83       	st	Z, r24
    6fbc:	ce 01       	movw	r24, r28
    6fbe:	8b 53       	subi	r24, 0x3B	; 59
    6fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc2:	dc 01       	movw	r26, r24
    6fc4:	6d 93       	st	X+, r22
    6fc6:	7c 93       	st	X, r23
    6fc8:	ce 01       	movw	r24, r28
    6fca:	89 53       	subi	r24, 0x39	; 57
    6fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    6fce:	fc 01       	movw	r30, r24
    6fd0:	20 83       	st	Z, r18
    6fd2:	31 83       	std	Z+1, r19	; 0x01
    6fd4:	42 83       	std	Z+2, r20	; 0x02
    6fd6:	53 83       	std	Z+3, r21	; 0x03
    6fd8:	ce 01       	movw	r24, r28
    6fda:	8c 53       	subi	r24, 0x3C	; 60
    6fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    6fde:	dc 01       	movw	r26, r24
    6fe0:	8c 91       	ld	r24, X
    6fe2:	81 34       	cpi	r24, 0x41	; 65
    6fe4:	39 f0       	breq	.+14     	; 0x6ff4 <m2m_ip_cb+0x58>
    6fe6:	ce 01       	movw	r24, r28
    6fe8:	8c 53       	subi	r24, 0x3C	; 60
    6fea:	9f 4f       	sbci	r25, 0xFF	; 255
    6fec:	fc 01       	movw	r30, r24
    6fee:	80 81       	ld	r24, Z
    6ff0:	84 35       	cpi	r24, 0x54	; 84
    6ff2:	59 f5       	brne	.+86     	; 0x704a <m2m_ip_cb+0xae>
    6ff4:	ae 01       	movw	r20, r28
    6ff6:	41 5f       	subi	r20, 0xF1	; 241
    6ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    6ffa:	ce 01       	movw	r24, r28
    6ffc:	89 53       	subi	r24, 0x39	; 57
    6ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    7000:	fc 01       	movw	r30, r24
    7002:	80 81       	ld	r24, Z
    7004:	91 81       	ldd	r25, Z+1	; 0x01
    7006:	a2 81       	ldd	r26, Z+2	; 0x02
    7008:	b3 81       	ldd	r27, Z+3	; 0x03
    700a:	00 e0       	ldi	r16, 0x00	; 0
    700c:	24 e0       	ldi	r18, 0x04	; 4
    700e:	30 e0       	ldi	r19, 0x00	; 0
    7010:	bc 01       	movw	r22, r24
    7012:	cd 01       	movw	r24, r26
    7014:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    7018:	88 23       	and	r24, r24
    701a:	09 f0       	breq	.+2      	; 0x701e <m2m_ip_cb+0x82>
    701c:	70 c3       	rjmp	.+1760   	; 0x76fe <m2m_ip_cb+0x762>
    701e:	88 89       	ldd	r24, Y+16	; 0x10
    7020:	8b 8b       	std	Y+19, r24	; 0x13
    7022:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    7026:	90 91 6e 2a 	lds	r25, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    702a:	89 2b       	or	r24, r25
    702c:	09 f4       	brne	.+2      	; 0x7030 <m2m_ip_cb+0x94>
    702e:	67 c3       	rjmp	.+1742   	; 0x76fe <m2m_ip_cb+0x762>
    7030:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    7034:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    7038:	7f 85       	ldd	r23, Y+15	; 0x0f
    703a:	ce 01       	movw	r24, r28
    703c:	43 96       	adiw	r24, 0x13	; 19
    703e:	ac 01       	movw	r20, r24
    7040:	61 e0       	ldi	r22, 0x01	; 1
    7042:	87 2f       	mov	r24, r23
    7044:	f9 01       	movw	r30, r18
    7046:	09 95       	icall
    7048:	5a c3       	rjmp	.+1716   	; 0x76fe <m2m_ip_cb+0x762>
    704a:	ce 01       	movw	r24, r28
    704c:	8c 53       	subi	r24, 0x3C	; 60
    704e:	9f 4f       	sbci	r25, 0xFF	; 255
    7050:	dc 01       	movw	r26, r24
    7052:	8c 91       	ld	r24, X
    7054:	82 34       	cpi	r24, 0x42	; 66
    7056:	59 f5       	brne	.+86     	; 0x70ae <m2m_ip_cb+0x112>
    7058:	ae 01       	movw	r20, r28
    705a:	4c 5e       	subi	r20, 0xEC	; 236
    705c:	5f 4f       	sbci	r21, 0xFF	; 255
    705e:	ce 01       	movw	r24, r28
    7060:	89 53       	subi	r24, 0x39	; 57
    7062:	9f 4f       	sbci	r25, 0xFF	; 255
    7064:	fc 01       	movw	r30, r24
    7066:	80 81       	ld	r24, Z
    7068:	91 81       	ldd	r25, Z+1	; 0x01
    706a:	a2 81       	ldd	r26, Z+2	; 0x02
    706c:	b3 81       	ldd	r27, Z+3	; 0x03
    706e:	00 e0       	ldi	r16, 0x00	; 0
    7070:	24 e0       	ldi	r18, 0x04	; 4
    7072:	30 e0       	ldi	r19, 0x00	; 0
    7074:	bc 01       	movw	r22, r24
    7076:	cd 01       	movw	r24, r26
    7078:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    707c:	88 23       	and	r24, r24
    707e:	09 f0       	breq	.+2      	; 0x7082 <m2m_ip_cb+0xe6>
    7080:	45 c3       	rjmp	.+1674   	; 0x770c <m2m_ip_cb+0x770>
    7082:	8d 89       	ldd	r24, Y+21	; 0x15
    7084:	88 8f       	std	Y+24, r24	; 0x18
    7086:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    708a:	90 91 6e 2a 	lds	r25, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    708e:	89 2b       	or	r24, r25
    7090:	09 f4       	brne	.+2      	; 0x7094 <m2m_ip_cb+0xf8>
    7092:	3c c3       	rjmp	.+1656   	; 0x770c <m2m_ip_cb+0x770>
    7094:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    7098:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    709c:	7c 89       	ldd	r23, Y+20	; 0x14
    709e:	ce 01       	movw	r24, r28
    70a0:	48 96       	adiw	r24, 0x18	; 24
    70a2:	ac 01       	movw	r20, r24
    70a4:	62 e0       	ldi	r22, 0x02	; 2
    70a6:	87 2f       	mov	r24, r23
    70a8:	f9 01       	movw	r30, r18
    70aa:	09 95       	icall
    70ac:	2f c3       	rjmp	.+1630   	; 0x770c <m2m_ip_cb+0x770>
    70ae:	ce 01       	movw	r24, r28
    70b0:	8c 53       	subi	r24, 0x3C	; 60
    70b2:	9f 4f       	sbci	r25, 0xFF	; 255
    70b4:	dc 01       	movw	r26, r24
    70b6:	8c 91       	ld	r24, X
    70b8:	83 34       	cpi	r24, 0x43	; 67
    70ba:	09 f0       	breq	.+2      	; 0x70be <m2m_ip_cb+0x122>
    70bc:	a9 c0       	rjmp	.+338    	; 0x7210 <m2m_ip_cb+0x274>
    70be:	ae 01       	movw	r20, r28
    70c0:	47 5e       	subi	r20, 0xE7	; 231
    70c2:	5f 4f       	sbci	r21, 0xFF	; 255
    70c4:	ce 01       	movw	r24, r28
    70c6:	89 53       	subi	r24, 0x39	; 57
    70c8:	9f 4f       	sbci	r25, 0xFF	; 255
    70ca:	fc 01       	movw	r30, r24
    70cc:	80 81       	ld	r24, Z
    70ce:	91 81       	ldd	r25, Z+1	; 0x01
    70d0:	a2 81       	ldd	r26, Z+2	; 0x02
    70d2:	b3 81       	ldd	r27, Z+3	; 0x03
    70d4:	00 e0       	ldi	r16, 0x00	; 0
    70d6:	2c e0       	ldi	r18, 0x0C	; 12
    70d8:	30 e0       	ldi	r19, 0x00	; 0
    70da:	bc 01       	movw	r22, r24
    70dc:	cd 01       	movw	r24, r26
    70de:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    70e2:	88 23       	and	r24, r24
    70e4:	09 f0       	breq	.+2      	; 0x70e8 <m2m_ip_cb+0x14c>
    70e6:	12 c3       	rjmp	.+1572   	; 0x770c <m2m_ip_cb+0x770>
    70e8:	8a a1       	ldd	r24, Y+34	; 0x22
    70ea:	88 23       	and	r24, r24
    70ec:	0c f4       	brge	.+2      	; 0x70f0 <m2m_ip_cb+0x154>
    70ee:	6a c0       	rjmp	.+212    	; 0x71c4 <m2m_ip_cb+0x228>
    70f0:	8a a1       	ldd	r24, Y+34	; 0x22
    70f2:	28 2f       	mov	r18, r24
    70f4:	88 0f       	add	r24, r24
    70f6:	33 0b       	sbc	r19, r19
    70f8:	89 a1       	ldd	r24, Y+33	; 0x21
    70fa:	48 2f       	mov	r20, r24
    70fc:	88 0f       	add	r24, r24
    70fe:	55 0b       	sbc	r21, r21
    7100:	6b e0       	ldi	r22, 0x0B	; 11
    7102:	64 9f       	mul	r22, r20
    7104:	c0 01       	movw	r24, r0
    7106:	65 9f       	mul	r22, r21
    7108:	90 0d       	add	r25, r0
    710a:	11 24       	eor	r1, r1
    710c:	83 50       	subi	r24, 0x03	; 3
    710e:	96 4d       	sbci	r25, 0xD6	; 214
    7110:	dc 01       	movw	r26, r24
    7112:	4c 91       	ld	r20, X
    7114:	5b e0       	ldi	r21, 0x0B	; 11
    7116:	52 9f       	mul	r21, r18
    7118:	c0 01       	movw	r24, r0
    711a:	53 9f       	mul	r21, r19
    711c:	90 0d       	add	r25, r0
    711e:	11 24       	eor	r1, r1
    7120:	83 50       	subi	r24, 0x03	; 3
    7122:	96 4d       	sbci	r25, 0xD6	; 214
    7124:	fc 01       	movw	r30, r24
    7126:	40 83       	st	Z, r20
    7128:	8a a1       	ldd	r24, Y+34	; 0x22
    712a:	28 2f       	mov	r18, r24
    712c:	88 0f       	add	r24, r24
    712e:	33 0b       	sbc	r19, r19
    7130:	4b e0       	ldi	r20, 0x0B	; 11
    7132:	42 9f       	mul	r20, r18
    7134:	c0 01       	movw	r24, r0
    7136:	43 9f       	mul	r20, r19
    7138:	90 0d       	add	r25, r0
    713a:	11 24       	eor	r1, r1
    713c:	84 50       	subi	r24, 0x04	; 4
    713e:	96 4d       	sbci	r25, 0xD6	; 214
    7140:	21 e0       	ldi	r18, 0x01	; 1
    7142:	dc 01       	movw	r26, r24
    7144:	2c 93       	st	X, r18
    7146:	8a a1       	ldd	r24, Y+34	; 0x22
    7148:	48 2f       	mov	r20, r24
    714a:	88 0f       	add	r24, r24
    714c:	55 0b       	sbc	r21, r21
    714e:	8b a1       	ldd	r24, Y+35	; 0x23
    7150:	9c a1       	ldd	r25, Y+36	; 0x24
    7152:	9c 01       	movw	r18, r24
    7154:	28 50       	subi	r18, 0x08	; 8
    7156:	31 09       	sbc	r19, r1
    7158:	6b e0       	ldi	r22, 0x0B	; 11
    715a:	64 9f       	mul	r22, r20
    715c:	c0 01       	movw	r24, r0
    715e:	65 9f       	mul	r22, r21
    7160:	90 0d       	add	r25, r0
    7162:	11 24       	eor	r1, r1
    7164:	86 50       	subi	r24, 0x06	; 6
    7166:	96 4d       	sbci	r25, 0xD6	; 214
    7168:	fc 01       	movw	r30, r24
    716a:	20 83       	st	Z, r18
    716c:	31 83       	std	Z+1, r19	; 0x01
    716e:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <gu16SessionID>
    7172:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    7176:	01 96       	adiw	r24, 0x01	; 1
    7178:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <gu16SessionID>
    717c:	90 93 ea 28 	sts	0x28EA, r25	; 0x8028ea <gu16SessionID+0x1>
    7180:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <gu16SessionID>
    7184:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    7188:	89 2b       	or	r24, r25
    718a:	49 f4       	brne	.+18     	; 0x719e <m2m_ip_cb+0x202>
    718c:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <gu16SessionID>
    7190:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    7194:	01 96       	adiw	r24, 0x01	; 1
    7196:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <gu16SessionID>
    719a:	90 93 ea 28 	sts	0x28EA, r25	; 0x8028ea <gu16SessionID+0x1>
    719e:	8a a1       	ldd	r24, Y+34	; 0x22
    71a0:	48 2f       	mov	r20, r24
    71a2:	88 0f       	add	r24, r24
    71a4:	55 0b       	sbc	r21, r21
    71a6:	20 91 e9 28 	lds	r18, 0x28E9	; 0x8028e9 <gu16SessionID>
    71aa:	30 91 ea 28 	lds	r19, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    71ae:	6b e0       	ldi	r22, 0x0B	; 11
    71b0:	64 9f       	mul	r22, r20
    71b2:	c0 01       	movw	r24, r0
    71b4:	65 9f       	mul	r22, r21
    71b6:	90 0d       	add	r25, r0
    71b8:	11 24       	eor	r1, r1
    71ba:	88 50       	subi	r24, 0x08	; 8
    71bc:	96 4d       	sbci	r25, 0xD6	; 214
    71be:	dc 01       	movw	r26, r24
    71c0:	2d 93       	st	X+, r18
    71c2:	3c 93       	st	X, r19
    71c4:	8a a1       	ldd	r24, Y+34	; 0x22
    71c6:	8d a3       	std	Y+37, r24	; 0x25
    71c8:	82 e0       	ldi	r24, 0x02	; 2
    71ca:	90 e0       	ldi	r25, 0x00	; 0
    71cc:	8e a3       	std	Y+38, r24	; 0x26
    71ce:	9f a3       	std	Y+39, r25	; 0x27
    71d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71d4:	88 a7       	std	Y+40, r24	; 0x28
    71d6:	99 a7       	std	Y+41, r25	; 0x29
    71d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    71da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    71dc:	af 8d       	ldd	r26, Y+31	; 0x1f
    71de:	b8 a1       	ldd	r27, Y+32	; 0x20
    71e0:	8a a7       	std	Y+42, r24	; 0x2a
    71e2:	9b a7       	std	Y+43, r25	; 0x2b
    71e4:	ac a7       	std	Y+44, r26	; 0x2c
    71e6:	bd a7       	std	Y+45, r27	; 0x2d
    71e8:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    71ec:	90 91 6e 2a 	lds	r25, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    71f0:	89 2b       	or	r24, r25
    71f2:	09 f4       	brne	.+2      	; 0x71f6 <m2m_ip_cb+0x25a>
    71f4:	8b c2       	rjmp	.+1302   	; 0x770c <m2m_ip_cb+0x770>
    71f6:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    71fa:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    71fe:	79 a1       	ldd	r23, Y+33	; 0x21
    7200:	ce 01       	movw	r24, r28
    7202:	85 96       	adiw	r24, 0x25	; 37
    7204:	ac 01       	movw	r20, r24
    7206:	64 e0       	ldi	r22, 0x04	; 4
    7208:	87 2f       	mov	r24, r23
    720a:	f9 01       	movw	r30, r18
    720c:	09 95       	icall
    720e:	7e c2       	rjmp	.+1276   	; 0x770c <m2m_ip_cb+0x770>
    7210:	ce 01       	movw	r24, r28
    7212:	8c 53       	subi	r24, 0x3C	; 60
    7214:	9f 4f       	sbci	r25, 0xFF	; 255
    7216:	dc 01       	movw	r26, r24
    7218:	8c 91       	ld	r24, X
    721a:	84 34       	cpi	r24, 0x44	; 68
    721c:	41 f0       	breq	.+16     	; 0x722e <m2m_ip_cb+0x292>
    721e:	ce 01       	movw	r24, r28
    7220:	8c 53       	subi	r24, 0x3C	; 60
    7222:	9f 4f       	sbci	r25, 0xFF	; 255
    7224:	fc 01       	movw	r30, r24
    7226:	80 81       	ld	r24, Z
    7228:	8b 34       	cpi	r24, 0x4B	; 75
    722a:	09 f0       	breq	.+2      	; 0x722e <m2m_ip_cb+0x292>
    722c:	44 c0       	rjmp	.+136    	; 0x72b6 <m2m_ip_cb+0x31a>
    722e:	ae 01       	movw	r20, r28
    7230:	4a 5c       	subi	r20, 0xCA	; 202
    7232:	5f 4f       	sbci	r21, 0xFF	; 255
    7234:	ce 01       	movw	r24, r28
    7236:	89 53       	subi	r24, 0x39	; 57
    7238:	9f 4f       	sbci	r25, 0xFF	; 255
    723a:	fc 01       	movw	r30, r24
    723c:	80 81       	ld	r24, Z
    723e:	91 81       	ldd	r25, Z+1	; 0x01
    7240:	a2 81       	ldd	r26, Z+2	; 0x02
    7242:	b3 81       	ldd	r27, Z+3	; 0x03
    7244:	00 e0       	ldi	r16, 0x00	; 0
    7246:	24 e0       	ldi	r18, 0x04	; 4
    7248:	30 e0       	ldi	r19, 0x00	; 0
    724a:	bc 01       	movw	r22, r24
    724c:	cd 01       	movw	r24, r26
    724e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    7252:	88 23       	and	r24, r24
    7254:	09 f0       	breq	.+2      	; 0x7258 <m2m_ip_cb+0x2bc>
    7256:	55 c2       	rjmp	.+1194   	; 0x7702 <m2m_ip_cb+0x766>
    7258:	8e a9       	ldd	r24, Y+54	; 0x36
    725a:	8a af       	std	Y+58, r24	; 0x3a
    725c:	8f a9       	ldd	r24, Y+55	; 0x37
    725e:	8b af       	std	Y+59, r24	; 0x3b
    7260:	8f a9       	ldd	r24, Y+55	; 0x37
    7262:	88 23       	and	r24, r24
    7264:	a1 f4       	brne	.+40     	; 0x728e <m2m_ip_cb+0x2f2>
    7266:	8e a9       	ldd	r24, Y+54	; 0x36
    7268:	48 2f       	mov	r20, r24
    726a:	88 0f       	add	r24, r24
    726c:	55 0b       	sbc	r21, r21
    726e:	88 ad       	ldd	r24, Y+56	; 0x38
    7270:	99 ad       	ldd	r25, Y+57	; 0x39
    7272:	9c 01       	movw	r18, r24
    7274:	28 50       	subi	r18, 0x08	; 8
    7276:	31 09       	sbc	r19, r1
    7278:	6b e0       	ldi	r22, 0x0B	; 11
    727a:	64 9f       	mul	r22, r20
    727c:	c0 01       	movw	r24, r0
    727e:	65 9f       	mul	r22, r21
    7280:	90 0d       	add	r25, r0
    7282:	11 24       	eor	r1, r1
    7284:	86 50       	subi	r24, 0x06	; 6
    7286:	96 4d       	sbci	r25, 0xD6	; 214
    7288:	dc 01       	movw	r26, r24
    728a:	2d 93       	st	X+, r18
    728c:	3c 93       	st	X, r19
    728e:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    7292:	90 91 6e 2a 	lds	r25, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    7296:	89 2b       	or	r24, r25
    7298:	09 f4       	brne	.+2      	; 0x729c <m2m_ip_cb+0x300>
    729a:	33 c2       	rjmp	.+1126   	; 0x7702 <m2m_ip_cb+0x766>
    729c:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    72a0:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    72a4:	7e a9       	ldd	r23, Y+54	; 0x36
    72a6:	ce 01       	movw	r24, r28
    72a8:	ca 96       	adiw	r24, 0x3a	; 58
    72aa:	ac 01       	movw	r20, r24
    72ac:	65 e0       	ldi	r22, 0x05	; 5
    72ae:	87 2f       	mov	r24, r23
    72b0:	f9 01       	movw	r30, r18
    72b2:	09 95       	icall
    72b4:	26 c2       	rjmp	.+1100   	; 0x7702 <m2m_ip_cb+0x766>
    72b6:	ce 01       	movw	r24, r28
    72b8:	8c 53       	subi	r24, 0x3C	; 60
    72ba:	9f 4f       	sbci	r25, 0xFF	; 255
    72bc:	dc 01       	movw	r26, r24
    72be:	8c 91       	ld	r24, X
    72c0:	8a 34       	cpi	r24, 0x4A	; 74
    72c2:	99 f5       	brne	.+102    	; 0x732a <m2m_ip_cb+0x38e>
    72c4:	ae 01       	movw	r20, r28
    72c6:	40 58       	subi	r20, 0x80	; 128
    72c8:	5f 4f       	sbci	r21, 0xFF	; 255
    72ca:	ce 01       	movw	r24, r28
    72cc:	89 53       	subi	r24, 0x39	; 57
    72ce:	9f 4f       	sbci	r25, 0xFF	; 255
    72d0:	fc 01       	movw	r30, r24
    72d2:	80 81       	ld	r24, Z
    72d4:	91 81       	ldd	r25, Z+1	; 0x01
    72d6:	a2 81       	ldd	r26, Z+2	; 0x02
    72d8:	b3 81       	ldd	r27, Z+3	; 0x03
    72da:	00 e0       	ldi	r16, 0x00	; 0
    72dc:	24 e4       	ldi	r18, 0x44	; 68
    72de:	30 e0       	ldi	r19, 0x00	; 0
    72e0:	bc 01       	movw	r22, r24
    72e2:	cd 01       	movw	r24, r26
    72e4:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    72e8:	88 23       	and	r24, r24
    72ea:	09 f0       	breq	.+2      	; 0x72ee <m2m_ip_cb+0x352>
    72ec:	0f c2       	rjmp	.+1054   	; 0x770c <m2m_ip_cb+0x770>
    72ee:	80 91 71 2a 	lds	r24, 0x2A71	; 0x802a71 <gpfAppResolveCb>
    72f2:	90 91 72 2a 	lds	r25, 0x2A72	; 0x802a72 <gpfAppResolveCb+0x1>
    72f6:	89 2b       	or	r24, r25
    72f8:	09 f4       	brne	.+2      	; 0x72fc <m2m_ip_cb+0x360>
    72fa:	08 c2       	rjmp	.+1040   	; 0x770c <m2m_ip_cb+0x770>
    72fc:	20 91 71 2a 	lds	r18, 0x2A71	; 0x802a71 <gpfAppResolveCb>
    7300:	30 91 72 2a 	lds	r19, 0x2A72	; 0x802a72 <gpfAppResolveCb+0x1>
    7304:	ce 01       	movw	r24, r28
    7306:	80 58       	subi	r24, 0x80	; 128
    7308:	9f 4f       	sbci	r25, 0xFF	; 255
    730a:	80 5c       	subi	r24, 0xC0	; 192
    730c:	9f 4f       	sbci	r25, 0xFF	; 255
    730e:	fc 01       	movw	r30, r24
    7310:	80 81       	ld	r24, Z
    7312:	91 81       	ldd	r25, Z+1	; 0x01
    7314:	a2 81       	ldd	r26, Z+2	; 0x02
    7316:	b3 81       	ldd	r27, Z+3	; 0x03
    7318:	fe 01       	movw	r30, r28
    731a:	e0 58       	subi	r30, 0x80	; 128
    731c:	ff 4f       	sbci	r31, 0xFF	; 255
    731e:	ac 01       	movw	r20, r24
    7320:	bd 01       	movw	r22, r26
    7322:	cf 01       	movw	r24, r30
    7324:	f9 01       	movw	r30, r18
    7326:	09 95       	icall
    7328:	f1 c1       	rjmp	.+994    	; 0x770c <m2m_ip_cb+0x770>
    732a:	ce 01       	movw	r24, r28
    732c:	8c 53       	subi	r24, 0x3C	; 60
    732e:	9f 4f       	sbci	r25, 0xFF	; 255
    7330:	dc 01       	movw	r26, r24
    7332:	8c 91       	ld	r24, X
    7334:	86 34       	cpi	r24, 0x46	; 70
    7336:	79 f0       	breq	.+30     	; 0x7356 <m2m_ip_cb+0x3ba>
    7338:	ce 01       	movw	r24, r28
    733a:	8c 53       	subi	r24, 0x3C	; 60
    733c:	9f 4f       	sbci	r25, 0xFF	; 255
    733e:	fc 01       	movw	r30, r24
    7340:	80 81       	ld	r24, Z
    7342:	88 34       	cpi	r24, 0x48	; 72
    7344:	41 f0       	breq	.+16     	; 0x7356 <m2m_ip_cb+0x3ba>
    7346:	ce 01       	movw	r24, r28
    7348:	8c 53       	subi	r24, 0x3C	; 60
    734a:	9f 4f       	sbci	r25, 0xFF	; 255
    734c:	dc 01       	movw	r26, r24
    734e:	8c 91       	ld	r24, X
    7350:	8d 34       	cpi	r24, 0x4D	; 77
    7352:	09 f0       	breq	.+2      	; 0x7356 <m2m_ip_cb+0x3ba>
    7354:	fc c0       	rjmp	.+504    	; 0x754e <m2m_ip_cb+0x5b2>
    7356:	86 e0       	ldi	r24, 0x06	; 6
    7358:	89 83       	std	Y+1, r24	; 0x01
    735a:	ce 01       	movw	r24, r28
    735c:	8c 53       	subi	r24, 0x3C	; 60
    735e:	9f 4f       	sbci	r25, 0xFF	; 255
    7360:	fc 01       	movw	r30, r24
    7362:	80 81       	ld	r24, Z
    7364:	88 34       	cpi	r24, 0x48	; 72
    7366:	11 f4       	brne	.+4      	; 0x736c <m2m_ip_cb+0x3d0>
    7368:	89 e0       	ldi	r24, 0x09	; 9
    736a:	89 83       	std	Y+1, r24	; 0x01
    736c:	80 e1       	ldi	r24, 0x10	; 16
    736e:	90 e0       	ldi	r25, 0x00	; 0
    7370:	8e 83       	std	Y+6, r24	; 0x06
    7372:	9f 83       	std	Y+7, r25	; 0x07
    7374:	2e 81       	ldd	r18, Y+6	; 0x06
    7376:	3f 81       	ldd	r19, Y+7	; 0x07
    7378:	ae 01       	movw	r20, r28
    737a:	44 5c       	subi	r20, 0xC4	; 196
    737c:	5f 4f       	sbci	r21, 0xFF	; 255
    737e:	ce 01       	movw	r24, r28
    7380:	89 53       	subi	r24, 0x39	; 57
    7382:	9f 4f       	sbci	r25, 0xFF	; 255
    7384:	fc 01       	movw	r30, r24
    7386:	80 81       	ld	r24, Z
    7388:	91 81       	ldd	r25, Z+1	; 0x01
    738a:	a2 81       	ldd	r26, Z+2	; 0x02
    738c:	b3 81       	ldd	r27, Z+3	; 0x03
    738e:	00 e0       	ldi	r16, 0x00	; 0
    7390:	bc 01       	movw	r22, r24
    7392:	cd 01       	movw	r24, r26
    7394:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    7398:	88 23       	and	r24, r24
    739a:	09 f0       	breq	.+2      	; 0x739e <m2m_ip_cb+0x402>
    739c:	b4 c1       	rjmp	.+872    	; 0x7706 <m2m_ip_cb+0x76a>
    739e:	18 86       	std	Y+8, r1	; 0x08
    73a0:	19 86       	std	Y+9, r1	; 0x09
    73a2:	ce 01       	movw	r24, r28
    73a4:	88 5b       	subi	r24, 0xB8	; 184
    73a6:	9f 4f       	sbci	r25, 0xFF	; 255
    73a8:	dc 01       	movw	r26, r24
    73aa:	8c 91       	ld	r24, X
    73ac:	8a 87       	std	Y+10, r24	; 0x0a
    73ae:	ce 01       	movw	r24, r28
    73b0:	86 5b       	subi	r24, 0xB6	; 182
    73b2:	9f 4f       	sbci	r25, 0xFF	; 255
    73b4:	fc 01       	movw	r30, r24
    73b6:	80 81       	ld	r24, Z
    73b8:	91 81       	ldd	r25, Z+1	; 0x01
    73ba:	88 87       	std	Y+8, r24	; 0x08
    73bc:	99 87       	std	Y+9, r25	; 0x09
    73be:	8a 85       	ldd	r24, Y+10	; 0x0a
    73c0:	28 2f       	mov	r18, r24
    73c2:	88 0f       	add	r24, r24
    73c4:	33 0b       	sbc	r19, r19
    73c6:	4b e0       	ldi	r20, 0x0B	; 11
    73c8:	42 9f       	mul	r20, r18
    73ca:	c0 01       	movw	r24, r0
    73cc:	43 9f       	mul	r20, r19
    73ce:	90 0d       	add	r25, r0
    73d0:	11 24       	eor	r1, r1
    73d2:	82 50       	subi	r24, 0x02	; 2
    73d4:	96 4d       	sbci	r25, 0xD6	; 214
    73d6:	dc 01       	movw	r26, r24
    73d8:	1c 92       	st	X, r1
    73da:	ce 01       	movw	r24, r28
    73dc:	8c 5b       	subi	r24, 0xBC	; 188
    73de:	9f 4f       	sbci	r25, 0xFF	; 255
    73e0:	fc 01       	movw	r30, r24
    73e2:	80 81       	ld	r24, Z
    73e4:	91 81       	ldd	r25, Z+1	; 0x01
    73e6:	8b 87       	std	Y+11, r24	; 0x0b
    73e8:	9c 87       	std	Y+12, r25	; 0x0c
    73ea:	ce 01       	movw	r24, r28
    73ec:	8a 5b       	subi	r24, 0xBA	; 186
    73ee:	9f 4f       	sbci	r25, 0xFF	; 255
    73f0:	dc 01       	movw	r26, r24
    73f2:	8d 91       	ld	r24, X+
    73f4:	9c 91       	ld	r25, X
    73f6:	8d 87       	std	Y+13, r24	; 0x0d
    73f8:	9e 87       	std	Y+14, r25	; 0x0e
    73fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    73fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    73fe:	ce 01       	movw	r24, r28
    7400:	84 5b       	subi	r24, 0xB4	; 180
    7402:	9f 4f       	sbci	r25, 0xFF	; 255
    7404:	fc 01       	movw	r30, r24
    7406:	20 87       	std	Z+8, r18	; 0x08
    7408:	31 87       	std	Z+9, r19	; 0x09
    740a:	ce 01       	movw	r24, r28
    740c:	80 5c       	subi	r24, 0xC0	; 192
    740e:	9f 4f       	sbci	r25, 0xFF	; 255
    7410:	fc 01       	movw	r30, r24
    7412:	80 81       	ld	r24, Z
    7414:	91 81       	ldd	r25, Z+1	; 0x01
    7416:	a2 81       	ldd	r26, Z+2	; 0x02
    7418:	b3 81       	ldd	r27, Z+3	; 0x03
    741a:	9e 01       	movw	r18, r28
    741c:	24 5b       	subi	r18, 0xB4	; 180
    741e:	3f 4f       	sbci	r19, 0xFF	; 255
    7420:	f9 01       	movw	r30, r18
    7422:	82 87       	std	Z+10, r24	; 0x0a
    7424:	93 87       	std	Z+11, r25	; 0x0b
    7426:	a4 87       	std	Z+12, r26	; 0x0c
    7428:	b5 87       	std	Z+13, r27	; 0x0d
    742a:	8a 85       	ldd	r24, Y+10	; 0x0a
    742c:	28 2f       	mov	r18, r24
    742e:	88 0f       	add	r24, r24
    7430:	33 0b       	sbc	r19, r19
    7432:	4b e0       	ldi	r20, 0x0B	; 11
    7434:	42 9f       	mul	r20, r18
    7436:	c0 01       	movw	r24, r0
    7438:	43 9f       	mul	r20, r19
    743a:	90 0d       	add	r25, r0
    743c:	11 24       	eor	r1, r1
    743e:	88 50       	subi	r24, 0x08	; 8
    7440:	96 4d       	sbci	r25, 0xD6	; 214
    7442:	dc 01       	movw	r26, r24
    7444:	2d 91       	ld	r18, X+
    7446:	3c 91       	ld	r19, X
    7448:	88 85       	ldd	r24, Y+8	; 0x08
    744a:	99 85       	ldd	r25, Y+9	; 0x09
    744c:	28 17       	cp	r18, r24
    744e:	39 07       	cpc	r19, r25
    7450:	09 f0       	breq	.+2      	; 0x7454 <m2m_ip_cb+0x4b8>
    7452:	66 c0       	rjmp	.+204    	; 0x7520 <m2m_ip_cb+0x584>
    7454:	8b 85       	ldd	r24, Y+11	; 0x0b
    7456:	9c 85       	ldd	r25, Y+12	; 0x0c
    7458:	18 16       	cp	r1, r24
    745a:	19 06       	cpc	r1, r25
    745c:	ec f5       	brge	.+122    	; 0x74d8 <m2m_ip_cb+0x53c>
    745e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7460:	3c 85       	ldd	r19, Y+12	; 0x0c
    7462:	ce 01       	movw	r24, r28
    7464:	8b 53       	subi	r24, 0x3B	; 59
    7466:	9f 4f       	sbci	r25, 0xFF	; 255
    7468:	fc 01       	movw	r30, r24
    746a:	80 81       	ld	r24, Z
    746c:	91 81       	ldd	r25, Z+1	; 0x01
    746e:	28 17       	cp	r18, r24
    7470:	39 07       	cpc	r19, r25
    7472:	90 f5       	brcc	.+100    	; 0x74d8 <m2m_ip_cb+0x53c>
    7474:	8d 85       	ldd	r24, Y+13	; 0x0d
    7476:	9e 85       	ldd	r25, Y+14	; 0x0e
    7478:	9c 01       	movw	r18, r24
    747a:	40 e0       	ldi	r20, 0x00	; 0
    747c:	50 e0       	ldi	r21, 0x00	; 0
    747e:	be 01       	movw	r22, r28
    7480:	69 53       	subi	r22, 0x39	; 57
    7482:	7f 4f       	sbci	r23, 0xFF	; 255
    7484:	ce 01       	movw	r24, r28
    7486:	89 53       	subi	r24, 0x39	; 57
    7488:	9f 4f       	sbci	r25, 0xFF	; 255
    748a:	fc 01       	movw	r30, r24
    748c:	80 81       	ld	r24, Z
    748e:	91 81       	ldd	r25, Z+1	; 0x01
    7490:	a2 81       	ldd	r26, Z+2	; 0x02
    7492:	b3 81       	ldd	r27, Z+3	; 0x03
    7494:	82 0f       	add	r24, r18
    7496:	93 1f       	adc	r25, r19
    7498:	a4 1f       	adc	r26, r20
    749a:	b5 1f       	adc	r27, r21
    749c:	fb 01       	movw	r30, r22
    749e:	80 83       	st	Z, r24
    74a0:	91 83       	std	Z+1, r25	; 0x01
    74a2:	a2 83       	std	Z+2, r26	; 0x02
    74a4:	b3 83       	std	Z+3, r27	; 0x03
    74a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    74a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    74aa:	8e 83       	std	Y+6, r24	; 0x06
    74ac:	9f 83       	std	Y+7, r25	; 0x07
    74ae:	2e 81       	ldd	r18, Y+6	; 0x06
    74b0:	3f 81       	ldd	r19, Y+7	; 0x07
    74b2:	ce 01       	movw	r24, r28
    74b4:	89 53       	subi	r24, 0x39	; 57
    74b6:	9f 4f       	sbci	r25, 0xFF	; 255
    74b8:	fc 01       	movw	r30, r24
    74ba:	80 81       	ld	r24, Z
    74bc:	91 81       	ldd	r25, Z+1	; 0x01
    74be:	a2 81       	ldd	r26, Z+2	; 0x02
    74c0:	b3 81       	ldd	r27, Z+3	; 0x03
    74c2:	be 01       	movw	r22, r28
    74c4:	64 5b       	subi	r22, 0xB4	; 180
    74c6:	7f 4f       	sbci	r23, 0xFF	; 255
    74c8:	79 01       	movw	r14, r18
    74ca:	8c 01       	movw	r16, r24
    74cc:	9d 01       	movw	r18, r26
    74ce:	49 81       	ldd	r20, Y+1	; 0x01
    74d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    74d2:	0e 94 99 36 	call	0x6d32	; 0x6d32 <Socket_ReadSocketData>
    74d6:	17 c1       	rjmp	.+558    	; 0x7706 <m2m_ip_cb+0x76a>
    74d8:	ce 01       	movw	r24, r28
    74da:	84 5b       	subi	r24, 0xB4	; 180
    74dc:	9f 4f       	sbci	r25, 0xFF	; 255
    74de:	2b 85       	ldd	r18, Y+11	; 0x0b
    74e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    74e2:	dc 01       	movw	r26, r24
    74e4:	12 96       	adiw	r26, 0x02	; 2
    74e6:	2d 93       	st	X+, r18
    74e8:	3c 93       	st	X, r19
    74ea:	13 97       	sbiw	r26, 0x03	; 3
    74ec:	ce 01       	movw	r24, r28
    74ee:	84 5b       	subi	r24, 0xB4	; 180
    74f0:	9f 4f       	sbci	r25, 0xFF	; 255
    74f2:	fc 01       	movw	r30, r24
    74f4:	10 82       	st	Z, r1
    74f6:	11 82       	std	Z+1, r1	; 0x01
    74f8:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    74fc:	90 91 6e 2a 	lds	r25, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    7500:	89 2b       	or	r24, r25
    7502:	09 f4       	brne	.+2      	; 0x7506 <m2m_ip_cb+0x56a>
    7504:	00 c1       	rjmp	.+512    	; 0x7706 <m2m_ip_cb+0x76a>
    7506:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    750a:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    750e:	ce 01       	movw	r24, r28
    7510:	84 5b       	subi	r24, 0xB4	; 180
    7512:	9f 4f       	sbci	r25, 0xFF	; 255
    7514:	ac 01       	movw	r20, r24
    7516:	69 81       	ldd	r22, Y+1	; 0x01
    7518:	8a 85       	ldd	r24, Y+10	; 0x0a
    751a:	f9 01       	movw	r30, r18
    751c:	09 95       	icall
    751e:	f3 c0       	rjmp	.+486    	; 0x7706 <m2m_ip_cb+0x76a>
    7520:	ce 01       	movw	r24, r28
    7522:	8b 53       	subi	r24, 0x3B	; 59
    7524:	9f 4f       	sbci	r25, 0xFF	; 255
    7526:	2e 81       	ldd	r18, Y+6	; 0x06
    7528:	3f 81       	ldd	r19, Y+7	; 0x07
    752a:	dc 01       	movw	r26, r24
    752c:	8d 91       	ld	r24, X+
    752e:	9c 91       	ld	r25, X
    7530:	28 17       	cp	r18, r24
    7532:	39 07       	cpc	r19, r25
    7534:	08 f0       	brcs	.+2      	; 0x7538 <m2m_ip_cb+0x59c>
    7536:	e7 c0       	rjmp	.+462    	; 0x7706 <m2m_ip_cb+0x76a>
    7538:	01 e0       	ldi	r16, 0x01	; 1
    753a:	20 e0       	ldi	r18, 0x00	; 0
    753c:	30 e0       	ldi	r19, 0x00	; 0
    753e:	40 e0       	ldi	r20, 0x00	; 0
    7540:	50 e0       	ldi	r21, 0x00	; 0
    7542:	60 e0       	ldi	r22, 0x00	; 0
    7544:	70 e0       	ldi	r23, 0x00	; 0
    7546:	cb 01       	movw	r24, r22
    7548:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    754c:	dc c0       	rjmp	.+440    	; 0x7706 <m2m_ip_cb+0x76a>
    754e:	ce 01       	movw	r24, r28
    7550:	8c 53       	subi	r24, 0x3C	; 60
    7552:	9f 4f       	sbci	r25, 0xFF	; 255
    7554:	fc 01       	movw	r30, r24
    7556:	80 81       	ld	r24, Z
    7558:	85 34       	cpi	r24, 0x45	; 69
    755a:	79 f0       	breq	.+30     	; 0x757a <m2m_ip_cb+0x5de>
    755c:	ce 01       	movw	r24, r28
    755e:	8c 53       	subi	r24, 0x3C	; 60
    7560:	9f 4f       	sbci	r25, 0xFF	; 255
    7562:	dc 01       	movw	r26, r24
    7564:	8c 91       	ld	r24, X
    7566:	87 34       	cpi	r24, 0x47	; 71
    7568:	41 f0       	breq	.+16     	; 0x757a <m2m_ip_cb+0x5de>
    756a:	ce 01       	movw	r24, r28
    756c:	8c 53       	subi	r24, 0x3C	; 60
    756e:	9f 4f       	sbci	r25, 0xFF	; 255
    7570:	fc 01       	movw	r30, r24
    7572:	80 81       	ld	r24, Z
    7574:	8c 34       	cpi	r24, 0x4C	; 76
    7576:	09 f0       	breq	.+2      	; 0x757a <m2m_ip_cb+0x5de>
    7578:	67 c0       	rjmp	.+206    	; 0x7648 <m2m_ip_cb+0x6ac>
    757a:	87 e0       	ldi	r24, 0x07	; 7
    757c:	8a 83       	std	Y+2, r24	; 0x02
    757e:	ce 01       	movw	r24, r28
    7580:	8c 53       	subi	r24, 0x3C	; 60
    7582:	9f 4f       	sbci	r25, 0xFF	; 255
    7584:	dc 01       	movw	r26, r24
    7586:	8c 91       	ld	r24, X
    7588:	87 34       	cpi	r24, 0x47	; 71
    758a:	11 f4       	brne	.+4      	; 0x7590 <m2m_ip_cb+0x5f4>
    758c:	88 e0       	ldi	r24, 0x08	; 8
    758e:	8a 83       	std	Y+2, r24	; 0x02
    7590:	ae 01       	movw	r20, r28
    7592:	4c 59       	subi	r20, 0x9C	; 156
    7594:	5f 4f       	sbci	r21, 0xFF	; 255
    7596:	ce 01       	movw	r24, r28
    7598:	89 53       	subi	r24, 0x39	; 57
    759a:	9f 4f       	sbci	r25, 0xFF	; 255
    759c:	fc 01       	movw	r30, r24
    759e:	80 81       	ld	r24, Z
    75a0:	91 81       	ldd	r25, Z+1	; 0x01
    75a2:	a2 81       	ldd	r26, Z+2	; 0x02
    75a4:	b3 81       	ldd	r27, Z+3	; 0x03
    75a6:	00 e0       	ldi	r16, 0x00	; 0
    75a8:	28 e0       	ldi	r18, 0x08	; 8
    75aa:	30 e0       	ldi	r19, 0x00	; 0
    75ac:	bc 01       	movw	r22, r24
    75ae:	cd 01       	movw	r24, r26
    75b0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    75b4:	88 23       	and	r24, r24
    75b6:	09 f0       	breq	.+2      	; 0x75ba <m2m_ip_cb+0x61e>
    75b8:	a8 c0       	rjmp	.+336    	; 0x770a <m2m_ip_cb+0x76e>
    75ba:	1b 82       	std	Y+3, r1	; 0x03
    75bc:	1c 82       	std	Y+4, r1	; 0x04
    75be:	ce 01       	movw	r24, r28
    75c0:	8c 59       	subi	r24, 0x9C	; 156
    75c2:	9f 4f       	sbci	r25, 0xFF	; 255
    75c4:	dc 01       	movw	r26, r24
    75c6:	8c 91       	ld	r24, X
    75c8:	8d 83       	std	Y+5, r24	; 0x05
    75ca:	ce 01       	movw	r24, r28
    75cc:	8c 59       	subi	r24, 0x9C	; 156
    75ce:	9f 4f       	sbci	r25, 0xFF	; 255
    75d0:	fc 01       	movw	r30, r24
    75d2:	84 81       	ldd	r24, Z+4	; 0x04
    75d4:	95 81       	ldd	r25, Z+5	; 0x05
    75d6:	8b 83       	std	Y+3, r24	; 0x03
    75d8:	9c 83       	std	Y+4, r25	; 0x04
    75da:	ce 01       	movw	r24, r28
    75dc:	8c 59       	subi	r24, 0x9C	; 156
    75de:	9f 4f       	sbci	r25, 0xFF	; 255
    75e0:	dc 01       	movw	r26, r24
    75e2:	12 96       	adiw	r26, 0x02	; 2
    75e4:	2d 91       	ld	r18, X+
    75e6:	3c 91       	ld	r19, X
    75e8:	13 97       	sbiw	r26, 0x03	; 3
    75ea:	ce 01       	movw	r24, r28
    75ec:	8e 59       	subi	r24, 0x9E	; 158
    75ee:	9f 4f       	sbci	r25, 0xFF	; 255
    75f0:	fc 01       	movw	r30, r24
    75f2:	20 83       	st	Z, r18
    75f4:	31 83       	std	Z+1, r19	; 0x01
    75f6:	8d 81       	ldd	r24, Y+5	; 0x05
    75f8:	28 2f       	mov	r18, r24
    75fa:	88 0f       	add	r24, r24
    75fc:	33 0b       	sbc	r19, r19
    75fe:	4b e0       	ldi	r20, 0x0B	; 11
    7600:	42 9f       	mul	r20, r18
    7602:	c0 01       	movw	r24, r0
    7604:	43 9f       	mul	r20, r19
    7606:	90 0d       	add	r25, r0
    7608:	11 24       	eor	r1, r1
    760a:	88 50       	subi	r24, 0x08	; 8
    760c:	96 4d       	sbci	r25, 0xD6	; 214
    760e:	dc 01       	movw	r26, r24
    7610:	2d 91       	ld	r18, X+
    7612:	3c 91       	ld	r19, X
    7614:	8b 81       	ldd	r24, Y+3	; 0x03
    7616:	9c 81       	ldd	r25, Y+4	; 0x04
    7618:	28 17       	cp	r18, r24
    761a:	39 07       	cpc	r19, r25
    761c:	09 f0       	breq	.+2      	; 0x7620 <m2m_ip_cb+0x684>
    761e:	75 c0       	rjmp	.+234    	; 0x770a <m2m_ip_cb+0x76e>
    7620:	80 91 6d 2a 	lds	r24, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    7624:	90 91 6e 2a 	lds	r25, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    7628:	89 2b       	or	r24, r25
    762a:	09 f4       	brne	.+2      	; 0x762e <m2m_ip_cb+0x692>
    762c:	6e c0       	rjmp	.+220    	; 0x770a <m2m_ip_cb+0x76e>
    762e:	20 91 6d 2a 	lds	r18, 0x2A6D	; 0x802a6d <gpfAppSocketCb>
    7632:	30 91 6e 2a 	lds	r19, 0x2A6E	; 0x802a6e <gpfAppSocketCb+0x1>
    7636:	ce 01       	movw	r24, r28
    7638:	8e 59       	subi	r24, 0x9E	; 158
    763a:	9f 4f       	sbci	r25, 0xFF	; 255
    763c:	ac 01       	movw	r20, r24
    763e:	6a 81       	ldd	r22, Y+2	; 0x02
    7640:	8d 81       	ldd	r24, Y+5	; 0x05
    7642:	f9 01       	movw	r30, r18
    7644:	09 95       	icall
    7646:	61 c0       	rjmp	.+194    	; 0x770a <m2m_ip_cb+0x76e>
    7648:	ce 01       	movw	r24, r28
    764a:	8c 53       	subi	r24, 0x3C	; 60
    764c:	9f 4f       	sbci	r25, 0xFF	; 255
    764e:	dc 01       	movw	r26, r24
    7650:	8c 91       	ld	r24, X
    7652:	82 35       	cpi	r24, 0x52	; 82
    7654:	09 f0       	breq	.+2      	; 0x7658 <m2m_ip_cb+0x6bc>
    7656:	5a c0       	rjmp	.+180    	; 0x770c <m2m_ip_cb+0x770>
    7658:	ae 01       	movw	r20, r28
    765a:	44 59       	subi	r20, 0x94	; 148
    765c:	5f 4f       	sbci	r21, 0xFF	; 255
    765e:	ce 01       	movw	r24, r28
    7660:	89 53       	subi	r24, 0x39	; 57
    7662:	9f 4f       	sbci	r25, 0xFF	; 255
    7664:	fc 01       	movw	r30, r24
    7666:	80 81       	ld	r24, Z
    7668:	91 81       	ldd	r25, Z+1	; 0x01
    766a:	a2 81       	ldd	r26, Z+2	; 0x02
    766c:	b3 81       	ldd	r27, Z+3	; 0x03
    766e:	01 e0       	ldi	r16, 0x01	; 1
    7670:	24 e1       	ldi	r18, 0x14	; 20
    7672:	30 e0       	ldi	r19, 0x00	; 0
    7674:	bc 01       	movw	r22, r24
    7676:	cd 01       	movw	r24, r26
    7678:	0e 94 51 20 	call	0x40a2	; 0x40a2 <hif_receive>
    767c:	88 23       	and	r24, r24
    767e:	09 f0       	breq	.+2      	; 0x7682 <m2m_ip_cb+0x6e6>
    7680:	45 c0       	rjmp	.+138    	; 0x770c <m2m_ip_cb+0x770>
    7682:	ce 01       	movw	r24, r28
    7684:	84 59       	subi	r24, 0x94	; 148
    7686:	9f 4f       	sbci	r25, 0xFF	; 255
    7688:	fc 01       	movw	r30, r24
    768a:	84 81       	ldd	r24, Z+4	; 0x04
    768c:	95 81       	ldd	r25, Z+5	; 0x05
    768e:	a6 81       	ldd	r26, Z+6	; 0x06
    7690:	b7 81       	ldd	r27, Z+7	; 0x07
    7692:	80 93 6f 2a 	sts	0x2A6F, r24	; 0x802a6f <gfpPingCb>
    7696:	90 93 70 2a 	sts	0x2A70, r25	; 0x802a70 <gfpPingCb+0x1>
    769a:	80 91 6f 2a 	lds	r24, 0x2A6F	; 0x802a6f <gfpPingCb>
    769e:	90 91 70 2a 	lds	r25, 0x2A70	; 0x802a70 <gfpPingCb+0x1>
    76a2:	89 2b       	or	r24, r25
    76a4:	99 f1       	breq	.+102    	; 0x770c <m2m_ip_cb+0x770>
    76a6:	a0 91 6f 2a 	lds	r26, 0x2A6F	; 0x802a6f <gfpPingCb>
    76aa:	b0 91 70 2a 	lds	r27, 0x2A70	; 0x802a70 <gfpPingCb+0x1>
    76ae:	c5 53       	subi	r28, 0x35	; 53
    76b0:	df 4f       	sbci	r29, 0xFF	; 255
    76b2:	a8 83       	st	Y, r26
    76b4:	b9 83       	std	Y+1, r27	; 0x01
    76b6:	cb 5c       	subi	r28, 0xCB	; 203
    76b8:	d0 40       	sbci	r29, 0x00	; 0
    76ba:	ce 01       	movw	r24, r28
    76bc:	84 59       	subi	r24, 0x94	; 148
    76be:	9f 4f       	sbci	r25, 0xFF	; 255
    76c0:	fc 01       	movw	r30, r24
    76c2:	60 89       	ldd	r22, Z+16	; 0x10
    76c4:	ce 01       	movw	r24, r28
    76c6:	84 59       	subi	r24, 0x94	; 148
    76c8:	9f 4f       	sbci	r25, 0xFF	; 255
    76ca:	dc 01       	movw	r26, r24
    76cc:	18 96       	adiw	r26, 0x08	; 8
    76ce:	2d 91       	ld	r18, X+
    76d0:	3d 91       	ld	r19, X+
    76d2:	4d 91       	ld	r20, X+
    76d4:	5c 91       	ld	r21, X
    76d6:	1b 97       	sbiw	r26, 0x0b	; 11
    76d8:	ce 01       	movw	r24, r28
    76da:	84 59       	subi	r24, 0x94	; 148
    76dc:	9f 4f       	sbci	r25, 0xFF	; 255
    76de:	fc 01       	movw	r30, r24
    76e0:	80 81       	ld	r24, Z
    76e2:	91 81       	ldd	r25, Z+1	; 0x01
    76e4:	a2 81       	ldd	r26, Z+2	; 0x02
    76e6:	b3 81       	ldd	r27, Z+3	; 0x03
    76e8:	06 2f       	mov	r16, r22
    76ea:	bc 01       	movw	r22, r24
    76ec:	cd 01       	movw	r24, r26
    76ee:	c5 53       	subi	r28, 0x35	; 53
    76f0:	df 4f       	sbci	r29, 0xFF	; 255
    76f2:	e8 81       	ld	r30, Y
    76f4:	f9 81       	ldd	r31, Y+1	; 0x01
    76f6:	cb 5c       	subi	r28, 0xCB	; 203
    76f8:	d0 40       	sbci	r29, 0x00	; 0
    76fa:	09 95       	icall
    76fc:	07 c0       	rjmp	.+14     	; 0x770c <m2m_ip_cb+0x770>
    76fe:	00 00       	nop
    7700:	05 c0       	rjmp	.+10     	; 0x770c <m2m_ip_cb+0x770>
    7702:	00 00       	nop
    7704:	03 c0       	rjmp	.+6      	; 0x770c <m2m_ip_cb+0x770>
    7706:	00 00       	nop
    7708:	01 c0       	rjmp	.+2      	; 0x770c <m2m_ip_cb+0x770>
    770a:	00 00       	nop
    770c:	00 00       	nop
    770e:	c4 53       	subi	r28, 0x34	; 52
    7710:	df 4f       	sbci	r29, 0xFF	; 255
    7712:	cd bf       	out	0x3d, r28	; 61
    7714:	de bf       	out	0x3e, r29	; 62
    7716:	df 91       	pop	r29
    7718:	cf 91       	pop	r28
    771a:	1f 91       	pop	r17
    771c:	0f 91       	pop	r16
    771e:	ff 90       	pop	r15
    7720:	ef 90       	pop	r14
    7722:	08 95       	ret

00007724 <socketInit>:
    7724:	cf 93       	push	r28
    7726:	df 93       	push	r29
    7728:	cd b7       	in	r28, 0x3d	; 61
    772a:	de b7       	in	r29, 0x3e	; 62
    772c:	80 91 eb 28 	lds	r24, 0x28EB	; 0x8028eb <gbSocketInit>
    7730:	88 23       	and	r24, r24
    7732:	a9 f4       	brne	.+42     	; 0x775e <socketInit+0x3a>
    7734:	29 e7       	ldi	r18, 0x79	; 121
    7736:	30 e0       	ldi	r19, 0x00	; 0
    7738:	40 e0       	ldi	r20, 0x00	; 0
    773a:	50 e0       	ldi	r21, 0x00	; 0
    773c:	60 e0       	ldi	r22, 0x00	; 0
    773e:	84 ef       	ldi	r24, 0xF4	; 244
    7740:	99 e2       	ldi	r25, 0x29	; 41
    7742:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <m2m_memset>
    7746:	6e ec       	ldi	r22, 0xCE	; 206
    7748:	77 e3       	ldi	r23, 0x37	; 55
    774a:	82 e0       	ldi	r24, 0x02	; 2
    774c:	0e 94 1e 21 	call	0x423c	; 0x423c <hif_register_cb>
    7750:	81 e0       	ldi	r24, 0x01	; 1
    7752:	80 93 eb 28 	sts	0x28EB, r24	; 0x8028eb <gbSocketInit>
    7756:	10 92 e9 28 	sts	0x28E9, r1	; 0x8028e9 <gu16SessionID>
    775a:	10 92 ea 28 	sts	0x28EA, r1	; 0x8028ea <gu16SessionID+0x1>
    775e:	00 00       	nop
    7760:	df 91       	pop	r29
    7762:	cf 91       	pop	r28
    7764:	08 95       	ret

00007766 <registerSocketCallback>:
    7766:	cf 93       	push	r28
    7768:	df 93       	push	r29
    776a:	00 d0       	rcall	.+0      	; 0x776c <registerSocketCallback+0x6>
    776c:	00 d0       	rcall	.+0      	; 0x776e <registerSocketCallback+0x8>
    776e:	cd b7       	in	r28, 0x3d	; 61
    7770:	de b7       	in	r29, 0x3e	; 62
    7772:	89 83       	std	Y+1, r24	; 0x01
    7774:	9a 83       	std	Y+2, r25	; 0x02
    7776:	6b 83       	std	Y+3, r22	; 0x03
    7778:	7c 83       	std	Y+4, r23	; 0x04
    777a:	89 81       	ldd	r24, Y+1	; 0x01
    777c:	9a 81       	ldd	r25, Y+2	; 0x02
    777e:	80 93 6d 2a 	sts	0x2A6D, r24	; 0x802a6d <gpfAppSocketCb>
    7782:	90 93 6e 2a 	sts	0x2A6E, r25	; 0x802a6e <gpfAppSocketCb+0x1>
    7786:	8b 81       	ldd	r24, Y+3	; 0x03
    7788:	9c 81       	ldd	r25, Y+4	; 0x04
    778a:	80 93 71 2a 	sts	0x2A71, r24	; 0x802a71 <gpfAppResolveCb>
    778e:	90 93 72 2a 	sts	0x2A72, r25	; 0x802a72 <gpfAppResolveCb+0x1>
    7792:	00 00       	nop
    7794:	24 96       	adiw	r28, 0x04	; 4
    7796:	cd bf       	out	0x3d, r28	; 61
    7798:	de bf       	out	0x3e, r29	; 62
    779a:	df 91       	pop	r29
    779c:	cf 91       	pop	r28
    779e:	08 95       	ret

000077a0 <socket>:
    77a0:	cf 92       	push	r12
    77a2:	df 92       	push	r13
    77a4:	ef 92       	push	r14
    77a6:	ff 92       	push	r15
    77a8:	0f 93       	push	r16
    77aa:	1f 93       	push	r17
    77ac:	cf 93       	push	r28
    77ae:	df 93       	push	r29
    77b0:	cd b7       	in	r28, 0x3d	; 61
    77b2:	de b7       	in	r29, 0x3e	; 62
    77b4:	2f 97       	sbiw	r28, 0x0f	; 15
    77b6:	cd bf       	out	0x3d, r28	; 61
    77b8:	de bf       	out	0x3e, r29	; 62
    77ba:	8c 87       	std	Y+12, r24	; 0x0c
    77bc:	9d 87       	std	Y+13, r25	; 0x0d
    77be:	6e 87       	std	Y+14, r22	; 0x0e
    77c0:	4f 87       	std	Y+15, r20	; 0x0f
    77c2:	8f ef       	ldi	r24, 0xFF	; 255
    77c4:	89 83       	std	Y+1, r24	; 0x01
    77c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    77c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    77ca:	02 97       	sbiw	r24, 0x02	; 2
    77cc:	09 f0       	breq	.+2      	; 0x77d0 <socket+0x30>
    77ce:	bd c0       	rjmp	.+378    	; 0x794a <socket+0x1aa>
    77d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    77d2:	81 30       	cpi	r24, 0x01	; 1
    77d4:	79 f5       	brne	.+94     	; 0x7834 <socket+0x94>
    77d6:	1a 82       	std	Y+2, r1	; 0x02
    77d8:	29 c0       	rjmp	.+82     	; 0x782c <socket+0x8c>
    77da:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <u8NextTcpSock.2561>
    77de:	8d 83       	std	Y+5, r24	; 0x05
    77e0:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <u8NextTcpSock.2561>
    77e4:	28 2f       	mov	r18, r24
    77e6:	30 e0       	ldi	r19, 0x00	; 0
    77e8:	4b e0       	ldi	r20, 0x0B	; 11
    77ea:	42 9f       	mul	r20, r18
    77ec:	c0 01       	movw	r24, r0
    77ee:	43 9f       	mul	r20, r19
    77f0:	90 0d       	add	r25, r0
    77f2:	11 24       	eor	r1, r1
    77f4:	8c 50       	subi	r24, 0x0C	; 12
    77f6:	96 4d       	sbci	r25, 0xD6	; 214
    77f8:	8b 83       	std	Y+3, r24	; 0x03
    77fa:	9c 83       	std	Y+4, r25	; 0x04
    77fc:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <u8NextTcpSock.2561>
    7800:	88 2f       	mov	r24, r24
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	01 96       	adiw	r24, 0x01	; 1
    7806:	27 e0       	ldi	r18, 0x07	; 7
    7808:	30 e0       	ldi	r19, 0x00	; 0
    780a:	b9 01       	movw	r22, r18
    780c:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__divmodhi4>
    7810:	80 93 ec 28 	sts	0x28EC, r24	; 0x8028ec <u8NextTcpSock.2561>
    7814:	8b 81       	ldd	r24, Y+3	; 0x03
    7816:	9c 81       	ldd	r25, Y+4	; 0x04
    7818:	fc 01       	movw	r30, r24
    781a:	80 85       	ldd	r24, Z+8	; 0x08
    781c:	88 23       	and	r24, r24
    781e:	19 f4       	brne	.+6      	; 0x7826 <socket+0x86>
    7820:	8d 81       	ldd	r24, Y+5	; 0x05
    7822:	89 83       	std	Y+1, r24	; 0x01
    7824:	42 c0       	rjmp	.+132    	; 0x78aa <socket+0x10a>
    7826:	8a 81       	ldd	r24, Y+2	; 0x02
    7828:	8f 5f       	subi	r24, 0xFF	; 255
    782a:	8a 83       	std	Y+2, r24	; 0x02
    782c:	8a 81       	ldd	r24, Y+2	; 0x02
    782e:	87 30       	cpi	r24, 0x07	; 7
    7830:	a0 f2       	brcs	.-88     	; 0x77da <socket+0x3a>
    7832:	3b c0       	rjmp	.+118    	; 0x78aa <socket+0x10a>
    7834:	8e 85       	ldd	r24, Y+14	; 0x0e
    7836:	82 30       	cpi	r24, 0x02	; 2
    7838:	c1 f5       	brne	.+112    	; 0x78aa <socket+0x10a>
    783a:	81 e4       	ldi	r24, 0x41	; 65
    783c:	9a e2       	ldi	r25, 0x2A	; 42
    783e:	8e 83       	std	Y+6, r24	; 0x06
    7840:	9f 83       	std	Y+7, r25	; 0x07
    7842:	1a 82       	std	Y+2, r1	; 0x02
    7844:	2f c0       	rjmp	.+94     	; 0x78a4 <socket+0x104>
    7846:	80 91 ed 28 	lds	r24, 0x28ED	; 0x8028ed <u8NextUdpSock.2562>
    784a:	8d 83       	std	Y+5, r24	; 0x05
    784c:	80 91 ed 28 	lds	r24, 0x28ED	; 0x8028ed <u8NextUdpSock.2562>
    7850:	28 2f       	mov	r18, r24
    7852:	30 e0       	ldi	r19, 0x00	; 0
    7854:	4b e0       	ldi	r20, 0x0B	; 11
    7856:	42 9f       	mul	r20, r18
    7858:	c0 01       	movw	r24, r0
    785a:	43 9f       	mul	r20, r19
    785c:	90 0d       	add	r25, r0
    785e:	11 24       	eor	r1, r1
    7860:	2e 81       	ldd	r18, Y+6	; 0x06
    7862:	3f 81       	ldd	r19, Y+7	; 0x07
    7864:	82 0f       	add	r24, r18
    7866:	93 1f       	adc	r25, r19
    7868:	8b 83       	std	Y+3, r24	; 0x03
    786a:	9c 83       	std	Y+4, r25	; 0x04
    786c:	80 91 ed 28 	lds	r24, 0x28ED	; 0x8028ed <u8NextUdpSock.2562>
    7870:	88 2f       	mov	r24, r24
    7872:	90 e0       	ldi	r25, 0x00	; 0
    7874:	01 96       	adiw	r24, 0x01	; 1
    7876:	83 70       	andi	r24, 0x03	; 3
    7878:	90 78       	andi	r25, 0x80	; 128
    787a:	99 23       	and	r25, r25
    787c:	24 f4       	brge	.+8      	; 0x7886 <socket+0xe6>
    787e:	01 97       	sbiw	r24, 0x01	; 1
    7880:	8c 6f       	ori	r24, 0xFC	; 252
    7882:	9f 6f       	ori	r25, 0xFF	; 255
    7884:	01 96       	adiw	r24, 0x01	; 1
    7886:	80 93 ed 28 	sts	0x28ED, r24	; 0x8028ed <u8NextUdpSock.2562>
    788a:	8b 81       	ldd	r24, Y+3	; 0x03
    788c:	9c 81       	ldd	r25, Y+4	; 0x04
    788e:	fc 01       	movw	r30, r24
    7890:	80 85       	ldd	r24, Z+8	; 0x08
    7892:	88 23       	and	r24, r24
    7894:	21 f4       	brne	.+8      	; 0x789e <socket+0xfe>
    7896:	8d 81       	ldd	r24, Y+5	; 0x05
    7898:	89 5f       	subi	r24, 0xF9	; 249
    789a:	89 83       	std	Y+1, r24	; 0x01
    789c:	06 c0       	rjmp	.+12     	; 0x78aa <socket+0x10a>
    789e:	8a 81       	ldd	r24, Y+2	; 0x02
    78a0:	8f 5f       	subi	r24, 0xFF	; 255
    78a2:	8a 83       	std	Y+2, r24	; 0x02
    78a4:	8a 81       	ldd	r24, Y+2	; 0x02
    78a6:	84 30       	cpi	r24, 0x04	; 4
    78a8:	70 f2       	brcs	.-100    	; 0x7846 <socket+0xa6>
    78aa:	89 81       	ldd	r24, Y+1	; 0x01
    78ac:	88 23       	and	r24, r24
    78ae:	0c f4       	brge	.+2      	; 0x78b2 <socket+0x112>
    78b0:	4c c0       	rjmp	.+152    	; 0x794a <socket+0x1aa>
    78b2:	8b 81       	ldd	r24, Y+3	; 0x03
    78b4:	9c 81       	ldd	r25, Y+4	; 0x04
    78b6:	2b e0       	ldi	r18, 0x0B	; 11
    78b8:	30 e0       	ldi	r19, 0x00	; 0
    78ba:	40 e0       	ldi	r20, 0x00	; 0
    78bc:	50 e0       	ldi	r21, 0x00	; 0
    78be:	60 e0       	ldi	r22, 0x00	; 0
    78c0:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <m2m_memset>
    78c4:	8b 81       	ldd	r24, Y+3	; 0x03
    78c6:	9c 81       	ldd	r25, Y+4	; 0x04
    78c8:	21 e0       	ldi	r18, 0x01	; 1
    78ca:	fc 01       	movw	r30, r24
    78cc:	20 87       	std	Z+8, r18	; 0x08
    78ce:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <gu16SessionID>
    78d2:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    78d6:	01 96       	adiw	r24, 0x01	; 1
    78d8:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <gu16SessionID>
    78dc:	90 93 ea 28 	sts	0x28EA, r25	; 0x8028ea <gu16SessionID+0x1>
    78e0:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <gu16SessionID>
    78e4:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    78e8:	89 2b       	or	r24, r25
    78ea:	49 f4       	brne	.+18     	; 0x78fe <socket+0x15e>
    78ec:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <gu16SessionID>
    78f0:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    78f4:	01 96       	adiw	r24, 0x01	; 1
    78f6:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <gu16SessionID>
    78fa:	90 93 ea 28 	sts	0x28EA, r25	; 0x8028ea <gu16SessionID+0x1>
    78fe:	20 91 e9 28 	lds	r18, 0x28E9	; 0x8028e9 <gu16SessionID>
    7902:	30 91 ea 28 	lds	r19, 0x28EA	; 0x8028ea <gu16SessionID+0x1>
    7906:	8b 81       	ldd	r24, Y+3	; 0x03
    7908:	9c 81       	ldd	r25, Y+4	; 0x04
    790a:	fc 01       	movw	r30, r24
    790c:	24 83       	std	Z+4, r18	; 0x04
    790e:	35 83       	std	Z+5, r19	; 0x05
    7910:	8f 85       	ldd	r24, Y+15	; 0x0f
    7912:	88 2f       	mov	r24, r24
    7914:	90 e0       	ldi	r25, 0x00	; 0
    7916:	81 70       	andi	r24, 0x01	; 1
    7918:	99 27       	eor	r25, r25
    791a:	89 2b       	or	r24, r25
    791c:	b1 f0       	breq	.+44     	; 0x794a <socket+0x1aa>
    791e:	89 81       	ldd	r24, Y+1	; 0x01
    7920:	88 87       	std	Y+8, r24	; 0x08
    7922:	8b 81       	ldd	r24, Y+3	; 0x03
    7924:	9c 81       	ldd	r25, Y+4	; 0x04
    7926:	21 e2       	ldi	r18, 0x21	; 33
    7928:	fc 01       	movw	r30, r24
    792a:	21 87       	std	Z+9, r18	; 0x09
    792c:	ce 01       	movw	r24, r28
    792e:	08 96       	adiw	r24, 0x08	; 8
    7930:	c1 2c       	mov	r12, r1
    7932:	d1 2c       	mov	r13, r1
    7934:	e1 2c       	mov	r14, r1
    7936:	f1 2c       	mov	r15, r1
    7938:	00 e0       	ldi	r16, 0x00	; 0
    793a:	10 e0       	ldi	r17, 0x00	; 0
    793c:	24 e0       	ldi	r18, 0x04	; 4
    793e:	30 e0       	ldi	r19, 0x00	; 0
    7940:	ac 01       	movw	r20, r24
    7942:	60 e5       	ldi	r22, 0x50	; 80
    7944:	82 e0       	ldi	r24, 0x02	; 2
    7946:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    794a:	89 81       	ldd	r24, Y+1	; 0x01
    794c:	2f 96       	adiw	r28, 0x0f	; 15
    794e:	cd bf       	out	0x3d, r28	; 61
    7950:	de bf       	out	0x3e, r29	; 62
    7952:	df 91       	pop	r29
    7954:	cf 91       	pop	r28
    7956:	1f 91       	pop	r17
    7958:	0f 91       	pop	r16
    795a:	ff 90       	pop	r15
    795c:	ef 90       	pop	r14
    795e:	df 90       	pop	r13
    7960:	cf 90       	pop	r12
    7962:	08 95       	ret

00007964 <connect>:
    7964:	cf 92       	push	r12
    7966:	df 92       	push	r13
    7968:	ef 92       	push	r14
    796a:	ff 92       	push	r15
    796c:	0f 93       	push	r16
    796e:	1f 93       	push	r17
    7970:	cf 93       	push	r28
    7972:	df 93       	push	r29
    7974:	cd b7       	in	r28, 0x3d	; 61
    7976:	de b7       	in	r29, 0x3e	; 62
    7978:	62 97       	sbiw	r28, 0x12	; 18
    797a:	cd bf       	out	0x3d, r28	; 61
    797c:	de bf       	out	0x3e, r29	; 62
    797e:	8f 87       	std	Y+15, r24	; 0x0f
    7980:	68 8b       	std	Y+16, r22	; 0x10
    7982:	79 8b       	std	Y+17, r23	; 0x11
    7984:	4a 8b       	std	Y+18, r20	; 0x12
    7986:	8a ef       	ldi	r24, 0xFA	; 250
    7988:	89 83       	std	Y+1, r24	; 0x01
    798a:	8f 85       	ldd	r24, Y+15	; 0x0f
    798c:	88 23       	and	r24, r24
    798e:	0c f4       	brge	.+2      	; 0x7992 <connect+0x2e>
    7990:	73 c0       	rjmp	.+230    	; 0x7a78 <connect+0x114>
    7992:	88 89       	ldd	r24, Y+16	; 0x10
    7994:	99 89       	ldd	r25, Y+17	; 0x11
    7996:	89 2b       	or	r24, r25
    7998:	09 f4       	brne	.+2      	; 0x799c <connect+0x38>
    799a:	6e c0       	rjmp	.+220    	; 0x7a78 <connect+0x114>
    799c:	8f 85       	ldd	r24, Y+15	; 0x0f
    799e:	28 2f       	mov	r18, r24
    79a0:	88 0f       	add	r24, r24
    79a2:	33 0b       	sbc	r19, r19
    79a4:	4b e0       	ldi	r20, 0x0B	; 11
    79a6:	42 9f       	mul	r20, r18
    79a8:	c0 01       	movw	r24, r0
    79aa:	43 9f       	mul	r20, r19
    79ac:	90 0d       	add	r25, r0
    79ae:	11 24       	eor	r1, r1
    79b0:	84 50       	subi	r24, 0x04	; 4
    79b2:	96 4d       	sbci	r25, 0xD6	; 214
    79b4:	fc 01       	movw	r30, r24
    79b6:	80 81       	ld	r24, Z
    79b8:	81 30       	cpi	r24, 0x01	; 1
    79ba:	09 f0       	breq	.+2      	; 0x79be <connect+0x5a>
    79bc:	5d c0       	rjmp	.+186    	; 0x7a78 <connect+0x114>
    79be:	8a 89       	ldd	r24, Y+18	; 0x12
    79c0:	88 23       	and	r24, r24
    79c2:	09 f4       	brne	.+2      	; 0x79c6 <connect+0x62>
    79c4:	59 c0       	rjmp	.+178    	; 0x7a78 <connect+0x114>
    79c6:	84 e4       	ldi	r24, 0x44	; 68
    79c8:	8a 83       	std	Y+2, r24	; 0x02
    79ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    79cc:	28 2f       	mov	r18, r24
    79ce:	88 0f       	add	r24, r24
    79d0:	33 0b       	sbc	r19, r19
    79d2:	4b e0       	ldi	r20, 0x0B	; 11
    79d4:	42 9f       	mul	r20, r18
    79d6:	c0 01       	movw	r24, r0
    79d8:	43 9f       	mul	r20, r19
    79da:	90 0d       	add	r25, r0
    79dc:	11 24       	eor	r1, r1
    79de:	83 50       	subi	r24, 0x03	; 3
    79e0:	96 4d       	sbci	r25, 0xD6	; 214
    79e2:	fc 01       	movw	r30, r24
    79e4:	80 81       	ld	r24, Z
    79e6:	88 2f       	mov	r24, r24
    79e8:	90 e0       	ldi	r25, 0x00	; 0
    79ea:	81 70       	andi	r24, 0x01	; 1
    79ec:	99 27       	eor	r25, r25
    79ee:	89 2b       	or	r24, r25
    79f0:	89 f0       	breq	.+34     	; 0x7a14 <connect+0xb0>
    79f2:	8b e4       	ldi	r24, 0x4B	; 75
    79f4:	8a 83       	std	Y+2, r24	; 0x02
    79f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    79f8:	28 2f       	mov	r18, r24
    79fa:	88 0f       	add	r24, r24
    79fc:	33 0b       	sbc	r19, r19
    79fe:	4b e0       	ldi	r20, 0x0B	; 11
    7a00:	42 9f       	mul	r20, r18
    7a02:	c0 01       	movw	r24, r0
    7a04:	43 9f       	mul	r20, r19
    7a06:	90 0d       	add	r25, r0
    7a08:	11 24       	eor	r1, r1
    7a0a:	83 50       	subi	r24, 0x03	; 3
    7a0c:	96 4d       	sbci	r25, 0xD6	; 214
    7a0e:	fc 01       	movw	r30, r24
    7a10:	80 81       	ld	r24, Z
    7a12:	8c 87       	std	Y+12, r24	; 0x0c
    7a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a16:	8b 87       	std	Y+11, r24	; 0x0b
    7a18:	68 89       	ldd	r22, Y+16	; 0x10
    7a1a:	79 89       	ldd	r23, Y+17	; 0x11
    7a1c:	ce 01       	movw	r24, r28
    7a1e:	03 96       	adiw	r24, 0x03	; 3
    7a20:	28 e0       	ldi	r18, 0x08	; 8
    7a22:	30 e0       	ldi	r19, 0x00	; 0
    7a24:	40 e0       	ldi	r20, 0x00	; 0
    7a26:	50 e0       	ldi	r21, 0x00	; 0
    7a28:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memcpy>
    7a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a2e:	28 2f       	mov	r18, r24
    7a30:	88 0f       	add	r24, r24
    7a32:	33 0b       	sbc	r19, r19
    7a34:	4b e0       	ldi	r20, 0x0B	; 11
    7a36:	42 9f       	mul	r20, r18
    7a38:	c0 01       	movw	r24, r0
    7a3a:	43 9f       	mul	r20, r19
    7a3c:	90 0d       	add	r25, r0
    7a3e:	11 24       	eor	r1, r1
    7a40:	88 50       	subi	r24, 0x08	; 8
    7a42:	96 4d       	sbci	r25, 0xD6	; 214
    7a44:	fc 01       	movw	r30, r24
    7a46:	80 81       	ld	r24, Z
    7a48:	91 81       	ldd	r25, Z+1	; 0x01
    7a4a:	8d 87       	std	Y+13, r24	; 0x0d
    7a4c:	9e 87       	std	Y+14, r25	; 0x0e
    7a4e:	ce 01       	movw	r24, r28
    7a50:	03 96       	adiw	r24, 0x03	; 3
    7a52:	c1 2c       	mov	r12, r1
    7a54:	d1 2c       	mov	r13, r1
    7a56:	e1 2c       	mov	r14, r1
    7a58:	f1 2c       	mov	r15, r1
    7a5a:	00 e0       	ldi	r16, 0x00	; 0
    7a5c:	10 e0       	ldi	r17, 0x00	; 0
    7a5e:	2c e0       	ldi	r18, 0x0C	; 12
    7a60:	30 e0       	ldi	r19, 0x00	; 0
    7a62:	ac 01       	movw	r20, r24
    7a64:	6a 81       	ldd	r22, Y+2	; 0x02
    7a66:	82 e0       	ldi	r24, 0x02	; 2
    7a68:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    7a6c:	89 83       	std	Y+1, r24	; 0x01
    7a6e:	89 81       	ldd	r24, Y+1	; 0x01
    7a70:	88 23       	and	r24, r24
    7a72:	11 f0       	breq	.+4      	; 0x7a78 <connect+0x114>
    7a74:	87 ef       	ldi	r24, 0xF7	; 247
    7a76:	89 83       	std	Y+1, r24	; 0x01
    7a78:	89 81       	ldd	r24, Y+1	; 0x01
    7a7a:	62 96       	adiw	r28, 0x12	; 18
    7a7c:	cd bf       	out	0x3d, r28	; 61
    7a7e:	de bf       	out	0x3e, r29	; 62
    7a80:	df 91       	pop	r29
    7a82:	cf 91       	pop	r28
    7a84:	1f 91       	pop	r17
    7a86:	0f 91       	pop	r16
    7a88:	ff 90       	pop	r15
    7a8a:	ef 90       	pop	r14
    7a8c:	df 90       	pop	r13
    7a8e:	cf 90       	pop	r12
    7a90:	08 95       	ret

00007a92 <send>:
    7a92:	cf 92       	push	r12
    7a94:	df 92       	push	r13
    7a96:	ef 92       	push	r14
    7a98:	ff 92       	push	r15
    7a9a:	0f 93       	push	r16
    7a9c:	1f 93       	push	r17
    7a9e:	cf 93       	push	r28
    7aa0:	df 93       	push	r29
    7aa2:	cd b7       	in	r28, 0x3d	; 61
    7aa4:	de b7       	in	r29, 0x3e	; 62
    7aa6:	6c 97       	sbiw	r28, 0x1c	; 28
    7aa8:	cd bf       	out	0x3d, r28	; 61
    7aaa:	de bf       	out	0x3e, r29	; 62
    7aac:	8e 8b       	std	Y+22, r24	; 0x16
    7aae:	6f 8b       	std	Y+23, r22	; 0x17
    7ab0:	78 8f       	std	Y+24, r23	; 0x18
    7ab2:	49 8f       	std	Y+25, r20	; 0x19
    7ab4:	5a 8f       	std	Y+26, r21	; 0x1a
    7ab6:	2b 8f       	std	Y+27, r18	; 0x1b
    7ab8:	3c 8f       	std	Y+28, r19	; 0x1c
    7aba:	8a ef       	ldi	r24, 0xFA	; 250
    7abc:	9f ef       	ldi	r25, 0xFF	; 255
    7abe:	89 83       	std	Y+1, r24	; 0x01
    7ac0:	9a 83       	std	Y+2, r25	; 0x02
    7ac2:	8e 89       	ldd	r24, Y+22	; 0x16
    7ac4:	88 23       	and	r24, r24
    7ac6:	0c f4       	brge	.+2      	; 0x7aca <send+0x38>
    7ac8:	89 c0       	rjmp	.+274    	; 0x7bdc <send+0x14a>
    7aca:	8f 89       	ldd	r24, Y+23	; 0x17
    7acc:	98 8d       	ldd	r25, Y+24	; 0x18
    7ace:	89 2b       	or	r24, r25
    7ad0:	09 f4       	brne	.+2      	; 0x7ad4 <send+0x42>
    7ad2:	84 c0       	rjmp	.+264    	; 0x7bdc <send+0x14a>
    7ad4:	89 8d       	ldd	r24, Y+25	; 0x19
    7ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7ad8:	89 37       	cpi	r24, 0x79	; 121
    7ada:	95 40       	sbci	r25, 0x05	; 5
    7adc:	08 f0       	brcs	.+2      	; 0x7ae0 <send+0x4e>
    7ade:	7e c0       	rjmp	.+252    	; 0x7bdc <send+0x14a>
    7ae0:	8e 89       	ldd	r24, Y+22	; 0x16
    7ae2:	28 2f       	mov	r18, r24
    7ae4:	88 0f       	add	r24, r24
    7ae6:	33 0b       	sbc	r19, r19
    7ae8:	4b e0       	ldi	r20, 0x0B	; 11
    7aea:	42 9f       	mul	r20, r18
    7aec:	c0 01       	movw	r24, r0
    7aee:	43 9f       	mul	r20, r19
    7af0:	90 0d       	add	r25, r0
    7af2:	11 24       	eor	r1, r1
    7af4:	84 50       	subi	r24, 0x04	; 4
    7af6:	96 4d       	sbci	r25, 0xD6	; 214
    7af8:	fc 01       	movw	r30, r24
    7afa:	80 81       	ld	r24, Z
    7afc:	81 30       	cpi	r24, 0x01	; 1
    7afe:	09 f0       	breq	.+2      	; 0x7b02 <send+0x70>
    7b00:	6d c0       	rjmp	.+218    	; 0x7bdc <send+0x14a>
    7b02:	85 e4       	ldi	r24, 0x45	; 69
    7b04:	8d 83       	std	Y+5, r24	; 0x05
    7b06:	80 e5       	ldi	r24, 0x50	; 80
    7b08:	90 e0       	ldi	r25, 0x00	; 0
    7b0a:	8b 83       	std	Y+3, r24	; 0x03
    7b0c:	9c 83       	std	Y+4, r25	; 0x04
    7b0e:	8e 89       	ldd	r24, Y+22	; 0x16
    7b10:	8e 83       	std	Y+6, r24	; 0x06
    7b12:	89 8d       	ldd	r24, Y+25	; 0x19
    7b14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7b16:	88 87       	std	Y+8, r24	; 0x08
    7b18:	99 87       	std	Y+9, r25	; 0x09
    7b1a:	8e 89       	ldd	r24, Y+22	; 0x16
    7b1c:	28 2f       	mov	r18, r24
    7b1e:	88 0f       	add	r24, r24
    7b20:	33 0b       	sbc	r19, r19
    7b22:	4b e0       	ldi	r20, 0x0B	; 11
    7b24:	42 9f       	mul	r20, r18
    7b26:	c0 01       	movw	r24, r0
    7b28:	43 9f       	mul	r20, r19
    7b2a:	90 0d       	add	r25, r0
    7b2c:	11 24       	eor	r1, r1
    7b2e:	88 50       	subi	r24, 0x08	; 8
    7b30:	96 4d       	sbci	r25, 0xD6	; 214
    7b32:	fc 01       	movw	r30, r24
    7b34:	80 81       	ld	r24, Z
    7b36:	91 81       	ldd	r25, Z+1	; 0x01
    7b38:	8a 8b       	std	Y+18, r24	; 0x12
    7b3a:	9b 8b       	std	Y+19, r25	; 0x13
    7b3c:	8e 89       	ldd	r24, Y+22	; 0x16
    7b3e:	87 30       	cpi	r24, 0x07	; 7
    7b40:	24 f0       	brlt	.+8      	; 0x7b4a <send+0xb8>
    7b42:	84 e4       	ldi	r24, 0x44	; 68
    7b44:	90 e0       	ldi	r25, 0x00	; 0
    7b46:	8b 83       	std	Y+3, r24	; 0x03
    7b48:	9c 83       	std	Y+4, r25	; 0x04
    7b4a:	8e 89       	ldd	r24, Y+22	; 0x16
    7b4c:	28 2f       	mov	r18, r24
    7b4e:	88 0f       	add	r24, r24
    7b50:	33 0b       	sbc	r19, r19
    7b52:	4b e0       	ldi	r20, 0x0B	; 11
    7b54:	42 9f       	mul	r20, r18
    7b56:	c0 01       	movw	r24, r0
    7b58:	43 9f       	mul	r20, r19
    7b5a:	90 0d       	add	r25, r0
    7b5c:	11 24       	eor	r1, r1
    7b5e:	83 50       	subi	r24, 0x03	; 3
    7b60:	96 4d       	sbci	r25, 0xD6	; 214
    7b62:	fc 01       	movw	r30, r24
    7b64:	80 81       	ld	r24, Z
    7b66:	88 2f       	mov	r24, r24
    7b68:	90 e0       	ldi	r25, 0x00	; 0
    7b6a:	81 70       	andi	r24, 0x01	; 1
    7b6c:	99 27       	eor	r25, r25
    7b6e:	89 2b       	or	r24, r25
    7b70:	99 f0       	breq	.+38     	; 0x7b98 <send+0x106>
    7b72:	8c e4       	ldi	r24, 0x4C	; 76
    7b74:	8d 83       	std	Y+5, r24	; 0x05
    7b76:	8e 89       	ldd	r24, Y+22	; 0x16
    7b78:	28 2f       	mov	r18, r24
    7b7a:	88 0f       	add	r24, r24
    7b7c:	33 0b       	sbc	r19, r19
    7b7e:	4b e0       	ldi	r20, 0x0B	; 11
    7b80:	42 9f       	mul	r20, r18
    7b82:	c0 01       	movw	r24, r0
    7b84:	43 9f       	mul	r20, r19
    7b86:	90 0d       	add	r25, r0
    7b88:	11 24       	eor	r1, r1
    7b8a:	86 50       	subi	r24, 0x06	; 6
    7b8c:	96 4d       	sbci	r25, 0xD6	; 214
    7b8e:	fc 01       	movw	r30, r24
    7b90:	80 81       	ld	r24, Z
    7b92:	91 81       	ldd	r25, Z+1	; 0x01
    7b94:	8b 83       	std	Y+3, r24	; 0x03
    7b96:	9c 83       	std	Y+4, r25	; 0x04
    7b98:	8d 81       	ldd	r24, Y+5	; 0x05
    7b9a:	e8 2f       	mov	r30, r24
    7b9c:	e0 68       	ori	r30, 0x80	; 128
    7b9e:	6b 81       	ldd	r22, Y+3	; 0x03
    7ba0:	7c 81       	ldd	r23, Y+4	; 0x04
    7ba2:	49 8d       	ldd	r20, Y+25	; 0x19
    7ba4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    7ba6:	2f 89       	ldd	r18, Y+23	; 0x17
    7ba8:	38 8d       	ldd	r19, Y+24	; 0x18
    7baa:	ce 01       	movw	r24, r28
    7bac:	06 96       	adiw	r24, 0x06	; 6
    7bae:	6b 01       	movw	r12, r22
    7bb0:	7a 01       	movw	r14, r20
    7bb2:	89 01       	movw	r16, r18
    7bb4:	20 e1       	ldi	r18, 0x10	; 16
    7bb6:	30 e0       	ldi	r19, 0x00	; 0
    7bb8:	ac 01       	movw	r20, r24
    7bba:	6e 2f       	mov	r22, r30
    7bbc:	82 e0       	ldi	r24, 0x02	; 2
    7bbe:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    7bc2:	08 2e       	mov	r0, r24
    7bc4:	00 0c       	add	r0, r0
    7bc6:	99 0b       	sbc	r25, r25
    7bc8:	89 83       	std	Y+1, r24	; 0x01
    7bca:	9a 83       	std	Y+2, r25	; 0x02
    7bcc:	89 81       	ldd	r24, Y+1	; 0x01
    7bce:	9a 81       	ldd	r25, Y+2	; 0x02
    7bd0:	89 2b       	or	r24, r25
    7bd2:	21 f0       	breq	.+8      	; 0x7bdc <send+0x14a>
    7bd4:	82 ef       	ldi	r24, 0xF2	; 242
    7bd6:	9f ef       	ldi	r25, 0xFF	; 255
    7bd8:	89 83       	std	Y+1, r24	; 0x01
    7bda:	9a 83       	std	Y+2, r25	; 0x02
    7bdc:	89 81       	ldd	r24, Y+1	; 0x01
    7bde:	9a 81       	ldd	r25, Y+2	; 0x02
    7be0:	6c 96       	adiw	r28, 0x1c	; 28
    7be2:	cd bf       	out	0x3d, r28	; 61
    7be4:	de bf       	out	0x3e, r29	; 62
    7be6:	df 91       	pop	r29
    7be8:	cf 91       	pop	r28
    7bea:	1f 91       	pop	r17
    7bec:	0f 91       	pop	r16
    7bee:	ff 90       	pop	r15
    7bf0:	ef 90       	pop	r14
    7bf2:	df 90       	pop	r13
    7bf4:	cf 90       	pop	r12
    7bf6:	08 95       	ret

00007bf8 <recv>:
    7bf8:	cf 92       	push	r12
    7bfa:	df 92       	push	r13
    7bfc:	ef 92       	push	r14
    7bfe:	ff 92       	push	r15
    7c00:	0f 93       	push	r16
    7c02:	1f 93       	push	r17
    7c04:	cf 93       	push	r28
    7c06:	df 93       	push	r29
    7c08:	cd b7       	in	r28, 0x3d	; 61
    7c0a:	de b7       	in	r29, 0x3e	; 62
    7c0c:	64 97       	sbiw	r28, 0x14	; 20
    7c0e:	cd bf       	out	0x3d, r28	; 61
    7c10:	de bf       	out	0x3e, r29	; 62
    7c12:	8c 87       	std	Y+12, r24	; 0x0c
    7c14:	6d 87       	std	Y+13, r22	; 0x0d
    7c16:	7e 87       	std	Y+14, r23	; 0x0e
    7c18:	4f 87       	std	Y+15, r20	; 0x0f
    7c1a:	58 8b       	std	Y+16, r21	; 0x10
    7c1c:	09 8b       	std	Y+17, r16	; 0x11
    7c1e:	1a 8b       	std	Y+18, r17	; 0x12
    7c20:	2b 8b       	std	Y+19, r18	; 0x13
    7c22:	3c 8b       	std	Y+20, r19	; 0x14
    7c24:	8a ef       	ldi	r24, 0xFA	; 250
    7c26:	9f ef       	ldi	r25, 0xFF	; 255
    7c28:	89 83       	std	Y+1, r24	; 0x01
    7c2a:	9a 83       	std	Y+2, r25	; 0x02
    7c2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c2e:	88 23       	and	r24, r24
    7c30:	0c f4       	brge	.+2      	; 0x7c34 <recv+0x3c>
    7c32:	be c0       	rjmp	.+380    	; 0x7db0 <recv+0x1b8>
    7c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    7c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    7c38:	89 2b       	or	r24, r25
    7c3a:	09 f4       	brne	.+2      	; 0x7c3e <recv+0x46>
    7c3c:	b9 c0       	rjmp	.+370    	; 0x7db0 <recv+0x1b8>
    7c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7c40:	98 89       	ldd	r25, Y+16	; 0x10
    7c42:	89 2b       	or	r24, r25
    7c44:	09 f4       	brne	.+2      	; 0x7c48 <recv+0x50>
    7c46:	b4 c0       	rjmp	.+360    	; 0x7db0 <recv+0x1b8>
    7c48:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c4a:	28 2f       	mov	r18, r24
    7c4c:	88 0f       	add	r24, r24
    7c4e:	33 0b       	sbc	r19, r19
    7c50:	4b e0       	ldi	r20, 0x0B	; 11
    7c52:	42 9f       	mul	r20, r18
    7c54:	c0 01       	movw	r24, r0
    7c56:	43 9f       	mul	r20, r19
    7c58:	90 0d       	add	r25, r0
    7c5a:	11 24       	eor	r1, r1
    7c5c:	84 50       	subi	r24, 0x04	; 4
    7c5e:	96 4d       	sbci	r25, 0xD6	; 214
    7c60:	fc 01       	movw	r30, r24
    7c62:	80 81       	ld	r24, Z
    7c64:	81 30       	cpi	r24, 0x01	; 1
    7c66:	09 f0       	breq	.+2      	; 0x7c6a <recv+0x72>
    7c68:	a3 c0       	rjmp	.+326    	; 0x7db0 <recv+0x1b8>
    7c6a:	19 82       	std	Y+1, r1	; 0x01
    7c6c:	1a 82       	std	Y+2, r1	; 0x02
    7c6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c70:	28 2f       	mov	r18, r24
    7c72:	88 0f       	add	r24, r24
    7c74:	33 0b       	sbc	r19, r19
    7c76:	4b e0       	ldi	r20, 0x0B	; 11
    7c78:	42 9f       	mul	r20, r18
    7c7a:	c0 01       	movw	r24, r0
    7c7c:	43 9f       	mul	r20, r19
    7c7e:	90 0d       	add	r25, r0
    7c80:	11 24       	eor	r1, r1
    7c82:	8c 50       	subi	r24, 0x0C	; 12
    7c84:	96 4d       	sbci	r25, 0xD6	; 214
    7c86:	2d 85       	ldd	r18, Y+13	; 0x0d
    7c88:	3e 85       	ldd	r19, Y+14	; 0x0e
    7c8a:	fc 01       	movw	r30, r24
    7c8c:	20 83       	st	Z, r18
    7c8e:	31 83       	std	Z+1, r19	; 0x01
    7c90:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c92:	28 2f       	mov	r18, r24
    7c94:	88 0f       	add	r24, r24
    7c96:	33 0b       	sbc	r19, r19
    7c98:	4b e0       	ldi	r20, 0x0B	; 11
    7c9a:	42 9f       	mul	r20, r18
    7c9c:	c0 01       	movw	r24, r0
    7c9e:	43 9f       	mul	r20, r19
    7ca0:	90 0d       	add	r25, r0
    7ca2:	11 24       	eor	r1, r1
    7ca4:	8a 50       	subi	r24, 0x0A	; 10
    7ca6:	96 4d       	sbci	r25, 0xD6	; 214
    7ca8:	2f 85       	ldd	r18, Y+15	; 0x0f
    7caa:	38 89       	ldd	r19, Y+16	; 0x10
    7cac:	fc 01       	movw	r30, r24
    7cae:	20 83       	st	Z, r18
    7cb0:	31 83       	std	Z+1, r19	; 0x01
    7cb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    7cb4:	28 2f       	mov	r18, r24
    7cb6:	88 0f       	add	r24, r24
    7cb8:	33 0b       	sbc	r19, r19
    7cba:	4b e0       	ldi	r20, 0x0B	; 11
    7cbc:	42 9f       	mul	r20, r18
    7cbe:	c0 01       	movw	r24, r0
    7cc0:	43 9f       	mul	r20, r19
    7cc2:	90 0d       	add	r25, r0
    7cc4:	11 24       	eor	r1, r1
    7cc6:	82 50       	subi	r24, 0x02	; 2
    7cc8:	96 4d       	sbci	r25, 0xD6	; 214
    7cca:	fc 01       	movw	r30, r24
    7ccc:	80 81       	ld	r24, Z
    7cce:	88 23       	and	r24, r24
    7cd0:	09 f0       	breq	.+2      	; 0x7cd4 <recv+0xdc>
    7cd2:	6e c0       	rjmp	.+220    	; 0x7db0 <recv+0x1b8>
    7cd4:	86 e4       	ldi	r24, 0x46	; 70
    7cd6:	8b 83       	std	Y+3, r24	; 0x03
    7cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    7cda:	28 2f       	mov	r18, r24
    7cdc:	88 0f       	add	r24, r24
    7cde:	33 0b       	sbc	r19, r19
    7ce0:	4b e0       	ldi	r20, 0x0B	; 11
    7ce2:	42 9f       	mul	r20, r18
    7ce4:	c0 01       	movw	r24, r0
    7ce6:	43 9f       	mul	r20, r19
    7ce8:	90 0d       	add	r25, r0
    7cea:	11 24       	eor	r1, r1
    7cec:	82 50       	subi	r24, 0x02	; 2
    7cee:	96 4d       	sbci	r25, 0xD6	; 214
    7cf0:	21 e0       	ldi	r18, 0x01	; 1
    7cf2:	fc 01       	movw	r30, r24
    7cf4:	20 83       	st	Z, r18
    7cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
    7cf8:	28 2f       	mov	r18, r24
    7cfa:	88 0f       	add	r24, r24
    7cfc:	33 0b       	sbc	r19, r19
    7cfe:	4b e0       	ldi	r20, 0x0B	; 11
    7d00:	42 9f       	mul	r20, r18
    7d02:	c0 01       	movw	r24, r0
    7d04:	43 9f       	mul	r20, r19
    7d06:	90 0d       	add	r25, r0
    7d08:	11 24       	eor	r1, r1
    7d0a:	83 50       	subi	r24, 0x03	; 3
    7d0c:	96 4d       	sbci	r25, 0xD6	; 214
    7d0e:	fc 01       	movw	r30, r24
    7d10:	80 81       	ld	r24, Z
    7d12:	88 2f       	mov	r24, r24
    7d14:	90 e0       	ldi	r25, 0x00	; 0
    7d16:	81 70       	andi	r24, 0x01	; 1
    7d18:	99 27       	eor	r25, r25
    7d1a:	89 2b       	or	r24, r25
    7d1c:	11 f0       	breq	.+4      	; 0x7d22 <recv+0x12a>
    7d1e:	8d e4       	ldi	r24, 0x4D	; 77
    7d20:	8b 83       	std	Y+3, r24	; 0x03
    7d22:	89 89       	ldd	r24, Y+17	; 0x11
    7d24:	9a 89       	ldd	r25, Y+18	; 0x12
    7d26:	ab 89       	ldd	r26, Y+19	; 0x13
    7d28:	bc 89       	ldd	r27, Y+20	; 0x14
    7d2a:	89 2b       	or	r24, r25
    7d2c:	8a 2b       	or	r24, r26
    7d2e:	8b 2b       	or	r24, r27
    7d30:	41 f4       	brne	.+16     	; 0x7d42 <recv+0x14a>
    7d32:	8f ef       	ldi	r24, 0xFF	; 255
    7d34:	9f ef       	ldi	r25, 0xFF	; 255
    7d36:	dc 01       	movw	r26, r24
    7d38:	8c 83       	std	Y+4, r24	; 0x04
    7d3a:	9d 83       	std	Y+5, r25	; 0x05
    7d3c:	ae 83       	std	Y+6, r26	; 0x06
    7d3e:	bf 83       	std	Y+7, r27	; 0x07
    7d40:	08 c0       	rjmp	.+16     	; 0x7d52 <recv+0x15a>
    7d42:	89 89       	ldd	r24, Y+17	; 0x11
    7d44:	9a 89       	ldd	r25, Y+18	; 0x12
    7d46:	ab 89       	ldd	r26, Y+19	; 0x13
    7d48:	bc 89       	ldd	r27, Y+20	; 0x14
    7d4a:	8c 83       	std	Y+4, r24	; 0x04
    7d4c:	9d 83       	std	Y+5, r25	; 0x05
    7d4e:	ae 83       	std	Y+6, r26	; 0x06
    7d50:	bf 83       	std	Y+7, r27	; 0x07
    7d52:	8c 85       	ldd	r24, Y+12	; 0x0c
    7d54:	88 87       	std	Y+8, r24	; 0x08
    7d56:	8c 85       	ldd	r24, Y+12	; 0x0c
    7d58:	28 2f       	mov	r18, r24
    7d5a:	88 0f       	add	r24, r24
    7d5c:	33 0b       	sbc	r19, r19
    7d5e:	4b e0       	ldi	r20, 0x0B	; 11
    7d60:	42 9f       	mul	r20, r18
    7d62:	c0 01       	movw	r24, r0
    7d64:	43 9f       	mul	r20, r19
    7d66:	90 0d       	add	r25, r0
    7d68:	11 24       	eor	r1, r1
    7d6a:	88 50       	subi	r24, 0x08	; 8
    7d6c:	96 4d       	sbci	r25, 0xD6	; 214
    7d6e:	fc 01       	movw	r30, r24
    7d70:	80 81       	ld	r24, Z
    7d72:	91 81       	ldd	r25, Z+1	; 0x01
    7d74:	8a 87       	std	Y+10, r24	; 0x0a
    7d76:	9b 87       	std	Y+11, r25	; 0x0b
    7d78:	ce 01       	movw	r24, r28
    7d7a:	04 96       	adiw	r24, 0x04	; 4
    7d7c:	c1 2c       	mov	r12, r1
    7d7e:	d1 2c       	mov	r13, r1
    7d80:	e1 2c       	mov	r14, r1
    7d82:	f1 2c       	mov	r15, r1
    7d84:	00 e0       	ldi	r16, 0x00	; 0
    7d86:	10 e0       	ldi	r17, 0x00	; 0
    7d88:	28 e0       	ldi	r18, 0x08	; 8
    7d8a:	30 e0       	ldi	r19, 0x00	; 0
    7d8c:	ac 01       	movw	r20, r24
    7d8e:	6b 81       	ldd	r22, Y+3	; 0x03
    7d90:	82 e0       	ldi	r24, 0x02	; 2
    7d92:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    7d96:	08 2e       	mov	r0, r24
    7d98:	00 0c       	add	r0, r0
    7d9a:	99 0b       	sbc	r25, r25
    7d9c:	89 83       	std	Y+1, r24	; 0x01
    7d9e:	9a 83       	std	Y+2, r25	; 0x02
    7da0:	89 81       	ldd	r24, Y+1	; 0x01
    7da2:	9a 81       	ldd	r25, Y+2	; 0x02
    7da4:	89 2b       	or	r24, r25
    7da6:	21 f0       	breq	.+8      	; 0x7db0 <recv+0x1b8>
    7da8:	82 ef       	ldi	r24, 0xF2	; 242
    7daa:	9f ef       	ldi	r25, 0xFF	; 255
    7dac:	89 83       	std	Y+1, r24	; 0x01
    7dae:	9a 83       	std	Y+2, r25	; 0x02
    7db0:	89 81       	ldd	r24, Y+1	; 0x01
    7db2:	9a 81       	ldd	r25, Y+2	; 0x02
    7db4:	64 96       	adiw	r28, 0x14	; 20
    7db6:	cd bf       	out	0x3d, r28	; 61
    7db8:	de bf       	out	0x3e, r29	; 62
    7dba:	df 91       	pop	r29
    7dbc:	cf 91       	pop	r28
    7dbe:	1f 91       	pop	r17
    7dc0:	0f 91       	pop	r16
    7dc2:	ff 90       	pop	r15
    7dc4:	ef 90       	pop	r14
    7dc6:	df 90       	pop	r13
    7dc8:	cf 90       	pop	r12
    7dca:	08 95       	ret

00007dcc <close>:
    7dcc:	cf 92       	push	r12
    7dce:	df 92       	push	r13
    7dd0:	ef 92       	push	r14
    7dd2:	ff 92       	push	r15
    7dd4:	0f 93       	push	r16
    7dd6:	1f 93       	push	r17
    7dd8:	cf 93       	push	r28
    7dda:	df 93       	push	r29
    7ddc:	cd b7       	in	r28, 0x3d	; 61
    7dde:	de b7       	in	r29, 0x3e	; 62
    7de0:	27 97       	sbiw	r28, 0x07	; 7
    7de2:	cd bf       	out	0x3d, r28	; 61
    7de4:	de bf       	out	0x3e, r29	; 62
    7de6:	8f 83       	std	Y+7, r24	; 0x07
    7de8:	8a ef       	ldi	r24, 0xFA	; 250
    7dea:	89 83       	std	Y+1, r24	; 0x01
    7dec:	8f 81       	ldd	r24, Y+7	; 0x07
    7dee:	88 23       	and	r24, r24
    7df0:	0c f4       	brge	.+2      	; 0x7df4 <close+0x28>
    7df2:	81 c0       	rjmp	.+258    	; 0x7ef6 <close+0x12a>
    7df4:	8f 81       	ldd	r24, Y+7	; 0x07
    7df6:	28 2f       	mov	r18, r24
    7df8:	88 0f       	add	r24, r24
    7dfa:	33 0b       	sbc	r19, r19
    7dfc:	4b e0       	ldi	r20, 0x0B	; 11
    7dfe:	42 9f       	mul	r20, r18
    7e00:	c0 01       	movw	r24, r0
    7e02:	43 9f       	mul	r20, r19
    7e04:	90 0d       	add	r25, r0
    7e06:	11 24       	eor	r1, r1
    7e08:	84 50       	subi	r24, 0x04	; 4
    7e0a:	96 4d       	sbci	r25, 0xD6	; 214
    7e0c:	fc 01       	movw	r30, r24
    7e0e:	80 81       	ld	r24, Z
    7e10:	81 30       	cpi	r24, 0x01	; 1
    7e12:	09 f0       	breq	.+2      	; 0x7e16 <close+0x4a>
    7e14:	70 c0       	rjmp	.+224    	; 0x7ef6 <close+0x12a>
    7e16:	89 e4       	ldi	r24, 0x49	; 73
    7e18:	8a 83       	std	Y+2, r24	; 0x02
    7e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    7e1c:	8b 83       	std	Y+3, r24	; 0x03
    7e1e:	8f 81       	ldd	r24, Y+7	; 0x07
    7e20:	28 2f       	mov	r18, r24
    7e22:	88 0f       	add	r24, r24
    7e24:	33 0b       	sbc	r19, r19
    7e26:	4b e0       	ldi	r20, 0x0B	; 11
    7e28:	42 9f       	mul	r20, r18
    7e2a:	c0 01       	movw	r24, r0
    7e2c:	43 9f       	mul	r20, r19
    7e2e:	90 0d       	add	r25, r0
    7e30:	11 24       	eor	r1, r1
    7e32:	88 50       	subi	r24, 0x08	; 8
    7e34:	96 4d       	sbci	r25, 0xD6	; 214
    7e36:	fc 01       	movw	r30, r24
    7e38:	80 81       	ld	r24, Z
    7e3a:	91 81       	ldd	r25, Z+1	; 0x01
    7e3c:	8d 83       	std	Y+5, r24	; 0x05
    7e3e:	9e 83       	std	Y+6, r25	; 0x06
    7e40:	8f 81       	ldd	r24, Y+7	; 0x07
    7e42:	28 2f       	mov	r18, r24
    7e44:	88 0f       	add	r24, r24
    7e46:	33 0b       	sbc	r19, r19
    7e48:	4b e0       	ldi	r20, 0x0B	; 11
    7e4a:	42 9f       	mul	r20, r18
    7e4c:	c0 01       	movw	r24, r0
    7e4e:	43 9f       	mul	r20, r19
    7e50:	90 0d       	add	r25, r0
    7e52:	11 24       	eor	r1, r1
    7e54:	84 50       	subi	r24, 0x04	; 4
    7e56:	96 4d       	sbci	r25, 0xD6	; 214
    7e58:	fc 01       	movw	r30, r24
    7e5a:	10 82       	st	Z, r1
    7e5c:	8f 81       	ldd	r24, Y+7	; 0x07
    7e5e:	28 2f       	mov	r18, r24
    7e60:	88 0f       	add	r24, r24
    7e62:	33 0b       	sbc	r19, r19
    7e64:	4b e0       	ldi	r20, 0x0B	; 11
    7e66:	42 9f       	mul	r20, r18
    7e68:	c0 01       	movw	r24, r0
    7e6a:	43 9f       	mul	r20, r19
    7e6c:	90 0d       	add	r25, r0
    7e6e:	11 24       	eor	r1, r1
    7e70:	88 50       	subi	r24, 0x08	; 8
    7e72:	96 4d       	sbci	r25, 0xD6	; 214
    7e74:	fc 01       	movw	r30, r24
    7e76:	10 82       	st	Z, r1
    7e78:	11 82       	std	Z+1, r1	; 0x01
    7e7a:	8f 81       	ldd	r24, Y+7	; 0x07
    7e7c:	28 2f       	mov	r18, r24
    7e7e:	88 0f       	add	r24, r24
    7e80:	33 0b       	sbc	r19, r19
    7e82:	4b e0       	ldi	r20, 0x0B	; 11
    7e84:	42 9f       	mul	r20, r18
    7e86:	c0 01       	movw	r24, r0
    7e88:	43 9f       	mul	r20, r19
    7e8a:	90 0d       	add	r25, r0
    7e8c:	11 24       	eor	r1, r1
    7e8e:	83 50       	subi	r24, 0x03	; 3
    7e90:	96 4d       	sbci	r25, 0xD6	; 214
    7e92:	fc 01       	movw	r30, r24
    7e94:	80 81       	ld	r24, Z
    7e96:	88 2f       	mov	r24, r24
    7e98:	90 e0       	ldi	r25, 0x00	; 0
    7e9a:	81 70       	andi	r24, 0x01	; 1
    7e9c:	99 27       	eor	r25, r25
    7e9e:	89 2b       	or	r24, r25
    7ea0:	11 f0       	breq	.+4      	; 0x7ea6 <close+0xda>
    7ea2:	8e e4       	ldi	r24, 0x4E	; 78
    7ea4:	8a 83       	std	Y+2, r24	; 0x02
    7ea6:	ce 01       	movw	r24, r28
    7ea8:	03 96       	adiw	r24, 0x03	; 3
    7eaa:	c1 2c       	mov	r12, r1
    7eac:	d1 2c       	mov	r13, r1
    7eae:	e1 2c       	mov	r14, r1
    7eb0:	f1 2c       	mov	r15, r1
    7eb2:	00 e0       	ldi	r16, 0x00	; 0
    7eb4:	10 e0       	ldi	r17, 0x00	; 0
    7eb6:	24 e0       	ldi	r18, 0x04	; 4
    7eb8:	30 e0       	ldi	r19, 0x00	; 0
    7eba:	ac 01       	movw	r20, r24
    7ebc:	6a 81       	ldd	r22, Y+2	; 0x02
    7ebe:	82 e0       	ldi	r24, 0x02	; 2
    7ec0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    7ec4:	89 83       	std	Y+1, r24	; 0x01
    7ec6:	89 81       	ldd	r24, Y+1	; 0x01
    7ec8:	88 23       	and	r24, r24
    7eca:	11 f0       	breq	.+4      	; 0x7ed0 <close+0x104>
    7ecc:	87 ef       	ldi	r24, 0xF7	; 247
    7ece:	89 83       	std	Y+1, r24	; 0x01
    7ed0:	8f 81       	ldd	r24, Y+7	; 0x07
    7ed2:	28 2f       	mov	r18, r24
    7ed4:	88 0f       	add	r24, r24
    7ed6:	33 0b       	sbc	r19, r19
    7ed8:	4b e0       	ldi	r20, 0x0B	; 11
    7eda:	42 9f       	mul	r20, r18
    7edc:	c0 01       	movw	r24, r0
    7ede:	43 9f       	mul	r20, r19
    7ee0:	90 0d       	add	r25, r0
    7ee2:	11 24       	eor	r1, r1
    7ee4:	8c 50       	subi	r24, 0x0C	; 12
    7ee6:	96 4d       	sbci	r25, 0xD6	; 214
    7ee8:	2b e0       	ldi	r18, 0x0B	; 11
    7eea:	30 e0       	ldi	r19, 0x00	; 0
    7eec:	40 e0       	ldi	r20, 0x00	; 0
    7eee:	50 e0       	ldi	r21, 0x00	; 0
    7ef0:	60 e0       	ldi	r22, 0x00	; 0
    7ef2:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <m2m_memset>
    7ef6:	89 81       	ldd	r24, Y+1	; 0x01
    7ef8:	27 96       	adiw	r28, 0x07	; 7
    7efa:	cd bf       	out	0x3d, r28	; 61
    7efc:	de bf       	out	0x3e, r29	; 62
    7efe:	df 91       	pop	r29
    7f00:	cf 91       	pop	r28
    7f02:	1f 91       	pop	r17
    7f04:	0f 91       	pop	r16
    7f06:	ff 90       	pop	r15
    7f08:	ef 90       	pop	r14
    7f0a:	df 90       	pop	r13
    7f0c:	cf 90       	pop	r12
    7f0e:	08 95       	ret

00007f10 <gethostbyname>:
    7f10:	cf 92       	push	r12
    7f12:	df 92       	push	r13
    7f14:	ef 92       	push	r14
    7f16:	ff 92       	push	r15
    7f18:	0f 93       	push	r16
    7f1a:	1f 93       	push	r17
    7f1c:	cf 93       	push	r28
    7f1e:	df 93       	push	r29
    7f20:	00 d0       	rcall	.+0      	; 0x7f22 <gethostbyname+0x12>
    7f22:	00 d0       	rcall	.+0      	; 0x7f24 <gethostbyname+0x14>
    7f24:	cd b7       	in	r28, 0x3d	; 61
    7f26:	de b7       	in	r29, 0x3e	; 62
    7f28:	8b 83       	std	Y+3, r24	; 0x03
    7f2a:	9c 83       	std	Y+4, r25	; 0x04
    7f2c:	8a ef       	ldi	r24, 0xFA	; 250
    7f2e:	89 83       	std	Y+1, r24	; 0x01
    7f30:	8b 81       	ldd	r24, Y+3	; 0x03
    7f32:	9c 81       	ldd	r25, Y+4	; 0x04
    7f34:	0e 94 b7 1b 	call	0x376e	; 0x376e <m2m_strlen>
    7f38:	8a 83       	std	Y+2, r24	; 0x02
    7f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    7f3c:	81 34       	cpi	r24, 0x41	; 65
    7f3e:	98 f4       	brcc	.+38     	; 0x7f66 <gethostbyname+0x56>
    7f40:	8a 81       	ldd	r24, Y+2	; 0x02
    7f42:	88 2f       	mov	r24, r24
    7f44:	90 e0       	ldi	r25, 0x00	; 0
    7f46:	01 96       	adiw	r24, 0x01	; 1
    7f48:	9c 01       	movw	r18, r24
    7f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    7f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    7f4e:	c1 2c       	mov	r12, r1
    7f50:	d1 2c       	mov	r13, r1
    7f52:	e1 2c       	mov	r14, r1
    7f54:	f1 2c       	mov	r15, r1
    7f56:	00 e0       	ldi	r16, 0x00	; 0
    7f58:	10 e0       	ldi	r17, 0x00	; 0
    7f5a:	ac 01       	movw	r20, r24
    7f5c:	6a e4       	ldi	r22, 0x4A	; 74
    7f5e:	82 e0       	ldi	r24, 0x02	; 2
    7f60:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    7f64:	89 83       	std	Y+1, r24	; 0x01
    7f66:	89 81       	ldd	r24, Y+1	; 0x01
    7f68:	24 96       	adiw	r28, 0x04	; 4
    7f6a:	cd bf       	out	0x3d, r28	; 61
    7f6c:	de bf       	out	0x3e, r29	; 62
    7f6e:	df 91       	pop	r29
    7f70:	cf 91       	pop	r28
    7f72:	1f 91       	pop	r17
    7f74:	0f 91       	pop	r16
    7f76:	ff 90       	pop	r15
    7f78:	ef 90       	pop	r14
    7f7a:	df 90       	pop	r13
    7f7c:	cf 90       	pop	r12
    7f7e:	08 95       	ret

00007f80 <m2m_ping_req>:

Date
	4 June 2015
*********************************************************************/
sint8 m2m_ping_req(uint32 u32DstIP, uint8 u8TTL, tpfPingCb fpPingCb)
{
    7f80:	cf 92       	push	r12
    7f82:	df 92       	push	r13
    7f84:	ef 92       	push	r14
    7f86:	ff 92       	push	r15
    7f88:	0f 93       	push	r16
    7f8a:	1f 93       	push	r17
    7f8c:	cf 93       	push	r28
    7f8e:	df 93       	push	r29
    7f90:	cd b7       	in	r28, 0x3d	; 61
    7f92:	de b7       	in	r29, 0x3e	; 62
    7f94:	64 97       	sbiw	r28, 0x14	; 20
    7f96:	cd bf       	out	0x3d, r28	; 61
    7f98:	de bf       	out	0x3e, r29	; 62
    7f9a:	6e 87       	std	Y+14, r22	; 0x0e
    7f9c:	7f 87       	std	Y+15, r23	; 0x0f
    7f9e:	88 8b       	std	Y+16, r24	; 0x10
    7fa0:	99 8b       	std	Y+17, r25	; 0x11
    7fa2:	4a 8b       	std	Y+18, r20	; 0x12
    7fa4:	2b 8b       	std	Y+19, r18	; 0x13
    7fa6:	3c 8b       	std	Y+20, r19	; 0x14
	sint8	s8Ret = M2M_ERR_INVALID_ARG;
    7fa8:	81 ef       	ldi	r24, 0xF1	; 241
    7faa:	89 83       	std	Y+1, r24	; 0x01

	if((u32DstIP != 0) && (fpPingCb != NULL))
    7fac:	8e 85       	ldd	r24, Y+14	; 0x0e
    7fae:	9f 85       	ldd	r25, Y+15	; 0x0f
    7fb0:	a8 89       	ldd	r26, Y+16	; 0x10
    7fb2:	b9 89       	ldd	r27, Y+17	; 0x11
    7fb4:	89 2b       	or	r24, r25
    7fb6:	8a 2b       	or	r24, r26
    7fb8:	8b 2b       	or	r24, r27
    7fba:	61 f1       	breq	.+88     	; 0x8014 <m2m_ping_req+0x94>
    7fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    7fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    7fc0:	89 2b       	or	r24, r25
    7fc2:	41 f1       	breq	.+80     	; 0x8014 <m2m_ping_req+0x94>
	{
		tstrPingCmd	strPingCmd;

		strPingCmd.u16PingCount		= 1;
    7fc4:	81 e0       	ldi	r24, 0x01	; 1
    7fc6:	90 e0       	ldi	r25, 0x00	; 0
    7fc8:	8a 87       	std	Y+10, r24	; 0x0a
    7fca:	9b 87       	std	Y+11, r25	; 0x0b
		strPingCmd.u32DestIPAddr	= u32DstIP;
    7fcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    7fce:	9f 85       	ldd	r25, Y+15	; 0x0f
    7fd0:	a8 89       	ldd	r26, Y+16	; 0x10
    7fd2:	b9 89       	ldd	r27, Y+17	; 0x11
    7fd4:	8a 83       	std	Y+2, r24	; 0x02
    7fd6:	9b 83       	std	Y+3, r25	; 0x03
    7fd8:	ac 83       	std	Y+4, r26	; 0x04
    7fda:	bd 83       	std	Y+5, r27	; 0x05
		strPingCmd.u32CmdPrivate	= (uint32)fpPingCb;
    7fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    7fde:	9c 89       	ldd	r25, Y+20	; 0x14
    7fe0:	09 2e       	mov	r0, r25
    7fe2:	00 0c       	add	r0, r0
    7fe4:	aa 0b       	sbc	r26, r26
    7fe6:	bb 0b       	sbc	r27, r27
    7fe8:	8e 83       	std	Y+6, r24	; 0x06
    7fea:	9f 83       	std	Y+7, r25	; 0x07
    7fec:	a8 87       	std	Y+8, r26	; 0x08
    7fee:	b9 87       	std	Y+9, r27	; 0x09
		strPingCmd.u8TTL			= u8TTL;
    7ff0:	8a 89       	ldd	r24, Y+18	; 0x12
    7ff2:	8c 87       	std	Y+12, r24	; 0x0c

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_PING, (uint8*)&strPingCmd, sizeof(tstrPingCmd), NULL, 0, 0);
    7ff4:	ce 01       	movw	r24, r28
    7ff6:	02 96       	adiw	r24, 0x02	; 2
    7ff8:	c1 2c       	mov	r12, r1
    7ffa:	d1 2c       	mov	r13, r1
    7ffc:	e1 2c       	mov	r14, r1
    7ffe:	f1 2c       	mov	r15, r1
    8000:	00 e0       	ldi	r16, 0x00	; 0
    8002:	10 e0       	ldi	r17, 0x00	; 0
    8004:	2c e0       	ldi	r18, 0x0C	; 12
    8006:	30 e0       	ldi	r19, 0x00	; 0
    8008:	ac 01       	movw	r20, r24
    800a:	62 e5       	ldi	r22, 0x52	; 82
    800c:	82 e0       	ldi	r24, 0x02	; 2
    800e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <hif_send>
    8012:	89 83       	std	Y+1, r24	; 0x01
	}
	return s8Ret;
    8014:	89 81       	ldd	r24, Y+1	; 0x01
}
    8016:	64 96       	adiw	r28, 0x14	; 20
    8018:	cd bf       	out	0x3d, r28	; 61
    801a:	de bf       	out	0x3e, r29	; 62
    801c:	df 91       	pop	r29
    801e:	cf 91       	pop	r28
    8020:	1f 91       	pop	r17
    8022:	0f 91       	pop	r16
    8024:	ff 90       	pop	r15
    8026:	ef 90       	pop	r14
    8028:	df 90       	pop	r13
    802a:	cf 90       	pop	r12
    802c:	08 95       	ret

0000802e <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    802e:	cf 93       	push	r28
    8030:	df 93       	push	r29
    8032:	cd b7       	in	r28, 0x3d	; 61
    8034:	de b7       	in	r29, 0x3e	; 62
    8036:	26 97       	sbiw	r28, 0x06	; 6
    8038:	cd bf       	out	0x3d, r28	; 61
    803a:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    803c:	ce 01       	movw	r24, r28
    803e:	03 96       	adiw	r24, 0x03	; 3
    8040:	89 83       	std	Y+1, r24	; 0x01
    8042:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xb9;
    8044:	89 81       	ldd	r24, Y+1	; 0x01
    8046:	9a 81       	ldd	r25, Y+2	; 0x02
    8048:	29 eb       	ldi	r18, 0xB9	; 185
    804a:	fc 01       	movw	r30, r24
    804c:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    804e:	20 e0       	ldi	r18, 0x00	; 0
    8050:	30 e0       	ldi	r19, 0x00	; 0
    8052:	a9 01       	movw	r20, r18
    8054:	68 e0       	ldi	r22, 0x08	; 8
    8056:	72 e0       	ldi	r23, 0x02	; 2
    8058:	81 e0       	ldi	r24, 0x01	; 1
    805a:	90 e0       	ldi	r25, 0x00	; 0
    805c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8060:	89 81       	ldd	r24, Y+1	; 0x01
    8062:	9a 81       	ldd	r25, Y+2	; 0x02
    8064:	fc 01       	movw	r30, r24
    8066:	80 81       	ld	r24, Z
    8068:	88 2f       	mov	r24, r24
    806a:	90 e0       	ldi	r25, 0x00	; 0
    806c:	a0 e0       	ldi	r26, 0x00	; 0
    806e:	b0 e0       	ldi	r27, 0x00	; 0
    8070:	9c 01       	movw	r18, r24
    8072:	ad 01       	movw	r20, r26
    8074:	6c e0       	ldi	r22, 0x0C	; 12
    8076:	72 e0       	ldi	r23, 0x02	; 2
    8078:	81 e0       	ldi	r24, 0x01	; 1
    807a:	90 e0       	ldi	r25, 0x00	; 0
    807c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8080:	21 e0       	ldi	r18, 0x01	; 1
    8082:	30 e0       	ldi	r19, 0x00	; 0
    8084:	40 e0       	ldi	r20, 0x00	; 0
    8086:	50 e0       	ldi	r21, 0x00	; 0
    8088:	64 e1       	ldi	r22, 0x14	; 20
    808a:	72 e0       	ldi	r23, 0x02	; 2
    808c:	81 e0       	ldi	r24, 0x01	; 1
    808e:	90 e0       	ldi	r25, 0x00	; 0
    8090:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8094:	20 e0       	ldi	r18, 0x00	; 0
    8096:	30 e0       	ldi	r19, 0x00	; 0
    8098:	a9 01       	movw	r20, r18
    809a:	6c e1       	ldi	r22, 0x1C	; 28
    809c:	72 e0       	ldi	r23, 0x02	; 2
    809e:	81 e0       	ldi	r24, 0x01	; 1
    80a0:	90 e0       	ldi	r25, 0x00	; 0
    80a2:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    80a6:	21 e8       	ldi	r18, 0x81	; 129
    80a8:	30 e0       	ldi	r19, 0x00	; 0
    80aa:	40 e0       	ldi	r20, 0x00	; 0
    80ac:	50 e0       	ldi	r21, 0x00	; 0
    80ae:	64 e0       	ldi	r22, 0x04	; 4
    80b0:	72 e0       	ldi	r23, 0x02	; 2
    80b2:	81 e0       	ldi	r24, 0x01	; 1
    80b4:	90 e0       	ldi	r25, 0x00	; 0
    80b6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    80ba:	00 00       	nop
    80bc:	68 e1       	ldi	r22, 0x18	; 24
    80be:	72 e0       	ldi	r23, 0x02	; 2
    80c0:	81 e0       	ldi	r24, 0x01	; 1
    80c2:	90 e0       	ldi	r25, 0x00	; 0
    80c4:	0e 94 99 2b 	call	0x5732	; 0x5732 <nm_read_reg>
    80c8:	dc 01       	movw	r26, r24
    80ca:	cb 01       	movw	r24, r22
    80cc:	01 97       	sbiw	r24, 0x01	; 1
    80ce:	a1 05       	cpc	r26, r1
    80d0:	b1 05       	cpc	r27, r1
    80d2:	a1 f7       	brne	.-24     	; 0x80bc <spi_flash_enter_low_power_mode+0x8e>
}
    80d4:	00 00       	nop
    80d6:	26 96       	adiw	r28, 0x06	; 6
    80d8:	cd bf       	out	0x3d, r28	; 61
    80da:	de bf       	out	0x3e, r29	; 62
    80dc:	df 91       	pop	r29
    80de:	cf 91       	pop	r28
    80e0:	08 95       	ret

000080e2 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    80e2:	cf 93       	push	r28
    80e4:	df 93       	push	r29
    80e6:	cd b7       	in	r28, 0x3d	; 61
    80e8:	de b7       	in	r29, 0x3e	; 62
    80ea:	26 97       	sbiw	r28, 0x06	; 6
    80ec:	cd bf       	out	0x3d, r28	; 61
    80ee:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    80f0:	ce 01       	movw	r24, r28
    80f2:	03 96       	adiw	r24, 0x03	; 3
    80f4:	89 83       	std	Y+1, r24	; 0x01
    80f6:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xab;
    80f8:	89 81       	ldd	r24, Y+1	; 0x01
    80fa:	9a 81       	ldd	r25, Y+2	; 0x02
    80fc:	2b ea       	ldi	r18, 0xAB	; 171
    80fe:	fc 01       	movw	r30, r24
    8100:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8102:	20 e0       	ldi	r18, 0x00	; 0
    8104:	30 e0       	ldi	r19, 0x00	; 0
    8106:	a9 01       	movw	r20, r18
    8108:	68 e0       	ldi	r22, 0x08	; 8
    810a:	72 e0       	ldi	r23, 0x02	; 2
    810c:	81 e0       	ldi	r24, 0x01	; 1
    810e:	90 e0       	ldi	r25, 0x00	; 0
    8110:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8114:	89 81       	ldd	r24, Y+1	; 0x01
    8116:	9a 81       	ldd	r25, Y+2	; 0x02
    8118:	fc 01       	movw	r30, r24
    811a:	80 81       	ld	r24, Z
    811c:	88 2f       	mov	r24, r24
    811e:	90 e0       	ldi	r25, 0x00	; 0
    8120:	a0 e0       	ldi	r26, 0x00	; 0
    8122:	b0 e0       	ldi	r27, 0x00	; 0
    8124:	9c 01       	movw	r18, r24
    8126:	ad 01       	movw	r20, r26
    8128:	6c e0       	ldi	r22, 0x0C	; 12
    812a:	72 e0       	ldi	r23, 0x02	; 2
    812c:	81 e0       	ldi	r24, 0x01	; 1
    812e:	90 e0       	ldi	r25, 0x00	; 0
    8130:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8134:	21 e0       	ldi	r18, 0x01	; 1
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	40 e0       	ldi	r20, 0x00	; 0
    813a:	50 e0       	ldi	r21, 0x00	; 0
    813c:	64 e1       	ldi	r22, 0x14	; 20
    813e:	72 e0       	ldi	r23, 0x02	; 2
    8140:	81 e0       	ldi	r24, 0x01	; 1
    8142:	90 e0       	ldi	r25, 0x00	; 0
    8144:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8148:	20 e0       	ldi	r18, 0x00	; 0
    814a:	30 e0       	ldi	r19, 0x00	; 0
    814c:	a9 01       	movw	r20, r18
    814e:	6c e1       	ldi	r22, 0x1C	; 28
    8150:	72 e0       	ldi	r23, 0x02	; 2
    8152:	81 e0       	ldi	r24, 0x01	; 1
    8154:	90 e0       	ldi	r25, 0x00	; 0
    8156:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    815a:	21 e8       	ldi	r18, 0x81	; 129
    815c:	30 e0       	ldi	r19, 0x00	; 0
    815e:	40 e0       	ldi	r20, 0x00	; 0
    8160:	50 e0       	ldi	r21, 0x00	; 0
    8162:	64 e0       	ldi	r22, 0x04	; 4
    8164:	72 e0       	ldi	r23, 0x02	; 2
    8166:	81 e0       	ldi	r24, 0x01	; 1
    8168:	90 e0       	ldi	r25, 0x00	; 0
    816a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    816e:	00 00       	nop
    8170:	68 e1       	ldi	r22, 0x18	; 24
    8172:	72 e0       	ldi	r23, 0x02	; 2
    8174:	81 e0       	ldi	r24, 0x01	; 1
    8176:	90 e0       	ldi	r25, 0x00	; 0
    8178:	0e 94 99 2b 	call	0x5732	; 0x5732 <nm_read_reg>
    817c:	dc 01       	movw	r26, r24
    817e:	cb 01       	movw	r24, r22
    8180:	01 97       	sbiw	r24, 0x01	; 1
    8182:	a1 05       	cpc	r26, r1
    8184:	b1 05       	cpc	r27, r1
    8186:	a1 f7       	brne	.-24     	; 0x8170 <spi_flash_leave_low_power_mode+0x8e>
}
    8188:	00 00       	nop
    818a:	26 96       	adiw	r28, 0x06	; 6
    818c:	cd bf       	out	0x3d, r28	; 61
    818e:	de bf       	out	0x3e, r29	; 62
    8190:	df 91       	pop	r29
    8192:	cf 91       	pop	r28
    8194:	08 95       	ret

00008196 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    8196:	cf 93       	push	r28
    8198:	df 93       	push	r29
    819a:	cd b7       	in	r28, 0x3d	; 61
    819c:	de b7       	in	r29, 0x3e	; 62
    819e:	26 97       	sbiw	r28, 0x06	; 6
    81a0:	cd bf       	out	0x3d, r28	; 61
    81a2:	de bf       	out	0x3e, r29	; 62
    81a4:	8e 83       	std	Y+6, r24	; 0x06
	sint8 s8Ret = M2M_SUCCESS;
    81a6:	19 82       	std	Y+1, r1	; 0x01
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    81a8:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <nmi_get_chipid>
    81ac:	dc 01       	movw	r26, r24
    81ae:	cb 01       	movw	r24, r22
    81b0:	9f 70       	andi	r25, 0x0F	; 15
    81b2:	aa 27       	eor	r26, r26
    81b4:	bb 27       	eor	r27, r27
    81b6:	80 3a       	cpi	r24, 0xA0	; 160
    81b8:	93 40       	sbci	r25, 0x03	; 3
    81ba:	a1 05       	cpc	r26, r1
    81bc:	b1 05       	cpc	r27, r1
    81be:	08 f4       	brcc	.+2      	; 0x81c2 <spi_flash_enable+0x2c>
    81c0:	5a c0       	rjmp	.+180    	; 0x8276 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    81c2:	ce 01       	movw	r24, r28
    81c4:	02 96       	adiw	r24, 0x02	; 2
    81c6:	ac 01       	movw	r20, r24
    81c8:	60 e1       	ldi	r22, 0x10	; 16
    81ca:	74 e1       	ldi	r23, 0x14	; 20
    81cc:	80 e0       	ldi	r24, 0x00	; 0
    81ce:	90 e0       	ldi	r25, 0x00	; 0
    81d0:	0e 94 b5 2b 	call	0x576a	; 0x576a <nm_read_reg_with_ret>
    81d4:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != M2M_SUCCESS) {
    81d6:	89 81       	ldd	r24, Y+1	; 0x01
    81d8:	88 23       	and	r24, r24
    81da:	09 f0       	breq	.+2      	; 0x81de <spi_flash_enable+0x48>
    81dc:	4b c0       	rjmp	.+150    	; 0x8274 <spi_flash_enable+0xde>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    81de:	8a 81       	ldd	r24, Y+2	; 0x02
    81e0:	9b 81       	ldd	r25, Y+3	; 0x03
    81e2:	ac 81       	ldd	r26, Y+4	; 0x04
    81e4:	bd 81       	ldd	r27, Y+5	; 0x05
    81e6:	9f 78       	andi	r25, 0x8F	; 143
    81e8:	a8 78       	andi	r26, 0x88	; 136
    81ea:	b8 7f       	andi	r27, 0xF8	; 248
    81ec:	8a 83       	std	Y+2, r24	; 0x02
    81ee:	9b 83       	std	Y+3, r25	; 0x03
    81f0:	ac 83       	std	Y+4, r26	; 0x04
    81f2:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x1111ul) << 12);
    81f4:	8a 81       	ldd	r24, Y+2	; 0x02
    81f6:	9b 81       	ldd	r25, Y+3	; 0x03
    81f8:	ac 81       	ldd	r26, Y+4	; 0x04
    81fa:	bd 81       	ldd	r27, Y+5	; 0x05
    81fc:	90 61       	ori	r25, 0x10	; 16
    81fe:	a1 61       	ori	r26, 0x11	; 17
    8200:	b1 60       	ori	r27, 0x01	; 1
    8202:	8a 83       	std	Y+2, r24	; 0x02
    8204:	9b 83       	std	Y+3, r25	; 0x03
    8206:	ac 83       	std	Y+4, r26	; 0x04
    8208:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    820a:	8a 81       	ldd	r24, Y+2	; 0x02
    820c:	9b 81       	ldd	r25, Y+3	; 0x03
    820e:	ac 81       	ldd	r26, Y+4	; 0x04
    8210:	bd 81       	ldd	r27, Y+5	; 0x05
    8212:	9c 01       	movw	r18, r24
    8214:	ad 01       	movw	r20, r26
    8216:	60 e1       	ldi	r22, 0x10	; 16
    8218:	74 e1       	ldi	r23, 0x14	; 20
    821a:	80 e0       	ldi	r24, 0x00	; 0
    821c:	90 e0       	ldi	r25, 0x00	; 0
    821e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
		if(enable) {
    8222:	8e 81       	ldd	r24, Y+6	; 0x06
    8224:	88 23       	and	r24, r24
    8226:	19 f0       	breq	.+6      	; 0x822e <spi_flash_enable+0x98>
			spi_flash_leave_low_power_mode();
    8228:	0e 94 71 40 	call	0x80e2	; 0x80e2 <spi_flash_leave_low_power_mode>
    822c:	02 c0       	rjmp	.+4      	; 0x8232 <spi_flash_enable+0x9c>
		} else {
			spi_flash_enter_low_power_mode();
    822e:	0e 94 17 40 	call	0x802e	; 0x802e <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    8232:	8a 81       	ldd	r24, Y+2	; 0x02
    8234:	9b 81       	ldd	r25, Y+3	; 0x03
    8236:	ac 81       	ldd	r26, Y+4	; 0x04
    8238:	bd 81       	ldd	r27, Y+5	; 0x05
    823a:	9f 78       	andi	r25, 0x8F	; 143
    823c:	a8 78       	andi	r26, 0x88	; 136
    823e:	b8 7f       	andi	r27, 0xF8	; 248
    8240:	8a 83       	std	Y+2, r24	; 0x02
    8242:	9b 83       	std	Y+3, r25	; 0x03
    8244:	ac 83       	std	Y+4, r26	; 0x04
    8246:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x0010ul) << 12);
    8248:	8a 81       	ldd	r24, Y+2	; 0x02
    824a:	9b 81       	ldd	r25, Y+3	; 0x03
    824c:	ac 81       	ldd	r26, Y+4	; 0x04
    824e:	bd 81       	ldd	r27, Y+5	; 0x05
    8250:	a1 60       	ori	r26, 0x01	; 1
    8252:	8a 83       	std	Y+2, r24	; 0x02
    8254:	9b 83       	std	Y+3, r25	; 0x03
    8256:	ac 83       	std	Y+4, r26	; 0x04
    8258:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    825a:	8a 81       	ldd	r24, Y+2	; 0x02
    825c:	9b 81       	ldd	r25, Y+3	; 0x03
    825e:	ac 81       	ldd	r26, Y+4	; 0x04
    8260:	bd 81       	ldd	r27, Y+5	; 0x05
    8262:	9c 01       	movw	r18, r24
    8264:	ad 01       	movw	r20, r26
    8266:	60 e1       	ldi	r22, 0x10	; 16
    8268:	74 e1       	ldi	r23, 0x14	; 20
    826a:	80 e0       	ldi	r24, 0x00	; 0
    826c:	90 e0       	ldi	r25, 0x00	; 0
    826e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <nm_write_reg>
    8272:	01 c0       	rjmp	.+2      	; 0x8276 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    8274:	00 00       	nop
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    8276:	89 81       	ldd	r24, Y+1	; 0x01
}
    8278:	26 96       	adiw	r28, 0x06	; 6
    827a:	cd bf       	out	0x3d, r28	; 61
    827c:	de bf       	out	0x3e, r29	; 62
    827e:	df 91       	pop	r29
    8280:	cf 91       	pop	r28
    8282:	08 95       	ret

00008284 <__cmpsf2>:
    8284:	0e 94 76 41 	call	0x82ec	; 0x82ec <__fp_cmp>
    8288:	08 f4       	brcc	.+2      	; 0x828c <__cmpsf2+0x8>
    828a:	81 e0       	ldi	r24, 0x01	; 1
    828c:	08 95       	ret

0000828e <__fixunssfsi>:
    828e:	0e 94 a2 41 	call	0x8344	; 0x8344 <__fp_splitA>
    8292:	88 f0       	brcs	.+34     	; 0x82b6 <__fixunssfsi+0x28>
    8294:	9f 57       	subi	r25, 0x7F	; 127
    8296:	98 f0       	brcs	.+38     	; 0x82be <__fixunssfsi+0x30>
    8298:	b9 2f       	mov	r27, r25
    829a:	99 27       	eor	r25, r25
    829c:	b7 51       	subi	r27, 0x17	; 23
    829e:	b0 f0       	brcs	.+44     	; 0x82cc <__fixunssfsi+0x3e>
    82a0:	e1 f0       	breq	.+56     	; 0x82da <__fixunssfsi+0x4c>
    82a2:	66 0f       	add	r22, r22
    82a4:	77 1f       	adc	r23, r23
    82a6:	88 1f       	adc	r24, r24
    82a8:	99 1f       	adc	r25, r25
    82aa:	1a f0       	brmi	.+6      	; 0x82b2 <__fixunssfsi+0x24>
    82ac:	ba 95       	dec	r27
    82ae:	c9 f7       	brne	.-14     	; 0x82a2 <__fixunssfsi+0x14>
    82b0:	14 c0       	rjmp	.+40     	; 0x82da <__fixunssfsi+0x4c>
    82b2:	b1 30       	cpi	r27, 0x01	; 1
    82b4:	91 f0       	breq	.+36     	; 0x82da <__fixunssfsi+0x4c>
    82b6:	0e 94 bc 41 	call	0x8378	; 0x8378 <__fp_zero>
    82ba:	b1 e0       	ldi	r27, 0x01	; 1
    82bc:	08 95       	ret
    82be:	0c 94 bc 41 	jmp	0x8378	; 0x8378 <__fp_zero>
    82c2:	67 2f       	mov	r22, r23
    82c4:	78 2f       	mov	r23, r24
    82c6:	88 27       	eor	r24, r24
    82c8:	b8 5f       	subi	r27, 0xF8	; 248
    82ca:	39 f0       	breq	.+14     	; 0x82da <__fixunssfsi+0x4c>
    82cc:	b9 3f       	cpi	r27, 0xF9	; 249
    82ce:	cc f3       	brlt	.-14     	; 0x82c2 <__fixunssfsi+0x34>
    82d0:	86 95       	lsr	r24
    82d2:	77 95       	ror	r23
    82d4:	67 95       	ror	r22
    82d6:	b3 95       	inc	r27
    82d8:	d9 f7       	brne	.-10     	; 0x82d0 <__fixunssfsi+0x42>
    82da:	3e f4       	brtc	.+14     	; 0x82ea <__fixunssfsi+0x5c>
    82dc:	90 95       	com	r25
    82de:	80 95       	com	r24
    82e0:	70 95       	com	r23
    82e2:	61 95       	neg	r22
    82e4:	7f 4f       	sbci	r23, 0xFF	; 255
    82e6:	8f 4f       	sbci	r24, 0xFF	; 255
    82e8:	9f 4f       	sbci	r25, 0xFF	; 255
    82ea:	08 95       	ret

000082ec <__fp_cmp>:
    82ec:	99 0f       	add	r25, r25
    82ee:	00 08       	sbc	r0, r0
    82f0:	55 0f       	add	r21, r21
    82f2:	aa 0b       	sbc	r26, r26
    82f4:	e0 e8       	ldi	r30, 0x80	; 128
    82f6:	fe ef       	ldi	r31, 0xFE	; 254
    82f8:	16 16       	cp	r1, r22
    82fa:	17 06       	cpc	r1, r23
    82fc:	e8 07       	cpc	r30, r24
    82fe:	f9 07       	cpc	r31, r25
    8300:	c0 f0       	brcs	.+48     	; 0x8332 <__fp_cmp+0x46>
    8302:	12 16       	cp	r1, r18
    8304:	13 06       	cpc	r1, r19
    8306:	e4 07       	cpc	r30, r20
    8308:	f5 07       	cpc	r31, r21
    830a:	98 f0       	brcs	.+38     	; 0x8332 <__fp_cmp+0x46>
    830c:	62 1b       	sub	r22, r18
    830e:	73 0b       	sbc	r23, r19
    8310:	84 0b       	sbc	r24, r20
    8312:	95 0b       	sbc	r25, r21
    8314:	39 f4       	brne	.+14     	; 0x8324 <__fp_cmp+0x38>
    8316:	0a 26       	eor	r0, r26
    8318:	61 f0       	breq	.+24     	; 0x8332 <__fp_cmp+0x46>
    831a:	23 2b       	or	r18, r19
    831c:	24 2b       	or	r18, r20
    831e:	25 2b       	or	r18, r21
    8320:	21 f4       	brne	.+8      	; 0x832a <__fp_cmp+0x3e>
    8322:	08 95       	ret
    8324:	0a 26       	eor	r0, r26
    8326:	09 f4       	brne	.+2      	; 0x832a <__fp_cmp+0x3e>
    8328:	a1 40       	sbci	r26, 0x01	; 1
    832a:	a6 95       	lsr	r26
    832c:	8f ef       	ldi	r24, 0xFF	; 255
    832e:	81 1d       	adc	r24, r1
    8330:	81 1d       	adc	r24, r1
    8332:	08 95       	ret

00008334 <__fp_split3>:
    8334:	57 fd       	sbrc	r21, 7
    8336:	90 58       	subi	r25, 0x80	; 128
    8338:	44 0f       	add	r20, r20
    833a:	55 1f       	adc	r21, r21
    833c:	59 f0       	breq	.+22     	; 0x8354 <__fp_splitA+0x10>
    833e:	5f 3f       	cpi	r21, 0xFF	; 255
    8340:	71 f0       	breq	.+28     	; 0x835e <__fp_splitA+0x1a>
    8342:	47 95       	ror	r20

00008344 <__fp_splitA>:
    8344:	88 0f       	add	r24, r24
    8346:	97 fb       	bst	r25, 7
    8348:	99 1f       	adc	r25, r25
    834a:	61 f0       	breq	.+24     	; 0x8364 <__fp_splitA+0x20>
    834c:	9f 3f       	cpi	r25, 0xFF	; 255
    834e:	79 f0       	breq	.+30     	; 0x836e <__fp_splitA+0x2a>
    8350:	87 95       	ror	r24
    8352:	08 95       	ret
    8354:	12 16       	cp	r1, r18
    8356:	13 06       	cpc	r1, r19
    8358:	14 06       	cpc	r1, r20
    835a:	55 1f       	adc	r21, r21
    835c:	f2 cf       	rjmp	.-28     	; 0x8342 <__fp_split3+0xe>
    835e:	46 95       	lsr	r20
    8360:	f1 df       	rcall	.-30     	; 0x8344 <__fp_splitA>
    8362:	08 c0       	rjmp	.+16     	; 0x8374 <__fp_splitA+0x30>
    8364:	16 16       	cp	r1, r22
    8366:	17 06       	cpc	r1, r23
    8368:	18 06       	cpc	r1, r24
    836a:	99 1f       	adc	r25, r25
    836c:	f1 cf       	rjmp	.-30     	; 0x8350 <__fp_splitA+0xc>
    836e:	86 95       	lsr	r24
    8370:	71 05       	cpc	r23, r1
    8372:	61 05       	cpc	r22, r1
    8374:	08 94       	sec
    8376:	08 95       	ret

00008378 <__fp_zero>:
    8378:	e8 94       	clt

0000837a <__fp_szero>:
    837a:	bb 27       	eor	r27, r27
    837c:	66 27       	eor	r22, r22
    837e:	77 27       	eor	r23, r23
    8380:	cb 01       	movw	r24, r22
    8382:	97 f9       	bld	r25, 7
    8384:	08 95       	ret

00008386 <__gesf2>:
    8386:	0e 94 76 41 	call	0x82ec	; 0x82ec <__fp_cmp>
    838a:	08 f4       	brcc	.+2      	; 0x838e <__gesf2+0x8>
    838c:	8f ef       	ldi	r24, 0xFF	; 255
    838e:	08 95       	ret

00008390 <__mulsf3>:
    8390:	0e 94 db 41 	call	0x83b6	; 0x83b6 <__mulsf3x>
    8394:	0c 94 4c 42 	jmp	0x8498	; 0x8498 <__fp_round>
    8398:	0e 94 3e 42 	call	0x847c	; 0x847c <__fp_pscA>
    839c:	38 f0       	brcs	.+14     	; 0x83ac <__mulsf3+0x1c>
    839e:	0e 94 45 42 	call	0x848a	; 0x848a <__fp_pscB>
    83a2:	20 f0       	brcs	.+8      	; 0x83ac <__mulsf3+0x1c>
    83a4:	95 23       	and	r25, r21
    83a6:	11 f0       	breq	.+4      	; 0x83ac <__mulsf3+0x1c>
    83a8:	0c 94 35 42 	jmp	0x846a	; 0x846a <__fp_inf>
    83ac:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__fp_nan>
    83b0:	11 24       	eor	r1, r1
    83b2:	0c 94 bd 41 	jmp	0x837a	; 0x837a <__fp_szero>

000083b6 <__mulsf3x>:
    83b6:	0e 94 9a 41 	call	0x8334	; 0x8334 <__fp_split3>
    83ba:	70 f3       	brcs	.-36     	; 0x8398 <__mulsf3+0x8>

000083bc <__mulsf3_pse>:
    83bc:	95 9f       	mul	r25, r21
    83be:	c1 f3       	breq	.-16     	; 0x83b0 <__mulsf3+0x20>
    83c0:	95 0f       	add	r25, r21
    83c2:	50 e0       	ldi	r21, 0x00	; 0
    83c4:	55 1f       	adc	r21, r21
    83c6:	62 9f       	mul	r22, r18
    83c8:	f0 01       	movw	r30, r0
    83ca:	72 9f       	mul	r23, r18
    83cc:	bb 27       	eor	r27, r27
    83ce:	f0 0d       	add	r31, r0
    83d0:	b1 1d       	adc	r27, r1
    83d2:	63 9f       	mul	r22, r19
    83d4:	aa 27       	eor	r26, r26
    83d6:	f0 0d       	add	r31, r0
    83d8:	b1 1d       	adc	r27, r1
    83da:	aa 1f       	adc	r26, r26
    83dc:	64 9f       	mul	r22, r20
    83de:	66 27       	eor	r22, r22
    83e0:	b0 0d       	add	r27, r0
    83e2:	a1 1d       	adc	r26, r1
    83e4:	66 1f       	adc	r22, r22
    83e6:	82 9f       	mul	r24, r18
    83e8:	22 27       	eor	r18, r18
    83ea:	b0 0d       	add	r27, r0
    83ec:	a1 1d       	adc	r26, r1
    83ee:	62 1f       	adc	r22, r18
    83f0:	73 9f       	mul	r23, r19
    83f2:	b0 0d       	add	r27, r0
    83f4:	a1 1d       	adc	r26, r1
    83f6:	62 1f       	adc	r22, r18
    83f8:	83 9f       	mul	r24, r19
    83fa:	a0 0d       	add	r26, r0
    83fc:	61 1d       	adc	r22, r1
    83fe:	22 1f       	adc	r18, r18
    8400:	74 9f       	mul	r23, r20
    8402:	33 27       	eor	r19, r19
    8404:	a0 0d       	add	r26, r0
    8406:	61 1d       	adc	r22, r1
    8408:	23 1f       	adc	r18, r19
    840a:	84 9f       	mul	r24, r20
    840c:	60 0d       	add	r22, r0
    840e:	21 1d       	adc	r18, r1
    8410:	82 2f       	mov	r24, r18
    8412:	76 2f       	mov	r23, r22
    8414:	6a 2f       	mov	r22, r26
    8416:	11 24       	eor	r1, r1
    8418:	9f 57       	subi	r25, 0x7F	; 127
    841a:	50 40       	sbci	r21, 0x00	; 0
    841c:	9a f0       	brmi	.+38     	; 0x8444 <__mulsf3_pse+0x88>
    841e:	f1 f0       	breq	.+60     	; 0x845c <__mulsf3_pse+0xa0>
    8420:	88 23       	and	r24, r24
    8422:	4a f0       	brmi	.+18     	; 0x8436 <__mulsf3_pse+0x7a>
    8424:	ee 0f       	add	r30, r30
    8426:	ff 1f       	adc	r31, r31
    8428:	bb 1f       	adc	r27, r27
    842a:	66 1f       	adc	r22, r22
    842c:	77 1f       	adc	r23, r23
    842e:	88 1f       	adc	r24, r24
    8430:	91 50       	subi	r25, 0x01	; 1
    8432:	50 40       	sbci	r21, 0x00	; 0
    8434:	a9 f7       	brne	.-22     	; 0x8420 <__mulsf3_pse+0x64>
    8436:	9e 3f       	cpi	r25, 0xFE	; 254
    8438:	51 05       	cpc	r21, r1
    843a:	80 f0       	brcs	.+32     	; 0x845c <__mulsf3_pse+0xa0>
    843c:	0c 94 35 42 	jmp	0x846a	; 0x846a <__fp_inf>
    8440:	0c 94 bd 41 	jmp	0x837a	; 0x837a <__fp_szero>
    8444:	5f 3f       	cpi	r21, 0xFF	; 255
    8446:	e4 f3       	brlt	.-8      	; 0x8440 <__mulsf3_pse+0x84>
    8448:	98 3e       	cpi	r25, 0xE8	; 232
    844a:	d4 f3       	brlt	.-12     	; 0x8440 <__mulsf3_pse+0x84>
    844c:	86 95       	lsr	r24
    844e:	77 95       	ror	r23
    8450:	67 95       	ror	r22
    8452:	b7 95       	ror	r27
    8454:	f7 95       	ror	r31
    8456:	e7 95       	ror	r30
    8458:	9f 5f       	subi	r25, 0xFF	; 255
    845a:	c1 f7       	brne	.-16     	; 0x844c <__mulsf3_pse+0x90>
    845c:	fe 2b       	or	r31, r30
    845e:	88 0f       	add	r24, r24
    8460:	91 1d       	adc	r25, r1
    8462:	96 95       	lsr	r25
    8464:	87 95       	ror	r24
    8466:	97 f9       	bld	r25, 7
    8468:	08 95       	ret

0000846a <__fp_inf>:
    846a:	97 f9       	bld	r25, 7
    846c:	9f 67       	ori	r25, 0x7F	; 127
    846e:	80 e8       	ldi	r24, 0x80	; 128
    8470:	70 e0       	ldi	r23, 0x00	; 0
    8472:	60 e0       	ldi	r22, 0x00	; 0
    8474:	08 95       	ret

00008476 <__fp_nan>:
    8476:	9f ef       	ldi	r25, 0xFF	; 255
    8478:	80 ec       	ldi	r24, 0xC0	; 192
    847a:	08 95       	ret

0000847c <__fp_pscA>:
    847c:	00 24       	eor	r0, r0
    847e:	0a 94       	dec	r0
    8480:	16 16       	cp	r1, r22
    8482:	17 06       	cpc	r1, r23
    8484:	18 06       	cpc	r1, r24
    8486:	09 06       	cpc	r0, r25
    8488:	08 95       	ret

0000848a <__fp_pscB>:
    848a:	00 24       	eor	r0, r0
    848c:	0a 94       	dec	r0
    848e:	12 16       	cp	r1, r18
    8490:	13 06       	cpc	r1, r19
    8492:	14 06       	cpc	r1, r20
    8494:	05 06       	cpc	r0, r21
    8496:	08 95       	ret

00008498 <__fp_round>:
    8498:	09 2e       	mov	r0, r25
    849a:	03 94       	inc	r0
    849c:	00 0c       	add	r0, r0
    849e:	11 f4       	brne	.+4      	; 0x84a4 <__fp_round+0xc>
    84a0:	88 23       	and	r24, r24
    84a2:	52 f0       	brmi	.+20     	; 0x84b8 <__fp_round+0x20>
    84a4:	bb 0f       	add	r27, r27
    84a6:	40 f4       	brcc	.+16     	; 0x84b8 <__fp_round+0x20>
    84a8:	bf 2b       	or	r27, r31
    84aa:	11 f4       	brne	.+4      	; 0x84b0 <__fp_round+0x18>
    84ac:	60 ff       	sbrs	r22, 0
    84ae:	04 c0       	rjmp	.+8      	; 0x84b8 <__fp_round+0x20>
    84b0:	6f 5f       	subi	r22, 0xFF	; 255
    84b2:	7f 4f       	sbci	r23, 0xFF	; 255
    84b4:	8f 4f       	sbci	r24, 0xFF	; 255
    84b6:	9f 4f       	sbci	r25, 0xFF	; 255
    84b8:	08 95       	ret

000084ba <__divmodhi4>:
    84ba:	97 fb       	bst	r25, 7
    84bc:	07 2e       	mov	r0, r23
    84be:	16 f4       	brtc	.+4      	; 0x84c4 <__divmodhi4+0xa>
    84c0:	00 94       	com	r0
    84c2:	07 d0       	rcall	.+14     	; 0x84d2 <__divmodhi4_neg1>
    84c4:	77 fd       	sbrc	r23, 7
    84c6:	09 d0       	rcall	.+18     	; 0x84da <__divmodhi4_neg2>
    84c8:	0e 94 77 42 	call	0x84ee	; 0x84ee <__udivmodhi4>
    84cc:	07 fc       	sbrc	r0, 7
    84ce:	05 d0       	rcall	.+10     	; 0x84da <__divmodhi4_neg2>
    84d0:	3e f4       	brtc	.+14     	; 0x84e0 <__divmodhi4_exit>

000084d2 <__divmodhi4_neg1>:
    84d2:	90 95       	com	r25
    84d4:	81 95       	neg	r24
    84d6:	9f 4f       	sbci	r25, 0xFF	; 255
    84d8:	08 95       	ret

000084da <__divmodhi4_neg2>:
    84da:	70 95       	com	r23
    84dc:	61 95       	neg	r22
    84de:	7f 4f       	sbci	r23, 0xFF	; 255

000084e0 <__divmodhi4_exit>:
    84e0:	08 95       	ret

000084e2 <__tablejump2__>:
    84e2:	ee 0f       	add	r30, r30
    84e4:	ff 1f       	adc	r31, r31
    84e6:	05 90       	lpm	r0, Z+
    84e8:	f4 91       	lpm	r31, Z
    84ea:	e0 2d       	mov	r30, r0
    84ec:	09 94       	ijmp

000084ee <__udivmodhi4>:
    84ee:	aa 1b       	sub	r26, r26
    84f0:	bb 1b       	sub	r27, r27
    84f2:	51 e1       	ldi	r21, 0x11	; 17
    84f4:	07 c0       	rjmp	.+14     	; 0x8504 <__udivmodhi4_ep>

000084f6 <__udivmodhi4_loop>:
    84f6:	aa 1f       	adc	r26, r26
    84f8:	bb 1f       	adc	r27, r27
    84fa:	a6 17       	cp	r26, r22
    84fc:	b7 07       	cpc	r27, r23
    84fe:	10 f0       	brcs	.+4      	; 0x8504 <__udivmodhi4_ep>
    8500:	a6 1b       	sub	r26, r22
    8502:	b7 0b       	sbc	r27, r23

00008504 <__udivmodhi4_ep>:
    8504:	88 1f       	adc	r24, r24
    8506:	99 1f       	adc	r25, r25
    8508:	5a 95       	dec	r21
    850a:	a9 f7       	brne	.-22     	; 0x84f6 <__udivmodhi4_loop>
    850c:	80 95       	com	r24
    850e:	90 95       	com	r25
    8510:	bc 01       	movw	r22, r24
    8512:	cd 01       	movw	r24, r26
    8514:	08 95       	ret

00008516 <memcpy>:
    8516:	fb 01       	movw	r30, r22
    8518:	dc 01       	movw	r26, r24
    851a:	02 c0       	rjmp	.+4      	; 0x8520 <memcpy+0xa>
    851c:	01 90       	ld	r0, Z+
    851e:	0d 92       	st	X+, r0
    8520:	41 50       	subi	r20, 0x01	; 1
    8522:	50 40       	sbci	r21, 0x00	; 0
    8524:	d8 f7       	brcc	.-10     	; 0x851c <memcpy+0x6>
    8526:	08 95       	ret

00008528 <strlen>:
    8528:	fc 01       	movw	r30, r24
    852a:	01 90       	ld	r0, Z+
    852c:	00 20       	and	r0, r0
    852e:	e9 f7       	brne	.-6      	; 0x852a <strlen+0x2>
    8530:	80 95       	com	r24
    8532:	90 95       	com	r25
    8534:	8e 0f       	add	r24, r30
    8536:	9f 1f       	adc	r25, r31
    8538:	08 95       	ret

0000853a <sprintf>:
    853a:	ae e0       	ldi	r26, 0x0E	; 14
    853c:	b0 e0       	ldi	r27, 0x00	; 0
    853e:	e3 ea       	ldi	r30, 0xA3	; 163
    8540:	f2 e4       	ldi	r31, 0x42	; 66
    8542:	0c 94 5e 45 	jmp	0x8abc	; 0x8abc <__prologue_saves__+0x1c>
    8546:	0d 89       	ldd	r16, Y+21	; 0x15
    8548:	1e 89       	ldd	r17, Y+22	; 0x16
    854a:	86 e0       	ldi	r24, 0x06	; 6
    854c:	8c 83       	std	Y+4, r24	; 0x04
    854e:	09 83       	std	Y+1, r16	; 0x01
    8550:	1a 83       	std	Y+2, r17	; 0x02
    8552:	8f ef       	ldi	r24, 0xFF	; 255
    8554:	9f e7       	ldi	r25, 0x7F	; 127
    8556:	8d 83       	std	Y+5, r24	; 0x05
    8558:	9e 83       	std	Y+6, r25	; 0x06
    855a:	ae 01       	movw	r20, r28
    855c:	47 5e       	subi	r20, 0xE7	; 231
    855e:	5f 4f       	sbci	r21, 0xFF	; 255
    8560:	6f 89       	ldd	r22, Y+23	; 0x17
    8562:	78 8d       	ldd	r23, Y+24	; 0x18
    8564:	ce 01       	movw	r24, r28
    8566:	01 96       	adiw	r24, 0x01	; 1
    8568:	0e 94 bf 42 	call	0x857e	; 0x857e <vfprintf>
    856c:	ef 81       	ldd	r30, Y+7	; 0x07
    856e:	f8 85       	ldd	r31, Y+8	; 0x08
    8570:	e0 0f       	add	r30, r16
    8572:	f1 1f       	adc	r31, r17
    8574:	10 82       	st	Z, r1
    8576:	2e 96       	adiw	r28, 0x0e	; 14
    8578:	e4 e0       	ldi	r30, 0x04	; 4
    857a:	0c 94 77 45 	jmp	0x8aee	; 0x8aee <__epilogue_restores__+0x1c>

0000857e <vfprintf>:
    857e:	ab e0       	ldi	r26, 0x0B	; 11
    8580:	b0 e0       	ldi	r27, 0x00	; 0
    8582:	e5 ec       	ldi	r30, 0xC5	; 197
    8584:	f2 e4       	ldi	r31, 0x42	; 66
    8586:	0c 94 50 45 	jmp	0x8aa0	; 0x8aa0 <__prologue_saves__>
    858a:	6c 01       	movw	r12, r24
    858c:	7b 01       	movw	r14, r22
    858e:	8a 01       	movw	r16, r20
    8590:	fc 01       	movw	r30, r24
    8592:	16 82       	std	Z+6, r1	; 0x06
    8594:	17 82       	std	Z+7, r1	; 0x07
    8596:	83 81       	ldd	r24, Z+3	; 0x03
    8598:	81 ff       	sbrs	r24, 1
    859a:	cc c1       	rjmp	.+920    	; 0x8934 <vfprintf+0x3b6>
    859c:	ce 01       	movw	r24, r28
    859e:	01 96       	adiw	r24, 0x01	; 1
    85a0:	3c 01       	movw	r6, r24
    85a2:	f6 01       	movw	r30, r12
    85a4:	93 81       	ldd	r25, Z+3	; 0x03
    85a6:	f7 01       	movw	r30, r14
    85a8:	93 fd       	sbrc	r25, 3
    85aa:	85 91       	lpm	r24, Z+
    85ac:	93 ff       	sbrs	r25, 3
    85ae:	81 91       	ld	r24, Z+
    85b0:	7f 01       	movw	r14, r30
    85b2:	88 23       	and	r24, r24
    85b4:	09 f4       	brne	.+2      	; 0x85b8 <vfprintf+0x3a>
    85b6:	ba c1       	rjmp	.+884    	; 0x892c <vfprintf+0x3ae>
    85b8:	85 32       	cpi	r24, 0x25	; 37
    85ba:	39 f4       	brne	.+14     	; 0x85ca <vfprintf+0x4c>
    85bc:	93 fd       	sbrc	r25, 3
    85be:	85 91       	lpm	r24, Z+
    85c0:	93 ff       	sbrs	r25, 3
    85c2:	81 91       	ld	r24, Z+
    85c4:	7f 01       	movw	r14, r30
    85c6:	85 32       	cpi	r24, 0x25	; 37
    85c8:	29 f4       	brne	.+10     	; 0x85d4 <vfprintf+0x56>
    85ca:	b6 01       	movw	r22, r12
    85cc:	90 e0       	ldi	r25, 0x00	; 0
    85ce:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    85d2:	e7 cf       	rjmp	.-50     	; 0x85a2 <vfprintf+0x24>
    85d4:	91 2c       	mov	r9, r1
    85d6:	21 2c       	mov	r2, r1
    85d8:	31 2c       	mov	r3, r1
    85da:	ff e1       	ldi	r31, 0x1F	; 31
    85dc:	f3 15       	cp	r31, r3
    85de:	d8 f0       	brcs	.+54     	; 0x8616 <vfprintf+0x98>
    85e0:	8b 32       	cpi	r24, 0x2B	; 43
    85e2:	79 f0       	breq	.+30     	; 0x8602 <vfprintf+0x84>
    85e4:	38 f4       	brcc	.+14     	; 0x85f4 <vfprintf+0x76>
    85e6:	80 32       	cpi	r24, 0x20	; 32
    85e8:	79 f0       	breq	.+30     	; 0x8608 <vfprintf+0x8a>
    85ea:	83 32       	cpi	r24, 0x23	; 35
    85ec:	a1 f4       	brne	.+40     	; 0x8616 <vfprintf+0x98>
    85ee:	23 2d       	mov	r18, r3
    85f0:	20 61       	ori	r18, 0x10	; 16
    85f2:	1d c0       	rjmp	.+58     	; 0x862e <vfprintf+0xb0>
    85f4:	8d 32       	cpi	r24, 0x2D	; 45
    85f6:	61 f0       	breq	.+24     	; 0x8610 <vfprintf+0x92>
    85f8:	80 33       	cpi	r24, 0x30	; 48
    85fa:	69 f4       	brne	.+26     	; 0x8616 <vfprintf+0x98>
    85fc:	23 2d       	mov	r18, r3
    85fe:	21 60       	ori	r18, 0x01	; 1
    8600:	16 c0       	rjmp	.+44     	; 0x862e <vfprintf+0xb0>
    8602:	83 2d       	mov	r24, r3
    8604:	82 60       	ori	r24, 0x02	; 2
    8606:	38 2e       	mov	r3, r24
    8608:	e3 2d       	mov	r30, r3
    860a:	e4 60       	ori	r30, 0x04	; 4
    860c:	3e 2e       	mov	r3, r30
    860e:	2a c0       	rjmp	.+84     	; 0x8664 <vfprintf+0xe6>
    8610:	f3 2d       	mov	r31, r3
    8612:	f8 60       	ori	r31, 0x08	; 8
    8614:	1d c0       	rjmp	.+58     	; 0x8650 <vfprintf+0xd2>
    8616:	37 fc       	sbrc	r3, 7
    8618:	2d c0       	rjmp	.+90     	; 0x8674 <vfprintf+0xf6>
    861a:	20 ed       	ldi	r18, 0xD0	; 208
    861c:	28 0f       	add	r18, r24
    861e:	2a 30       	cpi	r18, 0x0A	; 10
    8620:	40 f0       	brcs	.+16     	; 0x8632 <vfprintf+0xb4>
    8622:	8e 32       	cpi	r24, 0x2E	; 46
    8624:	b9 f4       	brne	.+46     	; 0x8654 <vfprintf+0xd6>
    8626:	36 fc       	sbrc	r3, 6
    8628:	81 c1       	rjmp	.+770    	; 0x892c <vfprintf+0x3ae>
    862a:	23 2d       	mov	r18, r3
    862c:	20 64       	ori	r18, 0x40	; 64
    862e:	32 2e       	mov	r3, r18
    8630:	19 c0       	rjmp	.+50     	; 0x8664 <vfprintf+0xe6>
    8632:	36 fe       	sbrs	r3, 6
    8634:	06 c0       	rjmp	.+12     	; 0x8642 <vfprintf+0xc4>
    8636:	8a e0       	ldi	r24, 0x0A	; 10
    8638:	98 9e       	mul	r9, r24
    863a:	20 0d       	add	r18, r0
    863c:	11 24       	eor	r1, r1
    863e:	92 2e       	mov	r9, r18
    8640:	11 c0       	rjmp	.+34     	; 0x8664 <vfprintf+0xe6>
    8642:	ea e0       	ldi	r30, 0x0A	; 10
    8644:	2e 9e       	mul	r2, r30
    8646:	20 0d       	add	r18, r0
    8648:	11 24       	eor	r1, r1
    864a:	22 2e       	mov	r2, r18
    864c:	f3 2d       	mov	r31, r3
    864e:	f0 62       	ori	r31, 0x20	; 32
    8650:	3f 2e       	mov	r3, r31
    8652:	08 c0       	rjmp	.+16     	; 0x8664 <vfprintf+0xe6>
    8654:	8c 36       	cpi	r24, 0x6C	; 108
    8656:	21 f4       	brne	.+8      	; 0x8660 <vfprintf+0xe2>
    8658:	83 2d       	mov	r24, r3
    865a:	80 68       	ori	r24, 0x80	; 128
    865c:	38 2e       	mov	r3, r24
    865e:	02 c0       	rjmp	.+4      	; 0x8664 <vfprintf+0xe6>
    8660:	88 36       	cpi	r24, 0x68	; 104
    8662:	41 f4       	brne	.+16     	; 0x8674 <vfprintf+0xf6>
    8664:	f7 01       	movw	r30, r14
    8666:	93 fd       	sbrc	r25, 3
    8668:	85 91       	lpm	r24, Z+
    866a:	93 ff       	sbrs	r25, 3
    866c:	81 91       	ld	r24, Z+
    866e:	7f 01       	movw	r14, r30
    8670:	81 11       	cpse	r24, r1
    8672:	b3 cf       	rjmp	.-154    	; 0x85da <vfprintf+0x5c>
    8674:	98 2f       	mov	r25, r24
    8676:	9f 7d       	andi	r25, 0xDF	; 223
    8678:	95 54       	subi	r25, 0x45	; 69
    867a:	93 30       	cpi	r25, 0x03	; 3
    867c:	28 f4       	brcc	.+10     	; 0x8688 <vfprintf+0x10a>
    867e:	0c 5f       	subi	r16, 0xFC	; 252
    8680:	1f 4f       	sbci	r17, 0xFF	; 255
    8682:	9f e3       	ldi	r25, 0x3F	; 63
    8684:	99 83       	std	Y+1, r25	; 0x01
    8686:	0d c0       	rjmp	.+26     	; 0x86a2 <vfprintf+0x124>
    8688:	83 36       	cpi	r24, 0x63	; 99
    868a:	31 f0       	breq	.+12     	; 0x8698 <vfprintf+0x11a>
    868c:	83 37       	cpi	r24, 0x73	; 115
    868e:	71 f0       	breq	.+28     	; 0x86ac <vfprintf+0x12e>
    8690:	83 35       	cpi	r24, 0x53	; 83
    8692:	09 f0       	breq	.+2      	; 0x8696 <vfprintf+0x118>
    8694:	59 c0       	rjmp	.+178    	; 0x8748 <vfprintf+0x1ca>
    8696:	21 c0       	rjmp	.+66     	; 0x86da <vfprintf+0x15c>
    8698:	f8 01       	movw	r30, r16
    869a:	80 81       	ld	r24, Z
    869c:	89 83       	std	Y+1, r24	; 0x01
    869e:	0e 5f       	subi	r16, 0xFE	; 254
    86a0:	1f 4f       	sbci	r17, 0xFF	; 255
    86a2:	88 24       	eor	r8, r8
    86a4:	83 94       	inc	r8
    86a6:	91 2c       	mov	r9, r1
    86a8:	53 01       	movw	r10, r6
    86aa:	13 c0       	rjmp	.+38     	; 0x86d2 <vfprintf+0x154>
    86ac:	28 01       	movw	r4, r16
    86ae:	f2 e0       	ldi	r31, 0x02	; 2
    86b0:	4f 0e       	add	r4, r31
    86b2:	51 1c       	adc	r5, r1
    86b4:	f8 01       	movw	r30, r16
    86b6:	a0 80       	ld	r10, Z
    86b8:	b1 80       	ldd	r11, Z+1	; 0x01
    86ba:	36 fe       	sbrs	r3, 6
    86bc:	03 c0       	rjmp	.+6      	; 0x86c4 <vfprintf+0x146>
    86be:	69 2d       	mov	r22, r9
    86c0:	70 e0       	ldi	r23, 0x00	; 0
    86c2:	02 c0       	rjmp	.+4      	; 0x86c8 <vfprintf+0x14a>
    86c4:	6f ef       	ldi	r22, 0xFF	; 255
    86c6:	7f ef       	ldi	r23, 0xFF	; 255
    86c8:	c5 01       	movw	r24, r10
    86ca:	0e 94 ab 44 	call	0x8956	; 0x8956 <strnlen>
    86ce:	4c 01       	movw	r8, r24
    86d0:	82 01       	movw	r16, r4
    86d2:	f3 2d       	mov	r31, r3
    86d4:	ff 77       	andi	r31, 0x7F	; 127
    86d6:	3f 2e       	mov	r3, r31
    86d8:	16 c0       	rjmp	.+44     	; 0x8706 <vfprintf+0x188>
    86da:	28 01       	movw	r4, r16
    86dc:	22 e0       	ldi	r18, 0x02	; 2
    86de:	42 0e       	add	r4, r18
    86e0:	51 1c       	adc	r5, r1
    86e2:	f8 01       	movw	r30, r16
    86e4:	a0 80       	ld	r10, Z
    86e6:	b1 80       	ldd	r11, Z+1	; 0x01
    86e8:	36 fe       	sbrs	r3, 6
    86ea:	03 c0       	rjmp	.+6      	; 0x86f2 <vfprintf+0x174>
    86ec:	69 2d       	mov	r22, r9
    86ee:	70 e0       	ldi	r23, 0x00	; 0
    86f0:	02 c0       	rjmp	.+4      	; 0x86f6 <vfprintf+0x178>
    86f2:	6f ef       	ldi	r22, 0xFF	; 255
    86f4:	7f ef       	ldi	r23, 0xFF	; 255
    86f6:	c5 01       	movw	r24, r10
    86f8:	0e 94 a0 44 	call	0x8940	; 0x8940 <strnlen_P>
    86fc:	4c 01       	movw	r8, r24
    86fe:	f3 2d       	mov	r31, r3
    8700:	f0 68       	ori	r31, 0x80	; 128
    8702:	3f 2e       	mov	r3, r31
    8704:	82 01       	movw	r16, r4
    8706:	33 fc       	sbrc	r3, 3
    8708:	1b c0       	rjmp	.+54     	; 0x8740 <vfprintf+0x1c2>
    870a:	82 2d       	mov	r24, r2
    870c:	90 e0       	ldi	r25, 0x00	; 0
    870e:	88 16       	cp	r8, r24
    8710:	99 06       	cpc	r9, r25
    8712:	b0 f4       	brcc	.+44     	; 0x8740 <vfprintf+0x1c2>
    8714:	b6 01       	movw	r22, r12
    8716:	80 e2       	ldi	r24, 0x20	; 32
    8718:	90 e0       	ldi	r25, 0x00	; 0
    871a:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    871e:	2a 94       	dec	r2
    8720:	f4 cf       	rjmp	.-24     	; 0x870a <vfprintf+0x18c>
    8722:	f5 01       	movw	r30, r10
    8724:	37 fc       	sbrc	r3, 7
    8726:	85 91       	lpm	r24, Z+
    8728:	37 fe       	sbrs	r3, 7
    872a:	81 91       	ld	r24, Z+
    872c:	5f 01       	movw	r10, r30
    872e:	b6 01       	movw	r22, r12
    8730:	90 e0       	ldi	r25, 0x00	; 0
    8732:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    8736:	21 10       	cpse	r2, r1
    8738:	2a 94       	dec	r2
    873a:	21 e0       	ldi	r18, 0x01	; 1
    873c:	82 1a       	sub	r8, r18
    873e:	91 08       	sbc	r9, r1
    8740:	81 14       	cp	r8, r1
    8742:	91 04       	cpc	r9, r1
    8744:	71 f7       	brne	.-36     	; 0x8722 <vfprintf+0x1a4>
    8746:	e8 c0       	rjmp	.+464    	; 0x8918 <vfprintf+0x39a>
    8748:	84 36       	cpi	r24, 0x64	; 100
    874a:	11 f0       	breq	.+4      	; 0x8750 <vfprintf+0x1d2>
    874c:	89 36       	cpi	r24, 0x69	; 105
    874e:	41 f5       	brne	.+80     	; 0x87a0 <vfprintf+0x222>
    8750:	f8 01       	movw	r30, r16
    8752:	37 fe       	sbrs	r3, 7
    8754:	07 c0       	rjmp	.+14     	; 0x8764 <vfprintf+0x1e6>
    8756:	60 81       	ld	r22, Z
    8758:	71 81       	ldd	r23, Z+1	; 0x01
    875a:	82 81       	ldd	r24, Z+2	; 0x02
    875c:	93 81       	ldd	r25, Z+3	; 0x03
    875e:	0c 5f       	subi	r16, 0xFC	; 252
    8760:	1f 4f       	sbci	r17, 0xFF	; 255
    8762:	08 c0       	rjmp	.+16     	; 0x8774 <vfprintf+0x1f6>
    8764:	60 81       	ld	r22, Z
    8766:	71 81       	ldd	r23, Z+1	; 0x01
    8768:	07 2e       	mov	r0, r23
    876a:	00 0c       	add	r0, r0
    876c:	88 0b       	sbc	r24, r24
    876e:	99 0b       	sbc	r25, r25
    8770:	0e 5f       	subi	r16, 0xFE	; 254
    8772:	1f 4f       	sbci	r17, 0xFF	; 255
    8774:	f3 2d       	mov	r31, r3
    8776:	ff 76       	andi	r31, 0x6F	; 111
    8778:	3f 2e       	mov	r3, r31
    877a:	97 ff       	sbrs	r25, 7
    877c:	09 c0       	rjmp	.+18     	; 0x8790 <vfprintf+0x212>
    877e:	90 95       	com	r25
    8780:	80 95       	com	r24
    8782:	70 95       	com	r23
    8784:	61 95       	neg	r22
    8786:	7f 4f       	sbci	r23, 0xFF	; 255
    8788:	8f 4f       	sbci	r24, 0xFF	; 255
    878a:	9f 4f       	sbci	r25, 0xFF	; 255
    878c:	f0 68       	ori	r31, 0x80	; 128
    878e:	3f 2e       	mov	r3, r31
    8790:	2a e0       	ldi	r18, 0x0A	; 10
    8792:	30 e0       	ldi	r19, 0x00	; 0
    8794:	a3 01       	movw	r20, r6
    8796:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__ultoa_invert>
    879a:	88 2e       	mov	r8, r24
    879c:	86 18       	sub	r8, r6
    879e:	45 c0       	rjmp	.+138    	; 0x882a <vfprintf+0x2ac>
    87a0:	85 37       	cpi	r24, 0x75	; 117
    87a2:	31 f4       	brne	.+12     	; 0x87b0 <vfprintf+0x232>
    87a4:	23 2d       	mov	r18, r3
    87a6:	2f 7e       	andi	r18, 0xEF	; 239
    87a8:	b2 2e       	mov	r11, r18
    87aa:	2a e0       	ldi	r18, 0x0A	; 10
    87ac:	30 e0       	ldi	r19, 0x00	; 0
    87ae:	25 c0       	rjmp	.+74     	; 0x87fa <vfprintf+0x27c>
    87b0:	93 2d       	mov	r25, r3
    87b2:	99 7f       	andi	r25, 0xF9	; 249
    87b4:	b9 2e       	mov	r11, r25
    87b6:	8f 36       	cpi	r24, 0x6F	; 111
    87b8:	c1 f0       	breq	.+48     	; 0x87ea <vfprintf+0x26c>
    87ba:	18 f4       	brcc	.+6      	; 0x87c2 <vfprintf+0x244>
    87bc:	88 35       	cpi	r24, 0x58	; 88
    87be:	79 f0       	breq	.+30     	; 0x87de <vfprintf+0x260>
    87c0:	b5 c0       	rjmp	.+362    	; 0x892c <vfprintf+0x3ae>
    87c2:	80 37       	cpi	r24, 0x70	; 112
    87c4:	19 f0       	breq	.+6      	; 0x87cc <vfprintf+0x24e>
    87c6:	88 37       	cpi	r24, 0x78	; 120
    87c8:	21 f0       	breq	.+8      	; 0x87d2 <vfprintf+0x254>
    87ca:	b0 c0       	rjmp	.+352    	; 0x892c <vfprintf+0x3ae>
    87cc:	e9 2f       	mov	r30, r25
    87ce:	e0 61       	ori	r30, 0x10	; 16
    87d0:	be 2e       	mov	r11, r30
    87d2:	b4 fe       	sbrs	r11, 4
    87d4:	0d c0       	rjmp	.+26     	; 0x87f0 <vfprintf+0x272>
    87d6:	fb 2d       	mov	r31, r11
    87d8:	f4 60       	ori	r31, 0x04	; 4
    87da:	bf 2e       	mov	r11, r31
    87dc:	09 c0       	rjmp	.+18     	; 0x87f0 <vfprintf+0x272>
    87de:	34 fe       	sbrs	r3, 4
    87e0:	0a c0       	rjmp	.+20     	; 0x87f6 <vfprintf+0x278>
    87e2:	29 2f       	mov	r18, r25
    87e4:	26 60       	ori	r18, 0x06	; 6
    87e6:	b2 2e       	mov	r11, r18
    87e8:	06 c0       	rjmp	.+12     	; 0x87f6 <vfprintf+0x278>
    87ea:	28 e0       	ldi	r18, 0x08	; 8
    87ec:	30 e0       	ldi	r19, 0x00	; 0
    87ee:	05 c0       	rjmp	.+10     	; 0x87fa <vfprintf+0x27c>
    87f0:	20 e1       	ldi	r18, 0x10	; 16
    87f2:	30 e0       	ldi	r19, 0x00	; 0
    87f4:	02 c0       	rjmp	.+4      	; 0x87fa <vfprintf+0x27c>
    87f6:	20 e1       	ldi	r18, 0x10	; 16
    87f8:	32 e0       	ldi	r19, 0x02	; 2
    87fa:	f8 01       	movw	r30, r16
    87fc:	b7 fe       	sbrs	r11, 7
    87fe:	07 c0       	rjmp	.+14     	; 0x880e <vfprintf+0x290>
    8800:	60 81       	ld	r22, Z
    8802:	71 81       	ldd	r23, Z+1	; 0x01
    8804:	82 81       	ldd	r24, Z+2	; 0x02
    8806:	93 81       	ldd	r25, Z+3	; 0x03
    8808:	0c 5f       	subi	r16, 0xFC	; 252
    880a:	1f 4f       	sbci	r17, 0xFF	; 255
    880c:	06 c0       	rjmp	.+12     	; 0x881a <vfprintf+0x29c>
    880e:	60 81       	ld	r22, Z
    8810:	71 81       	ldd	r23, Z+1	; 0x01
    8812:	80 e0       	ldi	r24, 0x00	; 0
    8814:	90 e0       	ldi	r25, 0x00	; 0
    8816:	0e 5f       	subi	r16, 0xFE	; 254
    8818:	1f 4f       	sbci	r17, 0xFF	; 255
    881a:	a3 01       	movw	r20, r6
    881c:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__ultoa_invert>
    8820:	88 2e       	mov	r8, r24
    8822:	86 18       	sub	r8, r6
    8824:	fb 2d       	mov	r31, r11
    8826:	ff 77       	andi	r31, 0x7F	; 127
    8828:	3f 2e       	mov	r3, r31
    882a:	36 fe       	sbrs	r3, 6
    882c:	0d c0       	rjmp	.+26     	; 0x8848 <vfprintf+0x2ca>
    882e:	23 2d       	mov	r18, r3
    8830:	2e 7f       	andi	r18, 0xFE	; 254
    8832:	a2 2e       	mov	r10, r18
    8834:	89 14       	cp	r8, r9
    8836:	58 f4       	brcc	.+22     	; 0x884e <vfprintf+0x2d0>
    8838:	34 fe       	sbrs	r3, 4
    883a:	0b c0       	rjmp	.+22     	; 0x8852 <vfprintf+0x2d4>
    883c:	32 fc       	sbrc	r3, 2
    883e:	09 c0       	rjmp	.+18     	; 0x8852 <vfprintf+0x2d4>
    8840:	83 2d       	mov	r24, r3
    8842:	8e 7e       	andi	r24, 0xEE	; 238
    8844:	a8 2e       	mov	r10, r24
    8846:	05 c0       	rjmp	.+10     	; 0x8852 <vfprintf+0x2d4>
    8848:	b8 2c       	mov	r11, r8
    884a:	a3 2c       	mov	r10, r3
    884c:	03 c0       	rjmp	.+6      	; 0x8854 <vfprintf+0x2d6>
    884e:	b8 2c       	mov	r11, r8
    8850:	01 c0       	rjmp	.+2      	; 0x8854 <vfprintf+0x2d6>
    8852:	b9 2c       	mov	r11, r9
    8854:	a4 fe       	sbrs	r10, 4
    8856:	0f c0       	rjmp	.+30     	; 0x8876 <vfprintf+0x2f8>
    8858:	fe 01       	movw	r30, r28
    885a:	e8 0d       	add	r30, r8
    885c:	f1 1d       	adc	r31, r1
    885e:	80 81       	ld	r24, Z
    8860:	80 33       	cpi	r24, 0x30	; 48
    8862:	21 f4       	brne	.+8      	; 0x886c <vfprintf+0x2ee>
    8864:	9a 2d       	mov	r25, r10
    8866:	99 7e       	andi	r25, 0xE9	; 233
    8868:	a9 2e       	mov	r10, r25
    886a:	09 c0       	rjmp	.+18     	; 0x887e <vfprintf+0x300>
    886c:	a2 fe       	sbrs	r10, 2
    886e:	06 c0       	rjmp	.+12     	; 0x887c <vfprintf+0x2fe>
    8870:	b3 94       	inc	r11
    8872:	b3 94       	inc	r11
    8874:	04 c0       	rjmp	.+8      	; 0x887e <vfprintf+0x300>
    8876:	8a 2d       	mov	r24, r10
    8878:	86 78       	andi	r24, 0x86	; 134
    887a:	09 f0       	breq	.+2      	; 0x887e <vfprintf+0x300>
    887c:	b3 94       	inc	r11
    887e:	a3 fc       	sbrc	r10, 3
    8880:	11 c0       	rjmp	.+34     	; 0x88a4 <vfprintf+0x326>
    8882:	a0 fe       	sbrs	r10, 0
    8884:	06 c0       	rjmp	.+12     	; 0x8892 <vfprintf+0x314>
    8886:	b2 14       	cp	r11, r2
    8888:	88 f4       	brcc	.+34     	; 0x88ac <vfprintf+0x32e>
    888a:	28 0c       	add	r2, r8
    888c:	92 2c       	mov	r9, r2
    888e:	9b 18       	sub	r9, r11
    8890:	0e c0       	rjmp	.+28     	; 0x88ae <vfprintf+0x330>
    8892:	b2 14       	cp	r11, r2
    8894:	60 f4       	brcc	.+24     	; 0x88ae <vfprintf+0x330>
    8896:	b6 01       	movw	r22, r12
    8898:	80 e2       	ldi	r24, 0x20	; 32
    889a:	90 e0       	ldi	r25, 0x00	; 0
    889c:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    88a0:	b3 94       	inc	r11
    88a2:	f7 cf       	rjmp	.-18     	; 0x8892 <vfprintf+0x314>
    88a4:	b2 14       	cp	r11, r2
    88a6:	18 f4       	brcc	.+6      	; 0x88ae <vfprintf+0x330>
    88a8:	2b 18       	sub	r2, r11
    88aa:	02 c0       	rjmp	.+4      	; 0x88b0 <vfprintf+0x332>
    88ac:	98 2c       	mov	r9, r8
    88ae:	21 2c       	mov	r2, r1
    88b0:	a4 fe       	sbrs	r10, 4
    88b2:	10 c0       	rjmp	.+32     	; 0x88d4 <vfprintf+0x356>
    88b4:	b6 01       	movw	r22, r12
    88b6:	80 e3       	ldi	r24, 0x30	; 48
    88b8:	90 e0       	ldi	r25, 0x00	; 0
    88ba:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    88be:	a2 fe       	sbrs	r10, 2
    88c0:	17 c0       	rjmp	.+46     	; 0x88f0 <vfprintf+0x372>
    88c2:	a1 fc       	sbrc	r10, 1
    88c4:	03 c0       	rjmp	.+6      	; 0x88cc <vfprintf+0x34e>
    88c6:	88 e7       	ldi	r24, 0x78	; 120
    88c8:	90 e0       	ldi	r25, 0x00	; 0
    88ca:	02 c0       	rjmp	.+4      	; 0x88d0 <vfprintf+0x352>
    88cc:	88 e5       	ldi	r24, 0x58	; 88
    88ce:	90 e0       	ldi	r25, 0x00	; 0
    88d0:	b6 01       	movw	r22, r12
    88d2:	0c c0       	rjmp	.+24     	; 0x88ec <vfprintf+0x36e>
    88d4:	8a 2d       	mov	r24, r10
    88d6:	86 78       	andi	r24, 0x86	; 134
    88d8:	59 f0       	breq	.+22     	; 0x88f0 <vfprintf+0x372>
    88da:	a1 fe       	sbrs	r10, 1
    88dc:	02 c0       	rjmp	.+4      	; 0x88e2 <vfprintf+0x364>
    88de:	8b e2       	ldi	r24, 0x2B	; 43
    88e0:	01 c0       	rjmp	.+2      	; 0x88e4 <vfprintf+0x366>
    88e2:	80 e2       	ldi	r24, 0x20	; 32
    88e4:	a7 fc       	sbrc	r10, 7
    88e6:	8d e2       	ldi	r24, 0x2D	; 45
    88e8:	b6 01       	movw	r22, r12
    88ea:	90 e0       	ldi	r25, 0x00	; 0
    88ec:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    88f0:	89 14       	cp	r8, r9
    88f2:	38 f4       	brcc	.+14     	; 0x8902 <vfprintf+0x384>
    88f4:	b6 01       	movw	r22, r12
    88f6:	80 e3       	ldi	r24, 0x30	; 48
    88f8:	90 e0       	ldi	r25, 0x00	; 0
    88fa:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    88fe:	9a 94       	dec	r9
    8900:	f7 cf       	rjmp	.-18     	; 0x88f0 <vfprintf+0x372>
    8902:	8a 94       	dec	r8
    8904:	f3 01       	movw	r30, r6
    8906:	e8 0d       	add	r30, r8
    8908:	f1 1d       	adc	r31, r1
    890a:	80 81       	ld	r24, Z
    890c:	b6 01       	movw	r22, r12
    890e:	90 e0       	ldi	r25, 0x00	; 0
    8910:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    8914:	81 10       	cpse	r8, r1
    8916:	f5 cf       	rjmp	.-22     	; 0x8902 <vfprintf+0x384>
    8918:	22 20       	and	r2, r2
    891a:	09 f4       	brne	.+2      	; 0x891e <vfprintf+0x3a0>
    891c:	42 ce       	rjmp	.-892    	; 0x85a2 <vfprintf+0x24>
    891e:	b6 01       	movw	r22, r12
    8920:	80 e2       	ldi	r24, 0x20	; 32
    8922:	90 e0       	ldi	r25, 0x00	; 0
    8924:	0e 94 b6 44 	call	0x896c	; 0x896c <fputc>
    8928:	2a 94       	dec	r2
    892a:	f6 cf       	rjmp	.-20     	; 0x8918 <vfprintf+0x39a>
    892c:	f6 01       	movw	r30, r12
    892e:	86 81       	ldd	r24, Z+6	; 0x06
    8930:	97 81       	ldd	r25, Z+7	; 0x07
    8932:	02 c0       	rjmp	.+4      	; 0x8938 <vfprintf+0x3ba>
    8934:	8f ef       	ldi	r24, 0xFF	; 255
    8936:	9f ef       	ldi	r25, 0xFF	; 255
    8938:	2b 96       	adiw	r28, 0x0b	; 11
    893a:	e2 e1       	ldi	r30, 0x12	; 18
    893c:	0c 94 69 45 	jmp	0x8ad2	; 0x8ad2 <__epilogue_restores__>

00008940 <strnlen_P>:
    8940:	fc 01       	movw	r30, r24
    8942:	05 90       	lpm	r0, Z+
    8944:	61 50       	subi	r22, 0x01	; 1
    8946:	70 40       	sbci	r23, 0x00	; 0
    8948:	01 10       	cpse	r0, r1
    894a:	d8 f7       	brcc	.-10     	; 0x8942 <strnlen_P+0x2>
    894c:	80 95       	com	r24
    894e:	90 95       	com	r25
    8950:	8e 0f       	add	r24, r30
    8952:	9f 1f       	adc	r25, r31
    8954:	08 95       	ret

00008956 <strnlen>:
    8956:	fc 01       	movw	r30, r24
    8958:	61 50       	subi	r22, 0x01	; 1
    895a:	70 40       	sbci	r23, 0x00	; 0
    895c:	01 90       	ld	r0, Z+
    895e:	01 10       	cpse	r0, r1
    8960:	d8 f7       	brcc	.-10     	; 0x8958 <strnlen+0x2>
    8962:	80 95       	com	r24
    8964:	90 95       	com	r25
    8966:	8e 0f       	add	r24, r30
    8968:	9f 1f       	adc	r25, r31
    896a:	08 95       	ret

0000896c <fputc>:
    896c:	0f 93       	push	r16
    896e:	1f 93       	push	r17
    8970:	cf 93       	push	r28
    8972:	df 93       	push	r29
    8974:	fb 01       	movw	r30, r22
    8976:	23 81       	ldd	r18, Z+3	; 0x03
    8978:	21 fd       	sbrc	r18, 1
    897a:	03 c0       	rjmp	.+6      	; 0x8982 <fputc+0x16>
    897c:	8f ef       	ldi	r24, 0xFF	; 255
    897e:	9f ef       	ldi	r25, 0xFF	; 255
    8980:	2c c0       	rjmp	.+88     	; 0x89da <fputc+0x6e>
    8982:	22 ff       	sbrs	r18, 2
    8984:	16 c0       	rjmp	.+44     	; 0x89b2 <fputc+0x46>
    8986:	46 81       	ldd	r20, Z+6	; 0x06
    8988:	57 81       	ldd	r21, Z+7	; 0x07
    898a:	24 81       	ldd	r18, Z+4	; 0x04
    898c:	35 81       	ldd	r19, Z+5	; 0x05
    898e:	42 17       	cp	r20, r18
    8990:	53 07       	cpc	r21, r19
    8992:	44 f4       	brge	.+16     	; 0x89a4 <fputc+0x38>
    8994:	a0 81       	ld	r26, Z
    8996:	b1 81       	ldd	r27, Z+1	; 0x01
    8998:	9d 01       	movw	r18, r26
    899a:	2f 5f       	subi	r18, 0xFF	; 255
    899c:	3f 4f       	sbci	r19, 0xFF	; 255
    899e:	20 83       	st	Z, r18
    89a0:	31 83       	std	Z+1, r19	; 0x01
    89a2:	8c 93       	st	X, r24
    89a4:	26 81       	ldd	r18, Z+6	; 0x06
    89a6:	37 81       	ldd	r19, Z+7	; 0x07
    89a8:	2f 5f       	subi	r18, 0xFF	; 255
    89aa:	3f 4f       	sbci	r19, 0xFF	; 255
    89ac:	26 83       	std	Z+6, r18	; 0x06
    89ae:	37 83       	std	Z+7, r19	; 0x07
    89b0:	14 c0       	rjmp	.+40     	; 0x89da <fputc+0x6e>
    89b2:	8b 01       	movw	r16, r22
    89b4:	ec 01       	movw	r28, r24
    89b6:	fb 01       	movw	r30, r22
    89b8:	00 84       	ldd	r0, Z+8	; 0x08
    89ba:	f1 85       	ldd	r31, Z+9	; 0x09
    89bc:	e0 2d       	mov	r30, r0
    89be:	09 95       	icall
    89c0:	89 2b       	or	r24, r25
    89c2:	e1 f6       	brne	.-72     	; 0x897c <fputc+0x10>
    89c4:	d8 01       	movw	r26, r16
    89c6:	16 96       	adiw	r26, 0x06	; 6
    89c8:	8d 91       	ld	r24, X+
    89ca:	9c 91       	ld	r25, X
    89cc:	17 97       	sbiw	r26, 0x07	; 7
    89ce:	01 96       	adiw	r24, 0x01	; 1
    89d0:	16 96       	adiw	r26, 0x06	; 6
    89d2:	8d 93       	st	X+, r24
    89d4:	9c 93       	st	X, r25
    89d6:	17 97       	sbiw	r26, 0x07	; 7
    89d8:	ce 01       	movw	r24, r28
    89da:	df 91       	pop	r29
    89dc:	cf 91       	pop	r28
    89de:	1f 91       	pop	r17
    89e0:	0f 91       	pop	r16
    89e2:	08 95       	ret

000089e4 <__ultoa_invert>:
    89e4:	fa 01       	movw	r30, r20
    89e6:	aa 27       	eor	r26, r26
    89e8:	28 30       	cpi	r18, 0x08	; 8
    89ea:	51 f1       	breq	.+84     	; 0x8a40 <__ultoa_invert+0x5c>
    89ec:	20 31       	cpi	r18, 0x10	; 16
    89ee:	81 f1       	breq	.+96     	; 0x8a50 <__ultoa_invert+0x6c>
    89f0:	e8 94       	clt
    89f2:	6f 93       	push	r22
    89f4:	6e 7f       	andi	r22, 0xFE	; 254
    89f6:	6e 5f       	subi	r22, 0xFE	; 254
    89f8:	7f 4f       	sbci	r23, 0xFF	; 255
    89fa:	8f 4f       	sbci	r24, 0xFF	; 255
    89fc:	9f 4f       	sbci	r25, 0xFF	; 255
    89fe:	af 4f       	sbci	r26, 0xFF	; 255
    8a00:	b1 e0       	ldi	r27, 0x01	; 1
    8a02:	3e d0       	rcall	.+124    	; 0x8a80 <__ultoa_invert+0x9c>
    8a04:	b4 e0       	ldi	r27, 0x04	; 4
    8a06:	3c d0       	rcall	.+120    	; 0x8a80 <__ultoa_invert+0x9c>
    8a08:	67 0f       	add	r22, r23
    8a0a:	78 1f       	adc	r23, r24
    8a0c:	89 1f       	adc	r24, r25
    8a0e:	9a 1f       	adc	r25, r26
    8a10:	a1 1d       	adc	r26, r1
    8a12:	68 0f       	add	r22, r24
    8a14:	79 1f       	adc	r23, r25
    8a16:	8a 1f       	adc	r24, r26
    8a18:	91 1d       	adc	r25, r1
    8a1a:	a1 1d       	adc	r26, r1
    8a1c:	6a 0f       	add	r22, r26
    8a1e:	71 1d       	adc	r23, r1
    8a20:	81 1d       	adc	r24, r1
    8a22:	91 1d       	adc	r25, r1
    8a24:	a1 1d       	adc	r26, r1
    8a26:	20 d0       	rcall	.+64     	; 0x8a68 <__ultoa_invert+0x84>
    8a28:	09 f4       	brne	.+2      	; 0x8a2c <__ultoa_invert+0x48>
    8a2a:	68 94       	set
    8a2c:	3f 91       	pop	r19
    8a2e:	2a e0       	ldi	r18, 0x0A	; 10
    8a30:	26 9f       	mul	r18, r22
    8a32:	11 24       	eor	r1, r1
    8a34:	30 19       	sub	r19, r0
    8a36:	30 5d       	subi	r19, 0xD0	; 208
    8a38:	31 93       	st	Z+, r19
    8a3a:	de f6       	brtc	.-74     	; 0x89f2 <__ultoa_invert+0xe>
    8a3c:	cf 01       	movw	r24, r30
    8a3e:	08 95       	ret
    8a40:	46 2f       	mov	r20, r22
    8a42:	47 70       	andi	r20, 0x07	; 7
    8a44:	40 5d       	subi	r20, 0xD0	; 208
    8a46:	41 93       	st	Z+, r20
    8a48:	b3 e0       	ldi	r27, 0x03	; 3
    8a4a:	0f d0       	rcall	.+30     	; 0x8a6a <__ultoa_invert+0x86>
    8a4c:	c9 f7       	brne	.-14     	; 0x8a40 <__ultoa_invert+0x5c>
    8a4e:	f6 cf       	rjmp	.-20     	; 0x8a3c <__ultoa_invert+0x58>
    8a50:	46 2f       	mov	r20, r22
    8a52:	4f 70       	andi	r20, 0x0F	; 15
    8a54:	40 5d       	subi	r20, 0xD0	; 208
    8a56:	4a 33       	cpi	r20, 0x3A	; 58
    8a58:	18 f0       	brcs	.+6      	; 0x8a60 <__ultoa_invert+0x7c>
    8a5a:	49 5d       	subi	r20, 0xD9	; 217
    8a5c:	31 fd       	sbrc	r19, 1
    8a5e:	40 52       	subi	r20, 0x20	; 32
    8a60:	41 93       	st	Z+, r20
    8a62:	02 d0       	rcall	.+4      	; 0x8a68 <__ultoa_invert+0x84>
    8a64:	a9 f7       	brne	.-22     	; 0x8a50 <__ultoa_invert+0x6c>
    8a66:	ea cf       	rjmp	.-44     	; 0x8a3c <__ultoa_invert+0x58>
    8a68:	b4 e0       	ldi	r27, 0x04	; 4
    8a6a:	a6 95       	lsr	r26
    8a6c:	97 95       	ror	r25
    8a6e:	87 95       	ror	r24
    8a70:	77 95       	ror	r23
    8a72:	67 95       	ror	r22
    8a74:	ba 95       	dec	r27
    8a76:	c9 f7       	brne	.-14     	; 0x8a6a <__ultoa_invert+0x86>
    8a78:	00 97       	sbiw	r24, 0x00	; 0
    8a7a:	61 05       	cpc	r22, r1
    8a7c:	71 05       	cpc	r23, r1
    8a7e:	08 95       	ret
    8a80:	9b 01       	movw	r18, r22
    8a82:	ac 01       	movw	r20, r24
    8a84:	0a 2e       	mov	r0, r26
    8a86:	06 94       	lsr	r0
    8a88:	57 95       	ror	r21
    8a8a:	47 95       	ror	r20
    8a8c:	37 95       	ror	r19
    8a8e:	27 95       	ror	r18
    8a90:	ba 95       	dec	r27
    8a92:	c9 f7       	brne	.-14     	; 0x8a86 <__ultoa_invert+0xa2>
    8a94:	62 0f       	add	r22, r18
    8a96:	73 1f       	adc	r23, r19
    8a98:	84 1f       	adc	r24, r20
    8a9a:	95 1f       	adc	r25, r21
    8a9c:	a0 1d       	adc	r26, r0
    8a9e:	08 95       	ret

00008aa0 <__prologue_saves__>:
    8aa0:	2f 92       	push	r2
    8aa2:	3f 92       	push	r3
    8aa4:	4f 92       	push	r4
    8aa6:	5f 92       	push	r5
    8aa8:	6f 92       	push	r6
    8aaa:	7f 92       	push	r7
    8aac:	8f 92       	push	r8
    8aae:	9f 92       	push	r9
    8ab0:	af 92       	push	r10
    8ab2:	bf 92       	push	r11
    8ab4:	cf 92       	push	r12
    8ab6:	df 92       	push	r13
    8ab8:	ef 92       	push	r14
    8aba:	ff 92       	push	r15
    8abc:	0f 93       	push	r16
    8abe:	1f 93       	push	r17
    8ac0:	cf 93       	push	r28
    8ac2:	df 93       	push	r29
    8ac4:	cd b7       	in	r28, 0x3d	; 61
    8ac6:	de b7       	in	r29, 0x3e	; 62
    8ac8:	ca 1b       	sub	r28, r26
    8aca:	db 0b       	sbc	r29, r27
    8acc:	cd bf       	out	0x3d, r28	; 61
    8ace:	de bf       	out	0x3e, r29	; 62
    8ad0:	09 94       	ijmp

00008ad2 <__epilogue_restores__>:
    8ad2:	2a 88       	ldd	r2, Y+18	; 0x12
    8ad4:	39 88       	ldd	r3, Y+17	; 0x11
    8ad6:	48 88       	ldd	r4, Y+16	; 0x10
    8ad8:	5f 84       	ldd	r5, Y+15	; 0x0f
    8ada:	6e 84       	ldd	r6, Y+14	; 0x0e
    8adc:	7d 84       	ldd	r7, Y+13	; 0x0d
    8ade:	8c 84       	ldd	r8, Y+12	; 0x0c
    8ae0:	9b 84       	ldd	r9, Y+11	; 0x0b
    8ae2:	aa 84       	ldd	r10, Y+10	; 0x0a
    8ae4:	b9 84       	ldd	r11, Y+9	; 0x09
    8ae6:	c8 84       	ldd	r12, Y+8	; 0x08
    8ae8:	df 80       	ldd	r13, Y+7	; 0x07
    8aea:	ee 80       	ldd	r14, Y+6	; 0x06
    8aec:	fd 80       	ldd	r15, Y+5	; 0x05
    8aee:	0c 81       	ldd	r16, Y+4	; 0x04
    8af0:	1b 81       	ldd	r17, Y+3	; 0x03
    8af2:	aa 81       	ldd	r26, Y+2	; 0x02
    8af4:	b9 81       	ldd	r27, Y+1	; 0x01
    8af6:	ce 0f       	add	r28, r30
    8af8:	d1 1d       	adc	r29, r1
    8afa:	cd bf       	out	0x3d, r28	; 61
    8afc:	de bf       	out	0x3e, r29	; 62
    8afe:	ed 01       	movw	r28, r26
    8b00:	08 95       	ret

00008b02 <_exit>:
    8b02:	f8 94       	cli

00008b04 <__stop_program>:
    8b04:	ff cf       	rjmp	.-2      	; 0x8b04 <__stop_program>
